
c:/Users/JDVR1/OneDrive/Escritorio/ARgon/luminariaIOT/target/1.3.1-rc.1/argon/luminariaIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d93f0  000d93f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  0001948c  2**0
                  CONTENTS
  4 .data         00000068  2003dbe0  000d93f8  0000dbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ba8  2003dc48  2003dc48  0001dc48  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9460  000d9460  00019460  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9488  000d9488  00019488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eae52  00000000  00000000  0001948c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000130a2  00000000  00000000  001042de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021964  00000000  00000000  00117380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c00  00000000  00000000  00138ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004c88  00000000  00000000  0013b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038b8a  00000000  00000000  0014056c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ef41  00000000  00000000  001790f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102b98  00000000  00000000  001a8037  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ddcc  00000000  00000000  002aabd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a0 87 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fb61 	bl	d86f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fb66 	bl	d870a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dbe0 	.word	0x2003dbe0
   d4048:	000d93f8 	.word	0x000d93f8
   d404c:	2003dc48 	.word	0x2003dc48
   d4050:	2003dc48 	.word	0x2003dc48
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fb45 	bl	d66e8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d93e8 	.word	0x000d93e8
   d4080:	000d93a0 	.word	0x000d93a0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba20 	b.w	d44c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa87 	bl	d459c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 baf7 	b.w	d6684 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 befd 	b.w	d5e94 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 befb 	b.w	d5e94 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bf01 	b.w	d5ea4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 beff 	b.w	d5ea4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8callbackPcPhj>:
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char p[length + 1];
   d40ba:	f102 0308 	add.w	r3, r2, #8
   d40be:	f023 0307 	bic.w	r3, r3, #7
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40c2:	af00      	add	r7, sp, #0
    char p[length + 1];
   d40c4:	ebad 0d03 	sub.w	sp, sp, r3
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40c8:	4614      	mov	r4, r2
   d40ca:	4606      	mov	r6, r0
    char p[length + 1];
    memcpy(p, payload, length);
   d40cc:	4668      	mov	r0, sp
   d40ce:	f004 fb11 	bl	d86f4 <memcpy>
    p[length] = NULL;
   d40d2:	2300      	movs	r3, #0

    if (!strcmp(p, "DEMO"))
   d40d4:	491e      	ldr	r1, [pc, #120]	; (d4150 <_Z8callbackPcPhj+0x98>)
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
   d40d6:	f80d 3004 	strb.w	r3, [sp, r4]

    if (!strcmp(p, "DEMO"))
   d40da:	4668      	mov	r0, sp
   d40dc:	f004 fb46 	bl	d876c <strcmp>

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
   d40e0:	466d      	mov	r5, sp
    memcpy(p, payload, length);
    p[length] = NULL;

    if (!strcmp(p, "DEMO"))
   d40e2:	4601      	mov	r1, r0
   d40e4:	b1e0      	cbz	r0, d4120 <_Z8callbackPcPhj+0x68>
        lightController.sendCommand(0); //  Send DEMO command
    else if (!strcmp(p, "OFF"))
   d40e6:	491b      	ldr	r1, [pc, #108]	; (d4154 <_Z8callbackPcPhj+0x9c>)
   d40e8:	4668      	mov	r0, sp
   d40ea:	f004 fb3f 	bl	d876c <strcmp>
   d40ee:	b908      	cbnz	r0, d40f4 <_Z8callbackPcPhj+0x3c>
        lightController.sendCommand(1);  //  Send OFF command
   d40f0:	2101      	movs	r1, #1
   d40f2:	e015      	b.n	d4120 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE L"))
   d40f4:	4918      	ldr	r1, [pc, #96]	; (d4158 <_Z8callbackPcPhj+0xa0>)
   d40f6:	4668      	mov	r0, sp
   d40f8:	f004 fb38 	bl	d876c <strcmp>
   d40fc:	b908      	cbnz	r0, d4102 <_Z8callbackPcPhj+0x4a>
        lightController.sendCommand(2);  // Send L command
   d40fe:	2102      	movs	r1, #2
   d4100:	e00e      	b.n	d4120 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE T"))
   d4102:	4916      	ldr	r1, [pc, #88]	; (d415c <_Z8callbackPcPhj+0xa4>)
   d4104:	4668      	mov	r0, sp
   d4106:	f004 fb31 	bl	d876c <strcmp>
   d410a:	b908      	cbnz	r0, d4110 <_Z8callbackPcPhj+0x58>
        lightController.sendCommand(3);  // Send T command
   d410c:	2103      	movs	r1, #3
   d410e:	e007      	b.n	d4120 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE U"))
   d4110:	4913      	ldr	r1, [pc, #76]	; (d4160 <_Z8callbackPcPhj+0xa8>)
   d4112:	4668      	mov	r0, sp
   d4114:	f004 fb2a 	bl	d876c <strcmp>
   d4118:	b908      	cbnz	r0, d411e <_Z8callbackPcPhj+0x66>
        lightController.sendCommand(4);  // Send U command
   d411a:	2104      	movs	r1, #4
   d411c:	e000      	b.n	d4120 <_Z8callbackPcPhj+0x68>
    else
        lightController.sendCommand(5);  // Send M command
   d411e:	2105      	movs	r1, #5
   d4120:	4810      	ldr	r0, [pc, #64]	; (d4164 <_Z8callbackPcPhj+0xac>)
   d4122:	f001 f85f 	bl	d51e4 <_ZN8LightIOT11sendCommandEh>
    
        
    Serial.print(topic);Serial.print("  ");
   d4126:	f002 fbed 	bl	d6904 <_Z16_fetch_usbserialv>
   d412a:	4631      	mov	r1, r6
   d412c:	f002 f924 	bl	d6378 <_ZN5Print5printEPKc>
   d4130:	f002 fbe8 	bl	d6904 <_Z16_fetch_usbserialv>
   d4134:	490c      	ldr	r1, [pc, #48]	; (d4168 <_Z8callbackPcPhj+0xb0>)
   d4136:	f002 f91f 	bl	d6378 <_ZN5Print5printEPKc>
    Serial.println(p);
   d413a:	f002 fbe3 	bl	d6904 <_Z16_fetch_usbserialv>
   d413e:	4629      	mov	r1, r5
   d4140:	f002 f92d 	bl	d639e <_ZN5Print7printlnEPKc>
    delay(100);
   d4144:	2064      	movs	r0, #100	; 0x64
   d4146:	f002 fa5f 	bl	d6608 <delay>
}
   d414a:	46bd      	mov	sp, r7
   d414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d414e:	bf00      	nop
   d4150:	000d87b4 	.word	0x000d87b4
   d4154:	000d87b9 	.word	0x000d87b9
   d4158:	000d87bd 	.word	0x000d87bd
   d415c:	000d87c4 	.word	0x000d87c4
   d4160:	000d87cb 	.word	0x000d87cb
   d4164:	2003dcbc 	.word	0x2003dcbc
   d4168:	000d87d2 	.word	0x000d87d2

000d416c <_ZN8LightIOTD1Ev>:
    #define INA219_BATTERY                         (0x44)
    #define INA219_PANEL                         (0x41)
    #define INA219_LED                         (0x40)

// This is your main class that users will import into their application
class LightIOT
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f500 60cb 	add.w	r0, r0, #1624	; 0x658
   d4174:	f001 ffcc 	bl	d6110 <_ZN6StringD1Ev>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d417c:	2200      	movs	r2, #0
   d417e:	4611      	mov	r1, r2
   d4180:	6840      	ldr	r0, [r0, #4]
   d4182:	f001 be27 	b.w	d5dd4 <network_ready>

000d4186 <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4186:	2300      	movs	r3, #0
   d4188:	461a      	mov	r2, r3
   d418a:	4619      	mov	r1, r3
   d418c:	6840      	ldr	r0, [r0, #4]
   d418e:	f001 be29 	b.w	d5de4 <network_on>

000d4192 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>:

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
   d4192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4196:	4681      	mov	r9, r0
   d4198:	b094      	sub	sp, #80	; 0x50
   d419a:	4614      	mov	r4, r2
   d419c:	469a      	mov	sl, r3
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d419e:	460d      	mov	r5, r1
   d41a0:	b121      	cbz	r1, d41ac <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1a>
   d41a2:	4608      	mov	r0, r1
   d41a4:	f004 faf4 	bl	d8790 <strlen>
   d41a8:	4607      	mov	r7, r0
   d41aa:	e000      	b.n	d41ae <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1c>
   d41ac:	460f      	mov	r7, r1
   d41ae:	b124      	cbz	r4, d41ba <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x28>
   d41b0:	4620      	mov	r0, r4
   d41b2:	f004 faed 	bl	d8790 <strlen>
   d41b6:	4606      	mov	r6, r0
   d41b8:	e000      	b.n	d41bc <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x2a>
   d41ba:	4626      	mov	r6, r4

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d41bc:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d41c0:	4642      	mov	r2, r8
   d41c2:	2100      	movs	r1, #0
   d41c4:	a801      	add	r0, sp, #4
   d41c6:	f004 faa0 	bl	d870a <memset>
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
   d41ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d41cc:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41d0:	2300      	movs	r3, #0
   d41d2:	aa01      	add	r2, sp, #4
   d41d4:	4619      	mov	r1, r3
   d41d6:	f8d9 0004 	ldr.w	r0, [r9, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d41da:	f8cd 8004 	str.w	r8, [sp, #4]
        creds.ssid = ssid;
   d41de:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
   d41e0:	9703      	str	r7, [sp, #12]
        creds.password = password;
   d41e2:	9404      	str	r4, [sp, #16]
        creds.password_len = passwordLen;
   d41e4:	9605      	str	r6, [sp, #20]
        creds.security = WLanSecurityType(security);
   d41e6:	f88d a018 	strb.w	sl, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41ea:	f001 fe1b 	bl	d5e24 <network_set_credentials>
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }
   d41ee:	fab0 f080 	clz	r0, r0
   d41f2:	0940      	lsrs	r0, r0, #5
   d41f4:	b014      	add	sp, #80	; 0x50
   d41f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d41fa <_ZN5spark9WiFiClass16clearCredentialsEv>:
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d41fa:	2300      	movs	r3, #0
   d41fc:	461a      	mov	r2, r3
   d41fe:	4619      	mov	r1, r3
   d4200:	6840      	ldr	r0, [r0, #4]
   d4202:	f001 be17 	b.w	d5e34 <network_clear_credentials>
	...

000d4208 <_Z14callbackConfigPcPhj>:

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char p[length + 1];
   d420c:	f102 0308 	add.w	r3, r2, #8
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4210:	b08a      	sub	sp, #40	; 0x28
    char p[length + 1];
   d4212:	f023 0307 	bic.w	r3, r3, #7
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4216:	af02      	add	r7, sp, #8
    char p[length + 1];
   d4218:	ebad 0d03 	sub.w	sp, sp, r3
   d421c:	ae02      	add	r6, sp, #8
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d421e:	4680      	mov	r8, r0
   d4220:	4614      	mov	r4, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d4222:	4630      	mov	r0, r6
   d4224:	f004 fa66 	bl	d86f4 <memcpy>
    p[length] = NULL;
   d4228:	2300      	movs	r3, #0

    
    if(strcmp(topic, "changeMQTT")==0){
   d422a:	492e      	ldr	r1, [pc, #184]	; (d42e4 <_Z14callbackConfigPcPhj+0xdc>)
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
   d422c:	5533      	strb	r3, [r6, r4]

    
    if(strcmp(topic, "changeMQTT")==0){
   d422e:	4640      	mov	r0, r8
   d4230:	f004 fa9c 	bl	d876c <strcmp>
   d4234:	b928      	cbnz	r0, d4242 <_Z14callbackConfigPcPhj+0x3a>
        client.setBroker(p, 1883);
   d4236:	f240 725b 	movw	r2, #1883	; 0x75b
   d423a:	4631      	mov	r1, r6
   d423c:	482a      	ldr	r0, [pc, #168]	; (d42e8 <_Z14callbackConfigPcPhj+0xe0>)
   d423e:	f000 fbbf 	bl	d49c0 <_ZN4MQTT9setBrokerEPct>
    }

    if(strcmp(topic, "changeNetwork")==0){
   d4242:	492a      	ldr	r1, [pc, #168]	; (d42ec <_Z14callbackConfigPcPhj+0xe4>)
   d4244:	4640      	mov	r0, r8
   d4246:	f004 fa91 	bl	d876c <strcmp>
   d424a:	4604      	mov	r4, r0
   d424c:	bba0      	cbnz	r0, d42b8 <_Z14callbackConfigPcPhj+0xb0>
        String credentials[2];
   d424e:	4928      	ldr	r1, [pc, #160]	; (d42f0 <_Z14callbackConfigPcPhj+0xe8>)
   d4250:	4d28      	ldr	r5, [pc, #160]	; (d42f4 <_Z14callbackConfigPcPhj+0xec>)
   d4252:	4638      	mov	r0, r7
   d4254:	f001 ffa3 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
   d4258:	4925      	ldr	r1, [pc, #148]	; (d42f0 <_Z14callbackConfigPcPhj+0xe8>)
   d425a:	f107 0010 	add.w	r0, r7, #16
   d425e:	f001 ff9e 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
        lightController.getCredentials(credentials,p);
   d4262:	4632      	mov	r2, r6
   d4264:	4639      	mov	r1, r7
   d4266:	4824      	ldr	r0, [pc, #144]	; (d42f8 <_Z14callbackConfigPcPhj+0xf0>)
   d4268:	f000 ff16 	bl	d5098 <_ZN8LightIOT14getCredentialsEP6StringPc>
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d426c:	4622      	mov	r2, r4
   d426e:	2102      	movs	r1, #2
   d4270:	6868      	ldr	r0, [r5, #4]
   d4272:	f001 fda7 	bl	d5dc4 <network_disconnect>

        WiFi.disconnect();

        WiFi.clearCredentials();
   d4276:	4628      	mov	r0, r5
   d4278:	f7ff ffbf 	bl	d41fa <_ZN5spark9WiFiClass16clearCredentialsEv>
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
   d427c:	4623      	mov	r3, r4
   d427e:	4622      	mov	r2, r4
   d4280:	491e      	ldr	r1, [pc, #120]	; (d42fc <_Z14callbackConfigPcPhj+0xf4>)
   d4282:	9400      	str	r4, [sp, #0]
   d4284:	4628      	mov	r0, r5
   d4286:	f7ff ff84 	bl	d4192 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    }

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
   d428a:	2303      	movs	r3, #3
   d428c:	693a      	ldr	r2, [r7, #16]
   d428e:	6839      	ldr	r1, [r7, #0]
   d4290:	9400      	str	r4, [sp, #0]
   d4292:	4628      	mov	r0, r5
   d4294:	f7ff ff7d 	bl	d4192 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
        WiFi.setCredentials("Luminarias");
        WiFi.setCredentials(credentials[0],credentials[1]);
        //Activamos wifi e intentamos conexion
        WiFi.on();
   d4298:	4628      	mov	r0, r5
   d429a:	f7ff ff74 	bl	d4186 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d429e:	4623      	mov	r3, r4
   d42a0:	4622      	mov	r2, r4
   d42a2:	4621      	mov	r1, r4
   d42a4:	6868      	ldr	r0, [r5, #4]
   d42a6:	f001 fd7d 	bl	d5da4 <network_connect>
    if(strcmp(topic, "changeMQTT")==0){
        client.setBroker(p, 1883);
    }

    if(strcmp(topic, "changeNetwork")==0){
        String credentials[2];
   d42aa:	f107 0010 	add.w	r0, r7, #16
   d42ae:	f001 ff2f 	bl	d6110 <_ZN6StringD1Ev>
   d42b2:	4638      	mov	r0, r7
   d42b4:	f001 ff2c 	bl	d6110 <_ZN6StringD1Ev>
        //Activamos wifi e intentamos conexion
        WiFi.on();
        WiFi.connect();
    }

    Serial.print(topic);Serial.print("  ");
   d42b8:	f002 fb24 	bl	d6904 <_Z16_fetch_usbserialv>
   d42bc:	4641      	mov	r1, r8
   d42be:	f002 f85b 	bl	d6378 <_ZN5Print5printEPKc>
   d42c2:	f002 fb1f 	bl	d6904 <_Z16_fetch_usbserialv>
   d42c6:	490e      	ldr	r1, [pc, #56]	; (d4300 <_Z14callbackConfigPcPhj+0xf8>)
   d42c8:	f002 f856 	bl	d6378 <_ZN5Print5printEPKc>
    Serial.println(p);
   d42cc:	f002 fb1a 	bl	d6904 <_Z16_fetch_usbserialv>
   d42d0:	4631      	mov	r1, r6
   d42d2:	f002 f864 	bl	d639e <_ZN5Print7printlnEPKc>
    delay(100);
   d42d6:	2064      	movs	r0, #100	; 0x64
   d42d8:	f002 f996 	bl	d6608 <delay>
}
   d42dc:	3720      	adds	r7, #32
   d42de:	46bd      	mov	sp, r7
   d42e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42e4:	000d87d5 	.word	0x000d87d5
   d42e8:	2003dc58 	.word	0x2003dc58
   d42ec:	000d87e0 	.word	0x000d87e0
   d42f0:	000d9070 	.word	0x000d9070
   d42f4:	2003e704 	.word	0x2003e704
   d42f8:	2003dcbc 	.word	0x2003dcbc
   d42fc:	000d87ee 	.word	0x000d87ee
   d4300:	000d87d2 	.word	0x000d87d2

000d4304 <_Z17connectMqttServerv>:

//=============================================================
//=================== MAIN MQTT CONNECTION ====================
//=============================================================

bool connectMqttServer(){
   d4304:	b510      	push	{r4, lr}
   d4306:	b098      	sub	sp, #96	; 0x60
    bool state = false;
    Serial.println("Conectando con server MQTT");
   d4308:	f002 fafc 	bl	d6904 <_Z16_fetch_usbserialv>
   d430c:	4941      	ldr	r1, [pc, #260]	; (d4414 <_Z17connectMqttServerv+0x110>)
   d430e:	f002 f846 	bl	d639e <_ZN5Print7printlnEPKc>
    // connect to the server
    Serial.println(System.deviceID());
   d4312:	f002 faf7 	bl	d6904 <_Z16_fetch_usbserialv>
   d4316:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4318:	a814      	add	r0, sp, #80	; 0x50
   d431a:	f001 fdab 	bl	d5e74 <spark_deviceID>
   d431e:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4320:	4620      	mov	r0, r4
   d4322:	f002 f83c 	bl	d639e <_ZN5Print7printlnEPKc>
   d4326:	a814      	add	r0, sp, #80	; 0x50
   d4328:	f001 fef2 	bl	d6110 <_ZN6StringD1Ev>
   d432c:	a814      	add	r0, sp, #80	; 0x50
   d432e:	f001 fda1 	bl	d5e74 <spark_deviceID>
    client.connect("argonClient",System.deviceID(), "anything");
   d4332:	4b39      	ldr	r3, [pc, #228]	; (d4418 <_Z17connectMqttServerv+0x114>)
   d4334:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d4336:	4939      	ldr	r1, [pc, #228]	; (d441c <_Z17connectMqttServerv+0x118>)
   d4338:	4839      	ldr	r0, [pc, #228]	; (d4420 <_Z17connectMqttServerv+0x11c>)
   d433a:	f000 fc2b 	bl	d4b94 <_ZN4MQTT7connectEPKcS1_S1_>
   d433e:	a814      	add	r0, sp, #80	; 0x50
   d4340:	f001 fee6 	bl	d6110 <_ZN6StringD1Ev>
    
    String baseTopic = "changeMode";
   d4344:	4937      	ldr	r1, [pc, #220]	; (d4424 <_Z17connectMqttServerv+0x120>)
   d4346:	4668      	mov	r0, sp
   d4348:	f001 ff29 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d434c:	4669      	mov	r1, sp
   d434e:	a810      	add	r0, sp, #64	; 0x40
   d4350:	f001 ff47 	bl	d61e2 <_ZN6StringC1ERKS_>
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d4354:	4934      	ldr	r1, [pc, #208]	; (d4428 <_Z17connectMqttServerv+0x124>)
   d4356:	a810      	add	r0, sp, #64	; 0x40
   d4358:	f001 ffbc 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d435c:	4604      	mov	r4, r0
   d435e:	a814      	add	r0, sp, #80	; 0x50
   d4360:	f001 fd88 	bl	d5e74 <spark_deviceID>
   d4364:	a914      	add	r1, sp, #80	; 0x50
   d4366:	4620      	mov	r0, r4
   d4368:	f001 ffa8 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d436c:	4601      	mov	r1, r0
   d436e:	a804      	add	r0, sp, #16
   d4370:	f001 ff37 	bl	d61e2 <_ZN6StringC1ERKS_>
   d4374:	a814      	add	r0, sp, #80	; 0x50
   d4376:	f001 fecb 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d437a:	a810      	add	r0, sp, #64	; 0x40
   d437c:	f001 fec8 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4380:	4669      	mov	r1, sp
   d4382:	a80c      	add	r0, sp, #48	; 0x30
   d4384:	f001 ff2d 	bl	d61e2 <_ZN6StringC1ERKS_>
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d4388:	4927      	ldr	r1, [pc, #156]	; (d4428 <_Z17connectMqttServerv+0x124>)
   d438a:	a80c      	add	r0, sp, #48	; 0x30
   d438c:	f001 ffa2 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d4390:	4926      	ldr	r1, [pc, #152]	; (d442c <_Z17connectMqttServerv+0x128>)
   d4392:	4604      	mov	r4, r0
   d4394:	a810      	add	r0, sp, #64	; 0x40
   d4396:	f001 ff02 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
   d439a:	a910      	add	r1, sp, #64	; 0x40
   d439c:	4620      	mov	r0, r4
   d439e:	f001 ff8d 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d43a2:	220a      	movs	r2, #10
   d43a4:	4604      	mov	r4, r0
   d43a6:	2108      	movs	r1, #8
   d43a8:	a814      	add	r0, sp, #80	; 0x50
   d43aa:	f001 ff36 	bl	d621a <_ZN6StringC1Eih>
   d43ae:	a914      	add	r1, sp, #80	; 0x50
   d43b0:	4620      	mov	r0, r4
   d43b2:	f001 ff83 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d43b6:	4601      	mov	r1, r0
   d43b8:	a808      	add	r0, sp, #32
   d43ba:	f001 ff12 	bl	d61e2 <_ZN6StringC1ERKS_>
   d43be:	a814      	add	r0, sp, #80	; 0x50
   d43c0:	f001 fea6 	bl	d6110 <_ZN6StringD1Ev>
   d43c4:	a810      	add	r0, sp, #64	; 0x40
   d43c6:	f001 fea3 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43ca:	a80c      	add	r0, sp, #48	; 0x30
   d43cc:	f001 fea0 	bl	d6110 <_ZN6StringD1Ev>

    // publish/subscribe
    if (client.isConnected()) {
   d43d0:	4813      	ldr	r0, [pc, #76]	; (d4420 <_Z17connectMqttServerv+0x11c>)
   d43d2:	f000 fae7 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d43d6:	b180      	cbz	r0, d43fa <_Z17connectMqttServerv+0xf6>
        client.subscribe(baseTopic, MQTT::QOS2);
   d43d8:	2202      	movs	r2, #2
   d43da:	9900      	ldr	r1, [sp, #0]
   d43dc:	4810      	ldr	r0, [pc, #64]	; (d4420 <_Z17connectMqttServerv+0x11c>)
   d43de:	f000 fda5 	bl	d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceID, MQTT::QOS2);
   d43e2:	2202      	movs	r2, #2
   d43e4:	9904      	ldr	r1, [sp, #16]
   d43e6:	480e      	ldr	r0, [pc, #56]	; (d4420 <_Z17connectMqttServerv+0x11c>)
   d43e8:	f000 fda0 	bl	d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceName, MQTT::QOS2);
   d43ec:	2202      	movs	r2, #2
   d43ee:	9908      	ldr	r1, [sp, #32]
   d43f0:	480b      	ldr	r0, [pc, #44]	; (d4420 <_Z17connectMqttServerv+0x11c>)
   d43f2:	f000 fd9b 	bl	d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        state = true;
   d43f6:	2401      	movs	r4, #1
   d43f8:	e000      	b.n	d43fc <_Z17connectMqttServerv+0xf8>
//=============================================================
//=================== MAIN MQTT CONNECTION ====================
//=============================================================

bool connectMqttServer(){
    bool state = false;
   d43fa:	4604      	mov	r4, r0
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d43fc:	a808      	add	r0, sp, #32
   d43fe:	f001 fe87 	bl	d6110 <_ZN6StringD1Ev>
    // connect to the server
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d4402:	a804      	add	r0, sp, #16
   d4404:	f001 fe84 	bl	d6110 <_ZN6StringD1Ev>
    Serial.println("Conectando con server MQTT");
    // connect to the server
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
   d4408:	4668      	mov	r0, sp
   d440a:	f001 fe81 	bl	d6110 <_ZN6StringD1Ev>
        client.subscribe(topicDeviceName, MQTT::QOS2);
        state = true;
    }

    return state;
}
   d440e:	4620      	mov	r0, r4
   d4410:	b018      	add	sp, #96	; 0x60
   d4412:	bd10      	pop	{r4, pc}
   d4414:	000d87f9 	.word	0x000d87f9
   d4418:	000d8814 	.word	0x000d8814
   d441c:	000d881d 	.word	0x000d881d
   d4420:	2003dc58 	.word	0x2003dc58
   d4424:	000d8829 	.word	0x000d8829
   d4428:	000d8834 	.word	0x000d8834
   d442c:	000d8836 	.word	0x000d8836

000d4430 <_Z17connectMqttConfigv>:

//=============================================================
//=================== CONFIG MQTT CONNECTION ==================
//=============================================================
bool connectMqttConfig(){
   d4430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool state = false;
    Serial.println("Conectando con server MQTT Config");
   d4432:	f002 fa67 	bl	d6904 <_Z16_fetch_usbserialv>
   d4436:	4910      	ldr	r1, [pc, #64]	; (d4478 <_Z17connectMqttConfigv+0x48>)
   d4438:	f001 ffb1 	bl	d639e <_ZN5Print7printlnEPKc>
   d443c:	4668      	mov	r0, sp
   d443e:	f001 fd19 	bl	d5e74 <spark_deviceID>
    // connect to the server
    clientConfig.connect("argonClient",System.deviceID(), "anything");
   d4442:	4b0e      	ldr	r3, [pc, #56]	; (d447c <_Z17connectMqttConfigv+0x4c>)
   d4444:	9a00      	ldr	r2, [sp, #0]
   d4446:	490e      	ldr	r1, [pc, #56]	; (d4480 <_Z17connectMqttConfigv+0x50>)
   d4448:	480e      	ldr	r0, [pc, #56]	; (d4484 <_Z17connectMqttConfigv+0x54>)
   d444a:	f000 fba3 	bl	d4b94 <_ZN4MQTT7connectEPKcS1_S1_>
   d444e:	4668      	mov	r0, sp
   d4450:	f001 fe5e 	bl	d6110 <_ZN6StringD1Ev>

    // publish/subscribe
    if (clientConfig.isConnected()) {
   d4454:	480b      	ldr	r0, [pc, #44]	; (d4484 <_Z17connectMqttConfigv+0x54>)
   d4456:	f000 faa5 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d445a:	b150      	cbz	r0, d4472 <_Z17connectMqttConfigv+0x42>
        clientConfig.subscribe("changeNetwork", MQTT::QOS2);
   d445c:	2202      	movs	r2, #2
   d445e:	490a      	ldr	r1, [pc, #40]	; (d4488 <_Z17connectMqttConfigv+0x58>)
   d4460:	4808      	ldr	r0, [pc, #32]	; (d4484 <_Z17connectMqttConfigv+0x54>)
   d4462:	f000 fd63 	bl	d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
   d4466:	2202      	movs	r2, #2
   d4468:	4908      	ldr	r1, [pc, #32]	; (d448c <_Z17connectMqttConfigv+0x5c>)
   d446a:	4806      	ldr	r0, [pc, #24]	; (d4484 <_Z17connectMqttConfigv+0x54>)
   d446c:	f000 fd5e 	bl	d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
   d4470:	2001      	movs	r0, #1
        state = true;
    }

    return state;
   d4472:	b005      	add	sp, #20
   d4474:	f85d fb04 	ldr.w	pc, [sp], #4
   d4478:	000d8840 	.word	0x000d8840
   d447c:	000d8814 	.word	0x000d8814
   d4480:	000d881d 	.word	0x000d881d
   d4484:	2003e340 	.word	0x2003e340
   d4488:	000d87e0 	.word	0x000d87e0
   d448c:	000d87d5 	.word	0x000d87d5

000d4490 <_Z20rutineConnectionMQTTv>:
}

//=============================================================
//==================== CONECCTION RUTINE ======================
//=============================================================
void rutineConnectionMQTT(){
   d4490:	b508      	push	{r3, lr}
    newConnectionAttempt :
    if(!connectMqttServer()) {
   d4492:	f7ff ff37 	bl	d4304 <_Z17connectMqttServerv>
   d4496:	b938      	cbnz	r0, d44a8 <_Z20rutineConnectionMQTTv+0x18>
        if(!connectMqttConfig()){
   d4498:	f7ff ffca 	bl	d4430 <_Z17connectMqttConfigv>
   d449c:	2800      	cmp	r0, #0
   d449e:	d0f8      	beq.n	d4492 <_Z20rutineConnectionMQTTv+0x2>
            goto newConnectionAttempt;
        }else Serial.println("Connexion MQTT CONFIG exitosa");
   d44a0:	f002 fa30 	bl	d6904 <_Z16_fetch_usbserialv>
   d44a4:	4906      	ldr	r1, [pc, #24]	; (d44c0 <_Z20rutineConnectionMQTTv+0x30>)
   d44a6:	e002      	b.n	d44ae <_Z20rutineConnectionMQTTv+0x1e>
    }else Serial.println("Connexion MQTT exitosa");
   d44a8:	f002 fa2c 	bl	d6904 <_Z16_fetch_usbserialv>
   d44ac:	4905      	ldr	r1, [pc, #20]	; (d44c4 <_Z20rutineConnectionMQTTv+0x34>)
   d44ae:	f001 ff76 	bl	d639e <_ZN5Print7printlnEPKc>
    delay(1000);
   d44b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d44b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(!connectMqttServer()) {
        if(!connectMqttConfig()){
            goto newConnectionAttempt;
        }else Serial.println("Connexion MQTT CONFIG exitosa");
    }else Serial.println("Connexion MQTT exitosa");
    delay(1000);
   d44ba:	f002 b8a5 	b.w	d6608 <delay>
   d44be:	bf00      	nop
   d44c0:	000d8862 	.word	0x000d8862
   d44c4:	000d8880 	.word	0x000d8880

000d44c8 <setup>:
}

//=============================================================
//======================= VOID SETUP ==========================
//=============================================================
void setup() {    
   d44c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    pinMode(D7,OUTPUT);
   d44ca:	2101      	movs	r1, #1
   d44cc:	2007      	movs	r0, #7
   d44ce:	f003 f851 	bl	d7574 <pinMode>
    Serial.begin(115200);
   d44d2:	f002 fa17 	bl	d6904 <_Z16_fetch_usbserialv>
   d44d6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44da:	f002 fa07 	bl	d68ec <_ZN9USBSerial5beginEl>

    Serial.println("Conectando con sensores INA219...!");
   d44de:	f002 fa11 	bl	d6904 <_Z16_fetch_usbserialv>
   d44e2:	4927      	ldr	r1, [pc, #156]	; (d4580 <setup+0xb8>)
    lightController.begin();
    Serial.println("Midiendo VOLTAJE y CORRIENTE con INA219 ...");

    WiFi.clearCredentials();
   d44e4:	4c27      	ldr	r4, [pc, #156]	; (d4584 <setup+0xbc>)
//=============================================================
void setup() {    
    pinMode(D7,OUTPUT);
    Serial.begin(115200);

    Serial.println("Conectando con sensores INA219...!");
   d44e6:	f001 ff5a 	bl	d639e <_ZN5Print7printlnEPKc>
    lightController.begin();
   d44ea:	4827      	ldr	r0, [pc, #156]	; (d4588 <setup+0xc0>)
   d44ec:	f000 fdc2 	bl	d5074 <_ZN8LightIOT5beginEv>
    Serial.println("Midiendo VOLTAJE y CORRIENTE con INA219 ...");
   d44f0:	f002 fa08 	bl	d6904 <_Z16_fetch_usbserialv>
   d44f4:	4925      	ldr	r1, [pc, #148]	; (d458c <setup+0xc4>)
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
   d44f6:	2500      	movs	r5, #0
   d44f8:	f001 ff51 	bl	d639e <_ZN5Print7printlnEPKc>

    WiFi.clearCredentials();
   d44fc:	4620      	mov	r0, r4
   d44fe:	f7ff fe7c 	bl	d41fa <_ZN5spark9WiFiClass16clearCredentialsEv>
   d4502:	462b      	mov	r3, r5
   d4504:	462a      	mov	r2, r5
   d4506:	4922      	ldr	r1, [pc, #136]	; (d4590 <setup+0xc8>)
   d4508:	9500      	str	r5, [sp, #0]
   d450a:	4620      	mov	r0, r4
   d450c:	f7ff fe41 	bl	d4192 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    }

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
   d4510:	2303      	movs	r3, #3
   d4512:	4a20      	ldr	r2, [pc, #128]	; (d4594 <setup+0xcc>)
   d4514:	4920      	ldr	r1, [pc, #128]	; (d4598 <setup+0xd0>)
   d4516:	9500      	str	r5, [sp, #0]
   d4518:	4620      	mov	r0, r4
   d451a:	f7ff fe3a 	bl	d4192 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    WiFi.setCredentials("Luminarias");
    WiFi.setCredentials("ARTURO VELAZQUEZ","eliecer1908");

    //Activamos wifi e intentamos conexion
        WiFi.on();
   d451e:	4620      	mov	r0, r4
   d4520:	f7ff fe31 	bl	d4186 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4524:	462b      	mov	r3, r5
   d4526:	462a      	mov	r2, r5
   d4528:	4629      	mov	r1, r5
   d452a:	6860      	ldr	r0, [r4, #4]
   d452c:	f001 fc3a 	bl	d5da4 <network_connect>
        WiFi.connect();
        waitUntil(WiFi.ready); 
   d4530:	4c14      	ldr	r4, [pc, #80]	; (d4584 <setup+0xbc>)
   d4532:	4620      	mov	r0, r4
   d4534:	f7ff fe22 	bl	d417c <_ZN5spark9WiFiClass5readyEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4538:	b1e0      	cbz	r0, d4574 <setup+0xac>
   d453a:	4620      	mov	r0, r4
   d453c:	f7ff fe1e 	bl	d417c <_ZN5spark9WiFiClass5readyEv>
    
    Serial.println(WiFi.SSID());
   d4540:	f002 f9e0 	bl	d6904 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4544:	2200      	movs	r2, #0
   d4546:	4611      	mov	r1, r2
   d4548:	4605      	mov	r5, r0
   d454a:	6860      	ldr	r0, [r4, #4]
   d454c:	f001 fc22 	bl	d5d94 <network_config>
   d4550:	f100 015d 	add.w	r1, r0, #93	; 0x5d
   d4554:	4628      	mov	r0, r5
   d4556:	f001 ff22 	bl	d639e <_ZN5Print7printlnEPKc>
    digitalWrite(D7,HIGH);
   d455a:	2007      	movs	r0, #7
   d455c:	2101      	movs	r1, #1
   d455e:	f003 f81a 	bl	d7596 <digitalWrite>

    if(WiFi.ready()) rutineConnectionMQTT();
   d4562:	4620      	mov	r0, r4
   d4564:	f7ff fe0a 	bl	d417c <_ZN5spark9WiFiClass5readyEv>
   d4568:	b138      	cbz	r0, d457a <setup+0xb2>
}
   d456a:	b003      	add	sp, #12
   d456c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        waitUntil(WiFi.ready); 
    
    Serial.println(WiFi.SSID());
    digitalWrite(D7,HIGH);

    if(WiFi.ready()) rutineConnectionMQTT();
   d4570:	f7ff bf8e 	b.w	d4490 <_Z20rutineConnectionMQTTv>
            spark_process();
   d4574:	f001 fc76 	bl	d5e64 <spark_process>
   d4578:	e7da      	b.n	d4530 <setup+0x68>
}
   d457a:	b003      	add	sp, #12
   d457c:	bd30      	pop	{r4, r5, pc}
   d457e:	bf00      	nop
   d4580:	000d8897 	.word	0x000d8897
   d4584:	2003e704 	.word	0x2003e704
   d4588:	2003dcbc 	.word	0x2003dcbc
   d458c:	000d88ba 	.word	0x000d88ba
   d4590:	000d87ee 	.word	0x000d87ee
   d4594:	000d88e6 	.word	0x000d88e6
   d4598:	000d88f2 	.word	0x000d88f2

000d459c <loop>:


//=============================================================
//======================== VOID LOOP ==========================
//=============================================================
void loop() {
   d459c:	b570      	push	{r4, r5, r6, lr}

    // MQTT SERVER CONNECTION
    if(client.isConnected())   client.loop();
   d459e:	4839      	ldr	r0, [pc, #228]	; (d4684 <loop+0xe8>)


//=============================================================
//======================== VOID LOOP ==========================
//=============================================================
void loop() {
   d45a0:	b08e      	sub	sp, #56	; 0x38

    // MQTT SERVER CONNECTION
    if(client.isConnected())   client.loop();
   d45a2:	f000 f9ff 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d45a6:	b108      	cbz	r0, d45ac <loop+0x10>
   d45a8:	4836      	ldr	r0, [pc, #216]	; (d4684 <loop+0xe8>)
   d45aa:	e004      	b.n	d45b6 <loop+0x1a>
    else if(clientConfig.isConnected())   clientConfig.loop();
   d45ac:	4836      	ldr	r0, [pc, #216]	; (d4688 <loop+0xec>)
   d45ae:	f000 f9f9 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d45b2:	b118      	cbz	r0, d45bc <loop+0x20>
   d45b4:	4834      	ldr	r0, [pc, #208]	; (d4688 <loop+0xec>)
   d45b6:	f000 fbb3 	bl	d4d20 <_ZN4MQTT4loopEv>
   d45ba:	e005      	b.n	d45c8 <loop+0x2c>
    else if(WiFi.ready()) rutineConnectionMQTT();
   d45bc:	4833      	ldr	r0, [pc, #204]	; (d468c <loop+0xf0>)
   d45be:	f7ff fddd 	bl	d417c <_ZN5spark9WiFiClass5readyEv>
   d45c2:	b108      	cbz	r0, d45c8 <loop+0x2c>
   d45c4:	f7ff ff64 	bl	d4490 <_Z20rutineConnectionMQTTv>
    
    lightController.measuring(vAverage,cAverage);
   d45c8:	4d31      	ldr	r5, [pc, #196]	; (d4690 <loop+0xf4>)
   d45ca:	4c32      	ldr	r4, [pc, #200]	; (d4694 <loop+0xf8>)
   d45cc:	4832      	ldr	r0, [pc, #200]	; (d4698 <loop+0xfc>)
   d45ce:	462a      	mov	r2, r5
   d45d0:	4621      	mov	r1, r4
   d45d2:	f000 fe35 	bl	d5240 <_ZN8LightIOT9measuringEPfS0_>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45d6:	f001 fa59 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>

    // MQTT PUBLISH DATA
    unsigned int t = millis();
    if(t > last_t + interval) {
   d45da:	4a30      	ldr	r2, [pc, #192]	; (d469c <loop+0x100>)
   d45dc:	6813      	ldr	r3, [r2, #0]
   d45de:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   d45e2:	3308      	adds	r3, #8
   d45e4:	4283      	cmp	r3, r0
   d45e6:	d24b      	bcs.n	d4680 <loop+0xe4>
    	last_t = t;

        lightController.getAverage(vAverage,cAverage);
   d45e8:	4621      	mov	r1, r4
    lightController.measuring(vAverage,cAverage);

    // MQTT PUBLISH DATA
    unsigned int t = millis();
    if(t > last_t + interval) {
    	last_t = t;
   d45ea:	6010      	str	r0, [r2, #0]

        lightController.getAverage(vAverage,cAverage);
   d45ec:	462a      	mov	r2, r5
   d45ee:	482a      	ldr	r0, [pc, #168]	; (d4698 <loop+0xfc>)
   d45f0:	f000 fe8c 	bl	d530c <_ZN8LightIOT10getAverageEPfS0_>
        lightController.resetModeForError(vAverage[0],cAverage[0]);
   d45f4:	edd5 0a00 	vldr	s1, [r5]
   d45f8:	ed94 0a00 	vldr	s0, [r4]
   d45fc:	4826      	ldr	r0, [pc, #152]	; (d4698 <loop+0xfc>)
   d45fe:	f001 f8cb 	bl	d5798 <_ZN8LightIOT17resetModeForErrorEff>
        Serial.println(vAverage[0]);
   d4602:	f002 f97f 	bl	d6904 <_Z16_fetch_usbserialv>
   d4606:	4606      	mov	r6, r0
   d4608:	6820      	ldr	r0, [r4, #0]
   d460a:	f003 fb19 	bl	d7c40 <__aeabi_f2d>
   d460e:	ec41 0b10 	vmov	d0, r0, r1
   d4612:	2102      	movs	r1, #2
   d4614:	4630      	mov	r0, r6
   d4616:	f001 ffd9 	bl	d65cc <_ZN5Print7printlnEdi>
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d461a:	462b      	mov	r3, r5
   d461c:	4622      	mov	r2, r4
   d461e:	491e      	ldr	r1, [pc, #120]	; (d4698 <loop+0xfc>)
   d4620:	a801      	add	r0, sp, #4
   d4622:	f000 fec7 	bl	d53b4 <_ZN8LightIOT13sensorsToJSONEPfS0_>
        lightController.resetAverage(vAverage,cAverage);
   d4626:	481c      	ldr	r0, [pc, #112]	; (d4698 <loop+0xfc>)
   d4628:	462a      	mov	r2, r5
   d462a:	4621      	mov	r1, r4
   d462c:	f000 feb7 	bl	d539e <_ZN8LightIOT12resetAverageEPfS0_>

    	if (client.isConnected()) {
   d4630:	4814      	ldr	r0, [pc, #80]	; (d4684 <loop+0xe8>)
   d4632:	f000 f9b7 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4636:	b300      	cbz	r0, d467a <loop+0xde>
            client.publish("newData",dataJson);
   d4638:	9a01      	ldr	r2, [sp, #4]
   d463a:	4919      	ldr	r1, [pc, #100]	; (d46a0 <loop+0x104>)
   d463c:	4811      	ldr	r0, [pc, #68]	; (d4684 <loop+0xe8>)
   d463e:	f000 fb28 	bl	d4c92 <_ZN4MQTT7publishEPKcS1_>
            digitalWrite(D7,!digitalRead(D7)); 
   d4642:	2007      	movs	r0, #7
   d4644:	f002 ffc0 	bl	d75c8 <digitalRead>
   d4648:	fab0 f180 	clz	r1, r0
   d464c:	0949      	lsrs	r1, r1, #5
   d464e:	2007      	movs	r0, #7
   d4650:	f002 ffa1 	bl	d7596 <digitalWrite>

            //Power Signal 
            int rssi = WiFi.RSSI();
   d4654:	490d      	ldr	r1, [pc, #52]	; (d468c <loop+0xf0>)
   d4656:	a805      	add	r0, sp, #20
   d4658:	f002 fe88 	bl	d736c <_ZN5spark9WiFiClass4RSSIEv>
   d465c:	a805      	add	r0, sp, #20
   d465e:	f002 fe63 	bl	d7328 <_ZNK10WiFiSignalcvaEv>
   d4662:	4604      	mov	r4, r0
            Serial.print("RSSI: ");Serial.println(rssi);
   d4664:	f002 f94e 	bl	d6904 <_Z16_fetch_usbserialv>
   d4668:	490e      	ldr	r1, [pc, #56]	; (d46a4 <loop+0x108>)
   d466a:	f001 fe85 	bl	d6378 <_ZN5Print5printEPKc>
   d466e:	f002 f949 	bl	d6904 <_Z16_fetch_usbserialv>
   d4672:	220a      	movs	r2, #10
   d4674:	4621      	mov	r1, r4
   d4676:	f001 feed 	bl	d6454 <_ZN5Print7printlnEii>
    	last_t = t;

        lightController.getAverage(vAverage,cAverage);
        lightController.resetModeForError(vAverage[0],cAverage[0]);
        Serial.println(vAverage[0]);
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d467a:	a801      	add	r0, sp, #4
   d467c:	f001 fd48 	bl	d6110 <_ZN6StringD1Ev>
            //Power Signal 
            int rssi = WiFi.RSSI();
            Serial.print("RSSI: ");Serial.println(rssi);
        }
    }
}
   d4680:	b00e      	add	sp, #56	; 0x38
   d4682:	bd70      	pop	{r4, r5, r6, pc}
   d4684:	2003dc58 	.word	0x2003dc58
   d4688:	2003e340 	.word	0x2003e340
   d468c:	2003e704 	.word	0x2003e704
   d4690:	2003dc4c 	.word	0x2003dc4c
   d4694:	2003e334 	.word	0x2003e334
   d4698:	2003dcbc 	.word	0x2003dcbc
   d469c:	2003dcb8 	.word	0x2003dcb8
   d46a0:	000d8903 	.word	0x000d8903
   d46a4:	000d890b 	.word	0x000d890b

000d46a8 <_GLOBAL__sub_I_SystemMode>:
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
        state = true;
    }

    return state;
   d46a8:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d46aa:	f001 f987 	bl	d59bc <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46ae:	4b1b      	ldr	r3, [pc, #108]	; (d471c <_GLOBAL__sub_I_SystemMode+0x74>)
#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

LightIOT lightController(LIGHT_NUMBER);
   d46b0:	4d1b      	ldr	r5, [pc, #108]	; (d4720 <_GLOBAL__sub_I_SystemMode+0x78>)
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46b2:	4e1c      	ldr	r6, [pc, #112]	; (d4724 <_GLOBAL__sub_I_SystemMode+0x7c>)
   d46b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46b8:	2400      	movs	r4, #0
   d46ba:	701c      	strb	r4, [r3, #0]
   d46bc:	805c      	strh	r4, [r3, #2]
   d46be:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46c0:	2002      	movs	r0, #2
   d46c2:	f001 fb3b 	bl	d5d3c <set_system_mode>
#include <MQTT.h>

#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d46c6:	4621      	mov	r1, r4
   d46c8:	2001      	movs	r0, #1
   d46ca:	f001 fb47 	bl	d5d5c <system_thread_set_state>

LightIOT lightController(LIGHT_NUMBER);
   d46ce:	4c16      	ldr	r4, [pc, #88]	; (d4728 <_GLOBAL__sub_I_SystemMode+0x80>)
   d46d0:	2108      	movs	r1, #8
   d46d2:	4628      	mov	r0, r5
   d46d4:	f000 fc68 	bl	d4fa8 <_ZN8LightIOTC1Ei>
   d46d8:	4628      	mov	r0, r5
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46da:	4d14      	ldr	r5, [pc, #80]	; (d472c <_GLOBAL__sub_I_SystemMode+0x84>)
#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

LightIOT lightController(LIGHT_NUMBER);
   d46dc:	4914      	ldr	r1, [pc, #80]	; (d4730 <_GLOBAL__sub_I_SystemMode+0x88>)
   d46de:	4622      	mov	r2, r4
   d46e0:	f002 fffa 	bl	d76d8 <__aeabi_atexit>
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46e4:	4b13      	ldr	r3, [pc, #76]	; (d4734 <_GLOBAL__sub_I_SystemMode+0x8c>)
   d46e6:	4914      	ldr	r1, [pc, #80]	; (d4738 <_GLOBAL__sub_I_SystemMode+0x90>)
   d46e8:	f240 725b 	movw	r2, #1883	; 0x75b
   d46ec:	4628      	mov	r0, r5
   d46ee:	f000 f871 	bl	d47d4 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d46f2:	4628      	mov	r0, r5
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d46f4:	4d11      	ldr	r5, [pc, #68]	; (d473c <_GLOBAL__sub_I_SystemMode+0x94>)
LightIOT lightController(LIGHT_NUMBER);
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46f6:	4622      	mov	r2, r4
   d46f8:	4631      	mov	r1, r6
   d46fa:	f002 ffed 	bl	d76d8 <__aeabi_atexit>
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d46fe:	f240 725b 	movw	r2, #1883	; 0x75b
   d4702:	490f      	ldr	r1, [pc, #60]	; (d4740 <_GLOBAL__sub_I_SystemMode+0x98>)
   d4704:	4b0f      	ldr	r3, [pc, #60]	; (d4744 <_GLOBAL__sub_I_SystemMode+0x9c>)
   d4706:	4628      	mov	r0, r5
   d4708:	f000 f864 	bl	d47d4 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d470c:	4622      	mov	r2, r4
   d470e:	4631      	mov	r1, r6
   d4710:	4628      	mov	r0, r5
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
        state = true;
    }

    return state;
   d4712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d4716:	f002 bfdf 	b.w	d76d8 <__aeabi_atexit>
   d471a:	bf00      	nop
   d471c:	2003dcb0 	.word	0x2003dcb0
   d4720:	2003dcbc 	.word	0x2003dcbc
   d4724:	000d4f79 	.word	0x000d4f79
   d4728:	2003dc48 	.word	0x2003dc48
   d472c:	2003dc58 	.word	0x2003dc58
   d4730:	000d416d 	.word	0x000d416d
   d4734:	000d40b9 	.word	0x000d40b9
   d4738:	000d8912 	.word	0x000d8912
   d473c:	2003e340 	.word	0x2003e340
   d4740:	000d8922 	.word	0x000d8922
   d4744:	000d4209 	.word	0x000d4209

000d4748 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4748:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d474a:	6984      	ldr	r4, [r0, #24]
   d474c:	4b0a      	ldr	r3, [pc, #40]	; (d4778 <_ZN9TCPClientD1Ev+0x30>)
   d474e:	6003      	str	r3, [r0, #0]
   d4750:	4605      	mov	r5, r0
   d4752:	b17c      	cbz	r4, d4774 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4754:	6863      	ldr	r3, [r4, #4]
   d4756:	3b01      	subs	r3, #1
   d4758:	6063      	str	r3, [r4, #4]
   d475a:	b95b      	cbnz	r3, d4774 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d475c:	6823      	ldr	r3, [r4, #0]
   d475e:	4620      	mov	r0, r4
   d4760:	689b      	ldr	r3, [r3, #8]
   d4762:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4764:	68a3      	ldr	r3, [r4, #8]
   d4766:	3b01      	subs	r3, #1
   d4768:	60a3      	str	r3, [r4, #8]
   d476a:	b91b      	cbnz	r3, d4774 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d476c:	6823      	ldr	r3, [r4, #0]
   d476e:	4620      	mov	r0, r4
   d4770:	68db      	ldr	r3, [r3, #12]
   d4772:	4798      	blx	r3
   d4774:	4628      	mov	r0, r5
   d4776:	bd38      	pop	{r3, r4, r5, pc}
   d4778:	000d9254 	.word	0x000d9254

000d477c <_ZN9TCPClientD0Ev>:
   d477c:	b510      	push	{r4, lr}
   d477e:	4604      	mov	r4, r0
   d4780:	f7ff ffe2 	bl	d4748 <_ZN9TCPClientD1Ev>
   d4784:	4620      	mov	r0, r4
   d4786:	211c      	movs	r1, #28
   d4788:	f002 ffab 	bl	d76e2 <_ZdlPvj>
   d478c:	4620      	mov	r0, r4
   d478e:	bd10      	pop	{r4, pc}

000d4790 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4790:	b538      	push	{r3, r4, r5, lr}
   d4792:	461d      	mov	r5, r3
    this->callback = callback;
   d4794:	9b05      	ldr	r3, [sp, #20]
   d4796:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d4798:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d479a:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d479c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d479e:	b102      	cbz	r2, d47a2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d47a0:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d47a2:	b119      	cbz	r1, d47ac <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d47a4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47a8:	f001 fd26 	bl	d61f8 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d47ac:	9b04      	ldr	r3, [sp, #16]
   d47ae:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47b0:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d47b2:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d47b4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47b8:	2bff      	cmp	r3, #255	; 0xff
   d47ba:	bfb8      	it	lt
   d47bc:	23ff      	movlt	r3, #255	; 0xff
   d47be:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d47c2:	b108      	cbz	r0, d47c8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d47c4:	f7ff fc6d 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d47c8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d47cc:	f7ff fc65 	bl	d409a <_Znaj>
   d47d0:	61e0      	str	r0, [r4, #28]
   d47d2:	bd38      	pop	{r3, r4, r5, pc}

000d47d4 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d47d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d47d8:	4604      	mov	r4, r0
   d47da:	2500      	movs	r5, #0
   d47dc:	4617      	mov	r7, r2
   d47de:	4698      	mov	r8, r3
   d47e0:	460e      	mov	r6, r1
   d47e2:	f002 fcf1 	bl	d71c8 <_ZN9TCPClientC1Ev>
   d47e6:	61e5      	str	r5, [r4, #28]
   d47e8:	490a      	ldr	r1, [pc, #40]	; (d4814 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d47ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47ee:	f001 fcd6 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d47f2:	23ff      	movs	r3, #255	; 0xff
   d47f4:	9302      	str	r3, [sp, #8]
   d47f6:	230f      	movs	r3, #15
   d47f8:	9300      	str	r3, [sp, #0]
   d47fa:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d47fc:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d47fe:	f8cd 8004 	str.w	r8, [sp, #4]
   d4802:	463b      	mov	r3, r7
   d4804:	462a      	mov	r2, r5
   d4806:	4631      	mov	r1, r6
   d4808:	f7ff ffc2 	bl	d4790 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d480c:	4620      	mov	r0, r4
   d480e:	b004      	add	sp, #16
   d4810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4814:	000d9070 	.word	0x000d9070

000d4818 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4818:	b510      	push	{r4, lr}
   d481a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d481c:	4620      	mov	r0, r4
   d481e:	f002 fc37 	bl	d7090 <_ZN9TCPClient9availableEv>
   d4822:	2800      	cmp	r0, #0
   d4824:	d0fa      	beq.n	d481c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4826:	4620      	mov	r0, r4
   d4828:	f002 fb53 	bl	d6ed2 <_ZN9TCPClient4readEv>
}
   d482c:	b2c0      	uxtb	r0, r0
   d482e:	bd10      	pop	{r4, pc}

000d4830 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4834:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4836:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4838:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d483a:	f7ff ffed 	bl	d4818 <_ZN4MQTT8readByteEv>
   d483e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4840:	69eb      	ldr	r3, [r5, #28]
   d4842:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4846:	f04f 0901 	mov.w	r9, #1
   d484a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d484e:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4850:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4852:	4628      	mov	r0, r5
   d4854:	f7ff ffe0 	bl	d4818 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4858:	69eb      	ldr	r3, [r5, #28]
   d485a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d485c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4860:	fb13 f309 	smulbb	r3, r3, r9
   d4864:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4866:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4868:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d486a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d486c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d486e:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4872:	d501      	bpl.n	d4878 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4874:	4626      	mov	r6, r4
   d4876:	e7ec      	b.n	d4852 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4878:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d487a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d487e:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d4882:	d113      	bne.n	d48ac <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4884:	4628      	mov	r0, r5
   d4886:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d488a:	f7ff ffc5 	bl	d4818 <_ZN4MQTT8readByteEv>
   d488e:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d4892:	4628      	mov	r0, r5
   d4894:	1cf4      	adds	r4, r6, #3
   d4896:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d489a:	3602      	adds	r6, #2
   d489c:	f7ff ffbc 	bl	d4818 <_ZN4MQTT8readByteEv>
   d48a0:	b2b6      	uxth	r6, r6
   d48a2:	b2a4      	uxth	r4, r4
   d48a4:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d48a8:	2302      	movs	r3, #2
   d48aa:	e000      	b.n	d48ae <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d48ac:	2300      	movs	r3, #0
   d48ae:	1b1b      	subs	r3, r3, r4
   d48b0:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d48b2:	19a3      	adds	r3, r4, r6
   d48b4:	b29b      	uxth	r3, r3
   d48b6:	429f      	cmp	r7, r3
   d48b8:	d90b      	bls.n	d48d2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d48ba:	4628      	mov	r0, r5
   d48bc:	f7ff ffac 	bl	d4818 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d48c0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d48c4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d48c6:	bf84      	itt	hi
   d48c8:	69eb      	ldrhi	r3, [r5, #28]
   d48ca:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d48cc:	3401      	adds	r4, #1
   d48ce:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d48d0:	e7ef      	b.n	d48b2 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d48d2:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d48d6:	42a0      	cmp	r0, r4
   d48d8:	bf2c      	ite	cs
   d48da:	4620      	movcs	r0, r4
   d48dc:	2000      	movcc	r0, #0
   d48de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d48e2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d48e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d48e4:	4607      	mov	r7, r0
   d48e6:	468e      	mov	lr, r1
   d48e8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d48ea:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d48ec:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d48ee:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d48f0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d48f4:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d48f6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d48f8:	bf18      	it	ne
   d48fa:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d48fe:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4900:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d4904:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d4906:	2d00      	cmp	r5, #0
   d4908:	d1f1      	bne.n	d48ee <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d490a:	f1c4 0304 	rsb	r3, r4, #4
   d490e:	18d1      	adds	r1, r2, r3
   d4910:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4914:	42a5      	cmp	r5, r4
   d4916:	da06      	bge.n	d4926 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d4918:	1b2b      	subs	r3, r5, r4
   d491a:	a801      	add	r0, sp, #4
   d491c:	4413      	add	r3, r2
   d491e:	5c28      	ldrb	r0, [r5, r0]
   d4920:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d4922:	3501      	adds	r5, #1
   d4924:	e7f6      	b.n	d4914 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4926:	1c72      	adds	r2, r6, #1
   d4928:	4422      	add	r2, r4
   d492a:	4638      	mov	r0, r7
   d492c:	f002 f9af 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
   d4930:	4605      	mov	r5, r0
   d4932:	f001 f8ab 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4936:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d4938:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d493a:	4434      	add	r4, r6
   d493c:	b2a8      	uxth	r0, r5
}
   d493e:	1a23      	subs	r3, r4, r0
   d4940:	4258      	negs	r0, r3
   d4942:	4158      	adcs	r0, r3
   d4944:	b003      	add	sp, #12
   d4946:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4948 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4948:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d494a:	69c3      	ldr	r3, [r0, #28]
   d494c:	22e0      	movs	r2, #224	; 0xe0
   d494e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4950:	69c3      	ldr	r3, [r0, #28]
   d4952:	2200      	movs	r2, #0
   d4954:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4956:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d4958:	2202      	movs	r2, #2
   d495a:	69c1      	ldr	r1, [r0, #28]
   d495c:	f002 f997 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4960:	4620      	mov	r0, r4
   d4962:	f002 fb7e 	bl	d7062 <_ZN9TCPClient4stopEv>
   d4966:	f001 f891 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d496a:	6260      	str	r0, [r4, #36]	; 0x24
   d496c:	62a0      	str	r0, [r4, #40]	; 0x28
   d496e:	bd10      	pop	{r4, pc}

000d4970 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4970:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4972:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4974:	b29b      	uxth	r3, r3
   d4976:	460d      	mov	r5, r1
   d4978:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d497a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d497e:	b2a4      	uxth	r4, r4
   d4980:	b13e      	cbz	r6, d4992 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d4982:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d4986:	429f      	cmp	r7, r3
   d4988:	d903      	bls.n	d4992 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d498a:	1c5c      	adds	r4, r3, #1
   d498c:	54d6      	strb	r6, [r2, r3]
   d498e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d4990:	e7f2      	b.n	d4978 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4992:	1b19      	subs	r1, r3, r4
   d4994:	440a      	add	r2, r1
   d4996:	1221      	asrs	r1, r4, #8
   d4998:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d499c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d49a0:	4618      	mov	r0, r3
   d49a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49a4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d49a4:	b538      	push	{r3, r4, r5, lr}
   d49a6:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d49a8:	f002 f987 	bl	d6cba <_ZN9TCPClient9connectedEv>
   d49ac:	2800      	cmp	r0, #0
   d49ae:	bf14      	ite	ne
   d49b0:	2401      	movne	r4, #1
   d49b2:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d49b4:	d102      	bne.n	d49bc <_ZN4MQTT11isConnectedEv+0x18>
   d49b6:	4628      	mov	r0, r5
   d49b8:	f002 fb53 	bl	d7062 <_ZN9TCPClient4stopEv>
    return rc;
}
   d49bc:	4620      	mov	r0, r4
   d49be:	bd38      	pop	{r3, r4, r5, pc}

000d49c0 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d49c0:	b570      	push	{r4, r5, r6, lr}
   d49c2:	4604      	mov	r4, r0
   d49c4:	460e      	mov	r6, r1
   d49c6:	4615      	mov	r5, r2
    if(isConnected()) {
   d49c8:	f7ff ffec 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d49cc:	b110      	cbz	r0, d49d4 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d49ce:	4620      	mov	r0, r4
   d49d0:	f7ff ffba 	bl	d4948 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d49d4:	4631      	mov	r1, r6
   d49d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d49da:	f001 fc0d 	bl	d61f8 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d49de:	2300      	movs	r3, #0
   d49e0:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d49e2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d49e6:	bd70      	pop	{r4, r5, r6, pc}

000d49e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d49e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d49ec:	b087      	sub	sp, #28
   d49ee:	4604      	mov	r4, r0
   d49f0:	4689      	mov	r9, r1
   d49f2:	4617      	mov	r7, r2
   d49f4:	461e      	mov	r6, r3
   d49f6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d49fa:	f7ff ffd3 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d49fe:	4605      	mov	r5, r0
   d4a00:	2800      	cmp	r0, #0
   d4a02:	f040 80bd 	bne.w	d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d4a06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4a08:	b939      	cbnz	r1, d4a1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d4a0a:	4603      	mov	r3, r0
   d4a0c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4a12:	4620      	mov	r0, r4
   d4a14:	f002 f97e 	bl	d6d14 <_ZN9TCPClient7connectEPKctm>
   d4a18:	e009      	b.n	d4a2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d4a1a:	4668      	mov	r0, sp
   d4a1c:	f001 ff06 	bl	d682c <_ZN9IPAddressC1EPKh>
   d4a20:	462b      	mov	r3, r5
   d4a22:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a26:	4669      	mov	r1, sp
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f002 fa9d 	bl	d6f68 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d4a2e:	2800      	cmp	r0, #0
   d4a30:	f000 80a2 	beq.w	d4b78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d4a34:	2301      	movs	r3, #1
   d4a36:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d4a38:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4a3c:	2b04      	cmp	r3, #4
   d4a3e:	d115      	bne.n	d4a6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a40:	4b52      	ldr	r3, [pc, #328]	; (d4b8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d4a42:	6818      	ldr	r0, [r3, #0]
   d4a44:	889a      	ldrh	r2, [r3, #4]
   d4a46:	f8ad 2004 	strh.w	r2, [sp, #4]
   d4a4a:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a4c:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a4e:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a50:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a52:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a56:	1d53      	adds	r3, r2, #5
   d4a58:	f8c2 0005 	str.w	r0, [r2, #5]
   d4a5c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d4a60:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4a64:	719a      	strb	r2, [r3, #6]
   d4a66:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d4a68:	230c      	movs	r3, #12
   d4a6a:	e012      	b.n	d4a92 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4a6c:	4b48      	ldr	r3, [pc, #288]	; (d4b90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4a6e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4a72:	6818      	ldr	r0, [r3, #0]
   d4a74:	6859      	ldr	r1, [r3, #4]
   d4a76:	7a1b      	ldrb	r3, [r3, #8]
   d4a78:	466a      	mov	r2, sp
   d4a7a:	c203      	stmia	r2!, {r0, r1}
   d4a7c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4a7e:	466b      	mov	r3, sp
   d4a80:	cb03      	ldmia	r3!, {r0, r1}
   d4a82:	f8cc 0005 	str.w	r0, [ip, #5]
   d4a86:	f8cc 1009 	str.w	r1, [ip, #9]
   d4a8a:	7813      	ldrb	r3, [r2, #0]
   d4a8c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4a90:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4a92:	f1b8 0f00 	cmp.w	r8, #0
   d4a96:	d00a      	beq.n	d4aae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4a98:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4a9c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4aa0:	0152      	lsls	r2, r2, #5
   d4aa2:	f042 0206 	orr.w	r2, r2, #6
   d4aa6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d4aaa:	b2d2      	uxtb	r2, r2
   d4aac:	e000      	b.n	d4ab0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d4aae:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d4ab0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d4ab4:	b909      	cbnz	r1, d4aba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d4ab6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d4aba:	b12f      	cbz	r7, d4ac8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d4abc:	b916      	cbnz	r6, d4ac4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d4abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d4ac2:	e001      	b.n	d4ac8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d4ac4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d4ac8:	69e1      	ldr	r1, [r4, #28]
   d4aca:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d4acc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4ace:	69e1      	ldr	r1, [r4, #28]
   d4ad0:	1c58      	adds	r0, r3, #1
   d4ad2:	1212      	asrs	r2, r2, #8
   d4ad4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4ad6:	1c9a      	adds	r2, r3, #2
   d4ad8:	69e1      	ldr	r1, [r4, #28]
   d4ada:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4adc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4ade:	3303      	adds	r3, #3
   d4ae0:	69e2      	ldr	r2, [r4, #28]
   d4ae2:	4649      	mov	r1, r9
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	f7ff ff43 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d4aea:	f1b8 0f00 	cmp.w	r8, #0
   d4aee:	d00b      	beq.n	d4b08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d4af0:	4603      	mov	r3, r0
   d4af2:	69e2      	ldr	r2, [r4, #28]
   d4af4:	4641      	mov	r1, r8
   d4af6:	4620      	mov	r0, r4
   d4af8:	f7ff ff3a 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4afc:	69e2      	ldr	r2, [r4, #28]
   d4afe:	9911      	ldr	r1, [sp, #68]	; 0x44
   d4b00:	4603      	mov	r3, r0
   d4b02:	4620      	mov	r0, r4
   d4b04:	f7ff ff34 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d4b08:	b167      	cbz	r7, d4b24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d4b0a:	4603      	mov	r3, r0
   d4b0c:	69e2      	ldr	r2, [r4, #28]
   d4b0e:	4639      	mov	r1, r7
   d4b10:	4620      	mov	r0, r4
   d4b12:	f7ff ff2d 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d4b16:	b12e      	cbz	r6, d4b24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d4b18:	4603      	mov	r3, r0
   d4b1a:	69e2      	ldr	r2, [r4, #28]
   d4b1c:	4631      	mov	r1, r6
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f7ff ff26 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d4b24:	1f43      	subs	r3, r0, #5
   d4b26:	b29b      	uxth	r3, r3
   d4b28:	69e2      	ldr	r2, [r4, #28]
   d4b2a:	2110      	movs	r1, #16
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	f7ff fed8 	bl	d48e2 <_ZN4MQTT5writeEhPht>
   d4b32:	f000 ffab 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b36:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d4b3a:	6260      	str	r0, [r4, #36]	; 0x24
   d4b3c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d4b3e:	4620      	mov	r0, r4
   d4b40:	f002 faa6 	bl	d7090 <_ZN9TCPClient9availableEv>
   d4b44:	b940      	cbnz	r0, d4b58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d4b46:	f000 ffa1 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4b4c:	1ac0      	subs	r0, r0, r3
   d4b4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b50:	4373      	muls	r3, r6
   d4b52:	4298      	cmp	r0, r3
   d4b54:	d9f3      	bls.n	d4b3e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d4b56:	e00f      	b.n	d4b78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4b58:	4669      	mov	r1, sp
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f7ff fe68 	bl	d4830 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d4b60:	2804      	cmp	r0, #4
   d4b62:	d109      	bne.n	d4b78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d4b64:	69e3      	ldr	r3, [r4, #28]
   d4b66:	78de      	ldrb	r6, [r3, #3]
   d4b68:	b936      	cbnz	r6, d4b78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d4b6a:	f000 ff8f 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d4b6e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d4b70:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4b72:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d4b76:	e004      	b.n	d4b82 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f002 fa72 	bl	d7062 <_ZN9TCPClient4stopEv>
   d4b7e:	e000      	b.n	d4b82 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d4b80:	2500      	movs	r5, #0
}
   d4b82:	4628      	mov	r0, r5
   d4b84:	b007      	add	sp, #28
   d4b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b8a:	bf00      	nop
   d4b8c:	000d892e 	.word	0x000d892e
   d4b90:	000d8935 	.word	0x000d8935

000d4b94 <_ZN4MQTT7connectEPKcS1_S1_>:

bool MQTT::connect(const char *id) {
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4b94:	b510      	push	{r4, lr}
   d4b96:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4b98:	2404      	movs	r4, #4
   d4b9a:	9405      	str	r4, [sp, #20]
   d4b9c:	2401      	movs	r4, #1
   d4b9e:	9404      	str	r4, [sp, #16]
   d4ba0:	2400      	movs	r4, #0
   d4ba2:	9403      	str	r4, [sp, #12]
   d4ba4:	9402      	str	r4, [sp, #8]
   d4ba6:	9401      	str	r4, [sp, #4]
   d4ba8:	9400      	str	r4, [sp, #0]
   d4baa:	f7ff ff1d 	bl	d49e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4bae:	b006      	add	sp, #24
   d4bb0:	bd10      	pop	{r4, pc}

000d4bb2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4bb2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d4bb8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4bbc:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4bc0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d4bc4:	4604      	mov	r4, r0
   d4bc6:	468b      	mov	fp, r1
   d4bc8:	4691      	mov	r9, r2
   d4bca:	469a      	mov	sl, r3
    if (isConnected()) {
   d4bcc:	f7ff feea 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4bd0:	2800      	cmp	r0, #0
   d4bd2:	d04c      	beq.n	d4c6e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d4bd4:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4bd8:	69e0      	ldr	r0, [r4, #28]
   d4bda:	2100      	movs	r1, #0
   d4bdc:	f003 fd95 	bl	d870a <memset>

        length = writeString(topic, buffer, length);
   d4be0:	2305      	movs	r3, #5
   d4be2:	69e2      	ldr	r2, [r4, #28]
   d4be4:	4659      	mov	r1, fp
   d4be6:	4620      	mov	r0, r4
   d4be8:	f7ff fec2 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d4bec:	1e6b      	subs	r3, r5, #1
   d4bee:	2b01      	cmp	r3, #1
   d4bf0:	d812      	bhi.n	d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d4bf2:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4bf4:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d4bf6:	3301      	adds	r3, #1
   d4bf8:	b29b      	uxth	r3, r3
   d4bfa:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4bfc:	121b      	asrs	r3, r3, #8
   d4bfe:	5413      	strb	r3, [r2, r0]
   d4c00:	1c41      	adds	r1, r0, #1
   d4c02:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d4c04:	69e3      	ldr	r3, [r4, #28]
   d4c06:	8c22      	ldrh	r2, [r4, #32]
   d4c08:	545a      	strb	r2, [r3, r1]
   d4c0a:	3002      	adds	r0, #2
   d4c0c:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4c0e:	b11e      	cbz	r6, d4c18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d4c10:	8c23      	ldrh	r3, [r4, #32]
   d4c12:	1c5a      	adds	r2, r3, #1
   d4c14:	8422      	strh	r2, [r4, #32]
   d4c16:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c18:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4c1a:	b291      	uxth	r1, r2
   d4c1c:	1883      	adds	r3, r0, r2
   d4c1e:	458a      	cmp	sl, r1
   d4c20:	b29b      	uxth	r3, r3
   d4c22:	d90a      	bls.n	d4c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d4c24:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4c28:	429e      	cmp	r6, r3
   d4c2a:	f102 0201 	add.w	r2, r2, #1
   d4c2e:	d904      	bls.n	d4c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d4c30:	f819 6001 	ldrb.w	r6, [r9, r1]
   d4c34:	69e1      	ldr	r1, [r4, #28]
   d4c36:	54ce      	strb	r6, [r1, r3]
   d4c38:	e7ef      	b.n	d4c1a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d4c3a:	f1b8 0f00 	cmp.w	r8, #0
   d4c3e:	bf0c      	ite	eq
   d4c40:	2130      	moveq	r1, #48	; 0x30
   d4c42:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d4c44:	b10f      	cbz	r7, d4c4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d4c46:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d4c4a:	2d02      	cmp	r5, #2
   d4c4c:	d102      	bne.n	d4c54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d4c4e:	f041 0104 	orr.w	r1, r1, #4
   d4c52:	e003      	b.n	d4c5c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d4c54:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4c56:	bf08      	it	eq
   d4c58:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4c5c:	3b05      	subs	r3, #5
   d4c5e:	69e2      	ldr	r2, [r4, #28]
   d4c60:	b29b      	uxth	r3, r3
   d4c62:	4620      	mov	r0, r4
    }
    return false;
}
   d4c64:	b001      	add	sp, #4
   d4c66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4c6a:	f7ff be3a 	b.w	d48e2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4c6e:	b001      	add	sp, #4
   d4c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4c74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4c76:	9c08      	ldr	r4, [sp, #32]
   d4c78:	9403      	str	r4, [sp, #12]
   d4c7a:	2400      	movs	r4, #0
   d4c7c:	9402      	str	r4, [sp, #8]
   d4c7e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4c82:	9401      	str	r4, [sp, #4]
   d4c84:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4c88:	9400      	str	r4, [sp, #0]
   d4c8a:	f7ff ff92 	bl	d4bb2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4c8e:	b004      	add	sp, #16
   d4c90:	bd10      	pop	{r4, pc}

000d4c92 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4c92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4c94:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4c96:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4c98:	460e      	mov	r6, r1
   d4c9a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4c9c:	f003 fd78 	bl	d8790 <strlen>
   d4ca0:	2300      	movs	r3, #0
   d4ca2:	9302      	str	r3, [sp, #8]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	9300      	str	r3, [sp, #0]
   d4ca8:	4622      	mov	r2, r4
   d4caa:	4603      	mov	r3, r0
   d4cac:	4631      	mov	r1, r6
   d4cae:	4628      	mov	r0, r5
   d4cb0:	f7ff ffe0 	bl	d4c74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4cb4:	b004      	add	sp, #16
   d4cb6:	bd70      	pop	{r4, r5, r6, pc}

000d4cb8 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d4cb8:	b538      	push	{r3, r4, r5, lr}
   d4cba:	4604      	mov	r4, r0
   d4cbc:	460d      	mov	r5, r1
    if (isConnected()) {
   d4cbe:	f7ff fe71 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4cc2:	b190      	cbz	r0, d4cea <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4cc4:	69e3      	ldr	r3, [r4, #28]
   d4cc6:	2262      	movs	r2, #98	; 0x62
   d4cc8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4cca:	69e3      	ldr	r3, [r4, #28]
   d4ccc:	2202      	movs	r2, #2
   d4cce:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4cd0:	69e3      	ldr	r3, [r4, #28]
   d4cd2:	122a      	asrs	r2, r5, #8
   d4cd4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4cd6:	69e3      	ldr	r3, [r4, #28]
   d4cd8:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4cda:	2204      	movs	r2, #4
   d4cdc:	69e1      	ldr	r1, [r4, #28]
   d4cde:	4620      	mov	r0, r4
   d4ce0:	f001 ffd5 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
   d4ce4:	3000      	adds	r0, #0
   d4ce6:	bf18      	it	ne
   d4ce8:	2001      	movne	r0, #1
    }
    return false;
}
   d4cea:	bd38      	pop	{r3, r4, r5, pc}

000d4cec <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d4cec:	b538      	push	{r3, r4, r5, lr}
   d4cee:	4604      	mov	r4, r0
   d4cf0:	460d      	mov	r5, r1
    if (isConnected()) {
   d4cf2:	f7ff fe57 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4cf6:	b190      	cbz	r0, d4d1e <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4cf8:	69e3      	ldr	r3, [r4, #28]
   d4cfa:	2272      	movs	r2, #114	; 0x72
   d4cfc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4cfe:	69e3      	ldr	r3, [r4, #28]
   d4d00:	2202      	movs	r2, #2
   d4d02:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4d04:	69e3      	ldr	r3, [r4, #28]
   d4d06:	122a      	asrs	r2, r5, #8
   d4d08:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4d0a:	69e3      	ldr	r3, [r4, #28]
   d4d0c:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4d0e:	2204      	movs	r2, #4
   d4d10:	69e1      	ldr	r1, [r4, #28]
   d4d12:	4620      	mov	r0, r4
   d4d14:	f001 ffbb 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
   d4d18:	3000      	adds	r0, #0
   d4d1a:	bf18      	it	ne
   d4d1c:	2001      	movne	r0, #1
    }
    return false;
}
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}

000d4d20 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d4d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d24:	b083      	sub	sp, #12
   d4d26:	af00      	add	r7, sp, #0
   d4d28:	4604      	mov	r4, r0
    if (isConnected()) {
   d4d2a:	f7ff fe3b 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4d2e:	4681      	mov	r9, r0
   d4d30:	2800      	cmp	r0, #0
   d4d32:	f000 80f6 	beq.w	d4f22 <_ZN4MQTT4loopEv+0x202>
   d4d36:	f000 fea9 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4d3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d40:	4353      	muls	r3, r2
   d4d42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4d44:	1a82      	subs	r2, r0, r2
   d4d46:	429a      	cmp	r2, r3
   d4d48:	4605      	mov	r5, r0
   d4d4a:	d803      	bhi.n	d4d54 <_ZN4MQTT4loopEv+0x34>
   d4d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4d4e:	1a82      	subs	r2, r0, r2
   d4d50:	4293      	cmp	r3, r2
   d4d52:	d217      	bcs.n	d4d84 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d4d54:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4d58:	b12b      	cbz	r3, d4d66 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	f002 f981 	bl	d7062 <_ZN9TCPClient4stopEv>
                return false;
   d4d60:	f04f 0900 	mov.w	r9, #0
   d4d64:	e0dd      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d4d66:	69e2      	ldr	r2, [r4, #28]
   d4d68:	21c0      	movs	r1, #192	; 0xc0
   d4d6a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4d6c:	69e2      	ldr	r2, [r4, #28]
   d4d6e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4d70:	69e1      	ldr	r1, [r4, #28]
   d4d72:	2202      	movs	r2, #2
   d4d74:	4620      	mov	r0, r4
   d4d76:	f001 ff8a 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d4d7a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d4d7c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d4d7e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d4d80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d4d84:	4620      	mov	r0, r4
   d4d86:	f002 f983 	bl	d7090 <_ZN9TCPClient9availableEv>
   d4d8a:	2800      	cmp	r0, #0
   d4d8c:	f000 80c9 	beq.w	d4f22 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4d90:	1df9      	adds	r1, r7, #7
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff fd4c 	bl	d4830 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d4d98:	4602      	mov	r2, r0
   d4d9a:	2800      	cmp	r0, #0
   d4d9c:	f000 80c1 	beq.w	d4f22 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d4da0:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d4da2:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4da4:	7818      	ldrb	r0, [r3, #0]
   d4da6:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4daa:	2930      	cmp	r1, #48	; 0x30
   d4dac:	d17d      	bne.n	d4eaa <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d4dae:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d4db2:	f1bb 0f00 	cmp.w	fp, #0
   d4db6:	f000 80b4 	beq.w	d4f22 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4dba:	f897 c007 	ldrb.w	ip, [r7, #7]
   d4dbe:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d4dc2:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4dc4:	7881      	ldrb	r1, [r0, #2]
   d4dc6:	f890 e001 	ldrb.w	lr, [r0, #1]
   d4dca:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d4dce:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d4dd2:	f10e 0108 	add.w	r1, lr, #8
   d4dd6:	f021 0107 	bic.w	r1, r1, #7
   d4dda:	ebad 0d01 	sub.w	sp, sp, r1
   d4dde:	4668      	mov	r0, sp
   d4de0:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d4de2:	b28e      	uxth	r6, r1
   d4de4:	45b6      	cmp	lr, r6
   d4de6:	d906      	bls.n	d4df6 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d4de8:	eb0c 0601 	add.w	r6, ip, r1
   d4dec:	441e      	add	r6, r3
   d4dee:	78f6      	ldrb	r6, [r6, #3]
   d4df0:	5446      	strb	r6, [r0, r1]
   d4df2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d4df4:	e7f5      	b.n	d4de2 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d4df6:	2100      	movs	r1, #0
   d4df8:	f800 100e 	strb.w	r1, [r0, lr]
   d4dfc:	781e      	ldrb	r6, [r3, #0]
   d4dfe:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4e02:	2e02      	cmp	r6, #2
   d4e04:	f10c 0103 	add.w	r1, ip, #3
   d4e08:	ebcc 0202 	rsb	r2, ip, r2
   d4e0c:	d11e      	bne.n	d4e4c <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e0e:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e10:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e14:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4e18:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e1a:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e1c:	7849      	ldrb	r1, [r1, #1]
   d4e1e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e22:	f10c 0105 	add.w	r1, ip, #5
   d4e26:	4471      	add	r1, lr
   d4e28:	4419      	add	r1, r3
   d4e2a:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4e2c:	69e3      	ldr	r3, [r4, #28]
   d4e2e:	2240      	movs	r2, #64	; 0x40
   d4e30:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4e32:	69e3      	ldr	r3, [r4, #28]
   d4e34:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4e36:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e38:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d4e3c:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4e40:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4e42:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d4e44:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d4e46:	f883 8003 	strb.w	r8, [r3, #3]
   d4e4a:	e020      	b.n	d4e8e <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4e4c:	2e04      	cmp	r6, #4
   d4e4e:	d124      	bne.n	d4e9a <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e50:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e52:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e56:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4e5a:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e5c:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e5e:	7849      	ldrb	r1, [r1, #1]
   d4e60:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e64:	f10c 0105 	add.w	r1, ip, #5
   d4e68:	4471      	add	r1, lr
   d4e6a:	4419      	add	r1, r3
   d4e6c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4e6e:	69e3      	ldr	r3, [r4, #28]
   d4e70:	2250      	movs	r2, #80	; 0x50
   d4e72:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d4e74:	69e3      	ldr	r3, [r4, #28]
   d4e76:	2202      	movs	r2, #2
   d4e78:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d4e7a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e7c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d4e80:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4e84:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d4e86:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d4e88:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d4e8a:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d4e8e:	69e1      	ldr	r1, [r4, #28]
   d4e90:	4620      	mov	r0, r4
   d4e92:	f001 fefc 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d4e96:	6265      	str	r5, [r4, #36]	; 0x24
   d4e98:	e005      	b.n	d4ea6 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d4e9a:	3a03      	subs	r2, #3
   d4e9c:	4471      	add	r1, lr
   d4e9e:	ebce 0202 	rsb	r2, lr, r2
   d4ea2:	4419      	add	r1, r3
   d4ea4:	47d8      	blx	fp
   d4ea6:	46d5      	mov	sp, sl
   d4ea8:	e03b      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d4eaa:	2950      	cmp	r1, #80	; 0x50
   d4eac:	d108      	bne.n	d4ec0 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d4eae:	7899      	ldrb	r1, [r3, #2]
   d4eb0:	78db      	ldrb	r3, [r3, #3]
   d4eb2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4eb6:	b289      	uxth	r1, r1
   d4eb8:	4620      	mov	r0, r4
   d4eba:	f7ff fefd 	bl	d4cb8 <_ZN4MQTT14publishReleaseEt>
   d4ebe:	e030      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d4ec0:	2940      	cmp	r1, #64	; 0x40
   d4ec2:	d00c      	beq.n	d4ede <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d4ec4:	2960      	cmp	r1, #96	; 0x60
   d4ec6:	d108      	bne.n	d4eda <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d4ec8:	7899      	ldrb	r1, [r3, #2]
   d4eca:	78db      	ldrb	r3, [r3, #3]
   d4ecc:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4ed0:	b289      	uxth	r1, r1
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	f7ff ff0a 	bl	d4cec <_ZN4MQTT15publishCompleteEt>
   d4ed8:	e023      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d4eda:	2970      	cmp	r1, #112	; 0x70
   d4edc:	d10d      	bne.n	d4efa <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d4ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4ee0:	b1f9      	cbz	r1, d4f22 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4ee2:	2a04      	cmp	r2, #4
   d4ee4:	d11d      	bne.n	d4f22 <_ZN4MQTT4loopEv+0x202>
   d4ee6:	f010 0f06 	tst.w	r0, #6
   d4eea:	d11a      	bne.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d4eec:	7898      	ldrb	r0, [r3, #2]
   d4eee:	78db      	ldrb	r3, [r3, #3]
   d4ef0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d4ef4:	b280      	uxth	r0, r0
   d4ef6:	4788      	blx	r1
   d4ef8:	e013      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d4efa:	2990      	cmp	r1, #144	; 0x90
   d4efc:	d011      	beq.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d4efe:	29c0      	cmp	r1, #192	; 0xc0
   d4f00:	d10a      	bne.n	d4f18 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d4f02:	22d0      	movs	r2, #208	; 0xd0
   d4f04:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4f06:	69e3      	ldr	r3, [r4, #28]
   d4f08:	2200      	movs	r2, #0
   d4f0a:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4f0c:	69e1      	ldr	r1, [r4, #28]
   d4f0e:	2202      	movs	r2, #2
   d4f10:	4620      	mov	r0, r4
   d4f12:	f001 febc 	bl	d6c8e <_ZN9TCPClient5writeEPKhj>
   d4f16:	e004      	b.n	d4f22 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d4f18:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d4f1a:	bf04      	itt	eq
   d4f1c:	2300      	moveq	r3, #0
   d4f1e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d4f22:	4648      	mov	r0, r9
   d4f24:	370c      	adds	r7, #12
   d4f26:	46bd      	mov	sp, r7
   d4f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4f2c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d4f2c:	b570      	push	{r4, r5, r6, lr}
   d4f2e:	4604      	mov	r4, r0
   d4f30:	460e      	mov	r6, r1
   d4f32:	4615      	mov	r5, r2

    if (isConnected()) {
   d4f34:	f7ff fd36 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4f38:	b1e8      	cbz	r0, d4f76 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d4f3a:	8c23      	ldrh	r3, [r4, #32]
   d4f3c:	3301      	adds	r3, #1
   d4f3e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d4f40:	b903      	cbnz	r3, d4f44 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d4f42:	2301      	movs	r3, #1
   d4f44:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d4f46:	8c23      	ldrh	r3, [r4, #32]
   d4f48:	69e2      	ldr	r2, [r4, #28]
   d4f4a:	121b      	asrs	r3, r3, #8
   d4f4c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d4f4e:	69e3      	ldr	r3, [r4, #28]
   d4f50:	8c22      	ldrh	r2, [r4, #32]
   d4f52:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d4f54:	69e2      	ldr	r2, [r4, #28]
   d4f56:	4631      	mov	r1, r6
   d4f58:	2307      	movs	r3, #7
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	f7ff fd08 	bl	d4970 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d4f60:	69e3      	ldr	r3, [r4, #28]
   d4f62:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d4f64:	1f03      	subs	r3, r0, #4
   d4f66:	69e2      	ldr	r2, [r4, #28]
   d4f68:	4620      	mov	r0, r4
   d4f6a:	b29b      	uxth	r3, r3
   d4f6c:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d4f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d4f72:	f7ff bcb6 	b.w	d48e2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4f76:	bd70      	pop	{r4, r5, r6, pc}

000d4f78 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f78:	b510      	push	{r4, lr}
   d4f7a:	4604      	mov	r4, r0
    if (isConnected()) {
   d4f7c:	f7ff fd12 	bl	d49a4 <_ZN4MQTT11isConnectedEv>
   d4f80:	b110      	cbz	r0, d4f88 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4f82:	4620      	mov	r0, r4
   d4f84:	f7ff fce0 	bl	d4948 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d4f88:	69e0      	ldr	r0, [r4, #28]
   d4f8a:	b108      	cbz	r0, d4f90 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4f8c:	f7ff f889 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f90:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4f94:	f001 f8bc 	bl	d6110 <_ZN6StringD1Ev>
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f7ff fbd5 	bl	d4748 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd10      	pop	{r4, pc}

000d4fa2 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4fa2:	f000 bd0b 	b.w	d59bc <HAL_Pin_Map>
	...

000d4fa8 <_ZN8LightIOTC1Ei>:
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);

/**
 * Constructor.
 */
LightIOT::LightIOT(int argonNumber){
   d4fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4faa:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4fae:	460e      	mov	r6, r1
   d4fb0:	4928      	ldr	r1, [pc, #160]	; (d5054 <_ZN8LightIOTC1Ei+0xac>)
   d4fb2:	4604      	mov	r4, r0
   d4fb4:	f003 fb9e 	bl	d86f4 <memcpy>
   d4fb8:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4fbc:	4926      	ldr	r1, [pc, #152]	; (d5058 <_ZN8LightIOTC1Ei+0xb0>)
   d4fbe:	18a0      	adds	r0, r4, r2
   d4fc0:	f003 fb98 	bl	d86f4 <memcpy>
   d4fc4:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4fc8:	4924      	ldr	r1, [pc, #144]	; (d505c <_ZN8LightIOTC1Ei+0xb4>)
   d4fca:	f504 7006 	add.w	r0, r4, #536	; 0x218
   d4fce:	f003 fb91 	bl	d86f4 <memcpy>
   d4fd2:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4fd6:	4922      	ldr	r1, [pc, #136]	; (d5060 <_ZN8LightIOTC1Ei+0xb8>)
   d4fd8:	f504 7049 	add.w	r0, r4, #804	; 0x324
   d4fdc:	f003 fb8a 	bl	d86f4 <memcpy>
   d4fe0:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4fe4:	491f      	ldr	r1, [pc, #124]	; (d5064 <_ZN8LightIOTC1Ei+0xbc>)
   d4fe6:	f504 6086 	add.w	r0, r4, #1072	; 0x430
   d4fea:	2500      	movs	r5, #0
   d4fec:	f003 fb82 	bl	d86f4 <memcpy>
   d4ff0:	2701      	movs	r7, #1
   d4ff2:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d4ff6:	491c      	ldr	r1, [pc, #112]	; (d5068 <_ZN8LightIOTC1Ei+0xc0>)
   d4ff8:	f204 503c 	addw	r0, r4, #1340	; 0x53c
   d4ffc:	f003 fb7a 	bl	d86f4 <memcpy>
   d5000:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   d5004:	f8c4 7650 	str.w	r7, [r4, #1616]	; 0x650
   d5008:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   d500c:	4917      	ldr	r1, [pc, #92]	; (d506c <_ZN8LightIOTC1Ei+0xc4>)
   d500e:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
   d5012:	f001 f8c4 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
   d5016:	4b16      	ldr	r3, [pc, #88]	; (d5070 <_ZN8LightIOTC1Ei+0xc8>)
  _argonNumber = argonNumber;
   d5018:	f8c4 664c 	str.w	r6, [r4, #1612]	; 0x64c

  switch (_argonNumber){
   d501c:	3e01      	subs	r6, #1
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);

/**
 * Constructor.
 */
LightIOT::LightIOT(int argonNumber){
   d501e:	f8c4 366c 	str.w	r3, [r4, #1644]	; 0x66c
   d5022:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
   d5026:	f884 5670 	strb.w	r5, [r4, #1648]	; 0x670
   d502a:	f8c4 5674 	str.w	r5, [r4, #1652]	; 0x674
   d502e:	462b      	mov	r3, r5
  _argonNumber = argonNumber;

  switch (_argonNumber){
   d5030:	2e09      	cmp	r6, #9
   d5032:	d809      	bhi.n	d5048 <_ZN8LightIOTC1Ei+0xa0>
   d5034:	e8df f006 	tbb	[pc, r6]
   d5038:	05050505 	.word	0x05050505
   d503c:	05050505 	.word	0x05050505
   d5040:	0505      	.short	0x0505
    case 9:
      _p1 = 0.01078;
      _p2 = -0.03595;
      break;
    case 10:
      _p1 = 0.01076;
   d5042:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   d5046:	e001      	b.n	d504c <_ZN8LightIOTC1Ei+0xa4>
      _p2 = -0.02433;
      break;
    
    default:
        _p1 = 1;
   d5048:	f8c4 7650 	str.w	r7, [r4, #1616]	; 0x650
        _p2 = 0;
   d504c:	f8c4 3654 	str.w	r3, [r4, #1620]	; 0x654
      break;
  }
}
   d5050:	4620      	mov	r0, r4
   d5052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5054:	000d8940 	.word	0x000d8940
   d5058:	000d8a4c 	.word	0x000d8a4c
   d505c:	000d8b58 	.word	0x000d8b58
   d5060:	000d8c64 	.word	0x000d8c64
   d5064:	000d8d70 	.word	0x000d8d70
   d5068:	000d8e7c 	.word	0x000d8e7c
   d506c:	000d87bd 	.word	0x000d87bd
   d5070:	000493e0 	.word	0x000493e0

000d5074 <_ZN8LightIOT5beginEv>:

void LightIOT::begin(){
   d5074:	b508      	push	{r3, lr}
    batterySensor.begin();
   d5076:	4805      	ldr	r0, [pc, #20]	; (d508c <_ZN8LightIOT5beginEv+0x18>)
   d5078:	f000 fc41 	bl	d58fe <_ZN15Adafruit_INA2195beginEv>
    panelSensor.begin();
   d507c:	4804      	ldr	r0, [pc, #16]	; (d5090 <_ZN8LightIOT5beginEv+0x1c>)
   d507e:	f000 fc3e 	bl	d58fe <_ZN15Adafruit_INA2195beginEv>
    ledSensor.begin();
   d5082:	4804      	ldr	r0, [pc, #16]	; (d5094 <_ZN8LightIOT5beginEv+0x20>)
}
   d5084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void LightIOT::begin(){
    batterySensor.begin();
    panelSensor.begin();
    ledSensor.begin();
   d5088:	f000 bc39 	b.w	d58fe <_ZN15Adafruit_INA2195beginEv>
   d508c:	2003e3a8 	.word	0x2003e3a8
   d5090:	2003e398 	.word	0x2003e398
   d5094:	2003e3b8 	.word	0x2003e3b8

000d5098 <_ZN8LightIOT14getCredentialsEP6StringPc>:
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d509a:	460e      	mov	r6, r1
    byte _sentencePos = 0;
    byte _comma_count = 0;
    credentials[_comma_count] = "";
   d509c:	4630      	mov	r0, r6
   d509e:	490e      	ldr	r1, [pc, #56]	; (d50d8 <_ZN8LightIOT14getCredentialsEP6StringPc+0x40>)
    panelSensor.begin();
    ledSensor.begin();
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d50a0:	4617      	mov	r7, r2
    byte _sentencePos = 0;
    byte _comma_count = 0;
    credentials[_comma_count] = "";
   d50a2:	f001 f8a9 	bl	d61f8 <_ZN6StringaSEPKc>
   d50a6:	2501      	movs	r5, #1
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
    byte _sentencePos = 0;
    byte _comma_count = 0;
   d50a8:	2400      	movs	r4, #0
    credentials[_comma_count] = "";

    while (1){
        if (inputBuffer[_sentencePos] == NULL) break;
   d50aa:	1e6b      	subs	r3, r5, #1
   d50ac:	b2db      	uxtb	r3, r3
   d50ae:	5cf9      	ldrb	r1, [r7, r3]
   d50b0:	b181      	cbz	r1, d50d4 <_ZN8LightIOT14getCredentialsEP6StringPc+0x3c>
        if (inputBuffer[_sentencePos] == '&'){
   d50b2:	2926      	cmp	r1, #38	; 0x26
   d50b4:	d109      	bne.n	d50ca <_ZN8LightIOT14getCredentialsEP6StringPc+0x32>
            _comma_count++;
   d50b6:	3401      	adds	r4, #1
   d50b8:	b2e4      	uxtb	r4, r4
            credentials[_comma_count] = "";
   d50ba:	4907      	ldr	r1, [pc, #28]	; (d50d8 <_ZN8LightIOT14getCredentialsEP6StringPc+0x40>)
   d50bc:	eb06 1004 	add.w	r0, r6, r4, lsl #4
   d50c0:	f001 f89a 	bl	d61f8 <_ZN6StringaSEPKc>
   d50c4:	3501      	adds	r5, #1
   d50c6:	b2ed      	uxtb	r5, r5
   d50c8:	e7ef      	b.n	d50aa <_ZN8LightIOT14getCredentialsEP6StringPc+0x12>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d50ca:	eb06 1004 	add.w	r0, r6, r4, lsl #4
   d50ce:	f001 f8e8 	bl	d62a2 <_ZN6String6concatEc>
   d50d2:	e7f7      	b.n	d50c4 <_ZN8LightIOT14getCredentialsEP6StringPc+0x2c>
   d50d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50d6:	bf00      	nop
   d50d8:	000d9070 	.word	0x000d9070

000d50dc <_ZN8LightIOT4markEi>:
      space(0); // Just to be sure
      delay(100);
  }
}

void LightIOT::mark(int time) {
   d50dc:	b510      	push	{r4, lr}
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d50de:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d50e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
      space(0); // Just to be sure
      delay(100);
  }
}

void LightIOT::mark(int time) {
   d50e6:	460c      	mov	r4, r1
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d50e8:	435a      	muls	r2, r3
   d50ea:	2180      	movs	r1, #128	; 0x80
   d50ec:	200e      	movs	r0, #14
   d50ee:	f002 fa95 	bl	d761c <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d50f2:	2c00      	cmp	r4, #0
   d50f4:	dd04      	ble.n	d5100 <_ZN8LightIOT4markEi+0x24>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d50f6:	4620      	mov	r0, r4
}
   d50f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d50fc:	f000 bcbe 	b.w	d5a7c <HAL_Delay_Microseconds>
   d5100:	bd10      	pop	{r4, pc}

000d5102 <_ZN8LightIOT5spaceEi>:

/* Leave pin off for time (given in microseconds) */

void LightIOT::space(int time) {
   d5102:	b510      	push	{r4, lr}
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d5104:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d5108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  if (time > 0) delayMicroseconds(time);
}

/* Leave pin off for time (given in microseconds) */

void LightIOT::space(int time) {
   d510c:	460c      	mov	r4, r1
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d510e:	435a      	muls	r2, r3
   d5110:	2100      	movs	r1, #0
   d5112:	200e      	movs	r0, #14
   d5114:	f002 fa82 	bl	d761c <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d5118:	2c00      	cmp	r4, #0
   d511a:	dd04      	ble.n	d5126 <_ZN8LightIOT5spaceEi+0x24>
   d511c:	4620      	mov	r0, r4
}
   d511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5122:	f000 bcab 	b.w	d5a7c <HAL_Delay_Microseconds>
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_ZN8LightIOT11enableIROutEi>:


void LightIOT::enableIROut(int khz){
   d5128:	b508      	push	{r3, lr}
    irout_khz = khz;
   d512a:	f8c0 1648 	str.w	r1, [r0, #1608]	; 0x648
    pinMode(TIMER_PWM_PIN, OUTPUT);
   d512e:	2101      	movs	r1, #1
   d5130:	200e      	movs	r0, #14
   d5132:	f002 fa1f 	bl	d7574 <pinMode>
    digitalWrite(TIMER_PWM_PIN, LOW);
   d5136:	2100      	movs	r1, #0
   d5138:	200e      	movs	r0, #14
   d513a:	f002 fa2c 	bl	d7596 <digitalWrite>
    TIMER_CONFIG_KHZ(khz);
   d513e:	2101      	movs	r1, #1
   d5140:	200e      	movs	r0, #14
}
   d5142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void LightIOT::enableIROut(int khz){
    irout_khz = khz;
    pinMode(TIMER_PWM_PIN, OUTPUT);
    digitalWrite(TIMER_PWM_PIN, LOW);
    TIMER_CONFIG_KHZ(khz);
   d5146:	f002 ba15 	b.w	d7574 <pinMode>

000d514a <_ZN8LightIOT7sendRawEPjii>:
    }
        
}

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
   d514a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d514e:	4605      	mov	r5, r0
   d5150:	460f      	mov	r7, r1
   d5152:	4690      	mov	r8, r2
   d5154:	4699      	mov	r9, r3
   d5156:	2605      	movs	r6, #5
  for(int i=0;i<5;i++){
      enableIROut(khz);
   d5158:	4649      	mov	r1, r9
   d515a:	4628      	mov	r0, r5
   d515c:	f7ff ffe4 	bl	d5128 <_ZN8LightIOT11enableIROutEi>
      for (int i = 0; i < len; i++) {
   d5160:	2400      	movs	r4, #0
   d5162:	4544      	cmp	r4, r8
   d5164:	da0b      	bge.n	d517e <_ZN8LightIOT7sendRawEPjii+0x34>
        if (i & 1) {
   d5166:	07e3      	lsls	r3, r4, #31
          space(buf[i]);
   d5168:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   d516c:	4628      	mov	r0, r5
void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
      enableIROut(khz);
      for (int i = 0; i < len; i++) {
        if (i & 1) {
   d516e:	d502      	bpl.n	d5176 <_ZN8LightIOT7sendRawEPjii+0x2c>
          space(buf[i]);
   d5170:	f7ff ffc7 	bl	d5102 <_ZN8LightIOT5spaceEi>
   d5174:	e001      	b.n	d517a <_ZN8LightIOT7sendRawEPjii+0x30>
        }
        else {
          mark(buf[i]);
   d5176:	f7ff ffb1 	bl	d50dc <_ZN8LightIOT4markEi>

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
      enableIROut(khz);
      for (int i = 0; i < len; i++) {
   d517a:	3401      	adds	r4, #1
   d517c:	e7f1      	b.n	d5162 <_ZN8LightIOT7sendRawEPjii+0x18>
        }
        else {
          mark(buf[i]);
        }
      }
      space(0); // Just to be sure
   d517e:	2100      	movs	r1, #0
   d5180:	4628      	mov	r0, r5
   d5182:	f7ff ffbe 	bl	d5102 <_ZN8LightIOT5spaceEi>
      delay(100);
   d5186:	2064      	movs	r0, #100	; 0x64
   d5188:	f001 fa3e 	bl	d6608 <delay>
        
}

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
   d518c:	3e01      	subs	r6, #1
   d518e:	d1e3      	bne.n	d5158 <_ZN8LightIOT7sendRawEPjii+0xe>
        }
      }
      space(0); // Just to be sure
      delay(100);
  }
}
   d5190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5194 <_ZN8LightIOT11sendCommandEh.part.0>:
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
   d5194:	2903      	cmp	r1, #3

//=============================================================
//================== IRSEND FUNCTION ==========================
//=============================================================

void LightIOT::sendCommand(uint8_t command){
   d5196:	b538      	push	{r3, r4, r5, lr}
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
        sendRaw(rawData_t, 67, 38);  // Send T command
   d5198:	f04f 0243 	mov.w	r2, #67	; 0x43
   d519c:	f04f 0326 	mov.w	r3, #38	; 0x26
   d51a0:	f500 65cb 	add.w	r5, r0, #1624	; 0x658
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
   d51a4:	d105      	bne.n	d51b2 <_ZN8LightIOT11sendCommandEh.part.0+0x1e>
        sendRaw(rawData_t, 67, 38);  // Send T command
   d51a6:	f500 7149 	add.w	r1, r0, #804	; 0x324
   d51aa:	f7ff ffce 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE T";
   d51ae:	490a      	ldr	r1, [pc, #40]	; (d51d8 <_ZN8LightIOT11sendCommandEh.part.0+0x44>)
   d51b0:	e00c      	b.n	d51cc <_ZN8LightIOT11sendCommandEh.part.0+0x38>
    }else if (command==4){
   d51b2:	2904      	cmp	r1, #4
   d51b4:	d105      	bne.n	d51c2 <_ZN8LightIOT11sendCommandEh.part.0+0x2e>
        sendRaw(rawData_m, 67, 38);  // Send U command
   d51b6:	f200 513c 	addw	r1, r0, #1340	; 0x53c
   d51ba:	f7ff ffc6 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE U";
   d51be:	4907      	ldr	r1, [pc, #28]	; (d51dc <_ZN8LightIOT11sendCommandEh.part.0+0x48>)
   d51c0:	e004      	b.n	d51cc <_ZN8LightIOT11sendCommandEh.part.0+0x38>
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
   d51c2:	f500 6186 	add.w	r1, r0, #1072	; 0x430
   d51c6:	f7ff ffc0 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE M";
   d51ca:	4905      	ldr	r1, [pc, #20]	; (d51e0 <_ZN8LightIOT11sendCommandEh.part.0+0x4c>)
   d51cc:	4628      	mov	r0, r5
    }
        
}
   d51ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }else if (command==4){
        sendRaw(rawData_m, 67, 38);  // Send U command
        _modeDriver = "MODE U";
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
   d51d2:	f001 b811 	b.w	d61f8 <_ZN6StringaSEPKc>
   d51d6:	bf00      	nop
   d51d8:	000d87c4 	.word	0x000d87c4
   d51dc:	000d87cb 	.word	0x000d87cb
   d51e0:	000d8f88 	.word	0x000d8f88

000d51e4 <_ZN8LightIOT11sendCommandEh>:

//=============================================================
//================== IRSEND FUNCTION ==========================
//=============================================================

void LightIOT::sendCommand(uint8_t command){
   d51e4:	b510      	push	{r4, lr}
   d51e6:	4604      	mov	r4, r0
    if (command==0){
   d51e8:	b931      	cbnz	r1, d51f8 <_ZN8LightIOT11sendCommandEh+0x14>
        sendRaw(rawData_demo, 67, 38);  // Send DEMO command
   d51ea:	4601      	mov	r1, r0
   d51ec:	2326      	movs	r3, #38	; 0x26
   d51ee:	2243      	movs	r2, #67	; 0x43
   d51f0:	f7ff ffab 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "DEMO";
   d51f4:	490f      	ldr	r1, [pc, #60]	; (d5234 <_ZN8LightIOT11sendCommandEh+0x50>)
   d51f6:	e008      	b.n	d520a <_ZN8LightIOT11sendCommandEh+0x26>
    }else if (command==1){
   d51f8:	2901      	cmp	r1, #1
   d51fa:	d10c      	bne.n	d5216 <_ZN8LightIOT11sendCommandEh+0x32>
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
   d51fc:	f500 7186 	add.w	r1, r0, #268	; 0x10c
   d5200:	2326      	movs	r3, #38	; 0x26
   d5202:	2243      	movs	r2, #67	; 0x43
   d5204:	f7ff ffa1 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "OFF";
   d5208:	490b      	ldr	r1, [pc, #44]	; (d5238 <_ZN8LightIOT11sendCommandEh+0x54>)
   d520a:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
    }
        
}
   d520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (command==0){
        sendRaw(rawData_demo, 67, 38);  // Send DEMO command
        _modeDriver = "DEMO";
    }else if (command==1){
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
   d5212:	f000 bff1 	b.w	d61f8 <_ZN6StringaSEPKc>
    }else if (command==2){
   d5216:	2902      	cmp	r1, #2
   d5218:	d107      	bne.n	d522a <_ZN8LightIOT11sendCommandEh+0x46>
        sendRaw(rawData_l, 67, 38);  // Send L command
   d521a:	f500 7106 	add.w	r1, r0, #536	; 0x218
   d521e:	2326      	movs	r3, #38	; 0x26
   d5220:	2243      	movs	r2, #67	; 0x43
   d5222:	f7ff ff92 	bl	d514a <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE L";
   d5226:	4905      	ldr	r1, [pc, #20]	; (d523c <_ZN8LightIOT11sendCommandEh+0x58>)
   d5228:	e7ef      	b.n	d520a <_ZN8LightIOT11sendCommandEh+0x26>
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
    }
        
}
   d522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d522e:	f7ff bfb1 	b.w	d5194 <_ZN8LightIOT11sendCommandEh.part.0>
   d5232:	bf00      	nop
   d5234:	000d87b4 	.word	0x000d87b4
   d5238:	000d87b9 	.word	0x000d87b9
   d523c:	000d87bd 	.word	0x000d87bd

000d5240 <_ZN8LightIOT9measuringEPfS0_>:
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b06 	vpush	{d8-d10}
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d5246:	f8d0 3650 	ldr.w	r3, [r0, #1616]	; 0x650
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
   d524a:	4f2d      	ldr	r7, [pc, #180]	; (d5300 <_ZN8LightIOT9measuringEPfS0_+0xc0>)
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d524c:	4606      	mov	r6, r0
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d524e:	ee07 3a90 	vmov	s15, r3
   d5252:	2013      	movs	r0, #19
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d5254:	460d      	mov	r5, r1
   d5256:	4614      	mov	r4, r2
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d5258:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d525c:	f002 f9c7 	bl	d75ee <analogRead>
   d5260:	f8d6 3654 	ldr.w	r3, [r6, #1620]	; 0x654
   d5264:	ee07 3a90 	vmov	s15, r3
   d5268:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d526c:	ee07 0a90 	vmov	s15, r0
   d5270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float ledCurrent = ledSensor.getCurrent_mA();
   d5274:	4823      	ldr	r0, [pc, #140]	; (d5304 <_ZN8LightIOT9measuringEPfS0_+0xc4>)
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d5276:	eea8 8aa7 	vfma.f32	s16, s17, s15
    float ledCurrent = ledSensor.getCurrent_mA();
   d527a:	f000 fb7d 	bl	d5978 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float panelVoltage = panelSensor.getBusVoltage_V();
   d527e:	4638      	mov	r0, r7

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
   d5280:	eeb0 aa40 	vmov.f32	s20, s0
    float panelVoltage = panelSensor.getBusVoltage_V();
   d5284:	f000 fb64 	bl	d5950 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float panelCurrent = panelSensor.getCurrent_mA();
   d5288:	4638      	mov	r0, r7
// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
   d528a:	eef0 9a40 	vmov.f32	s19, s0
    float panelCurrent = panelSensor.getCurrent_mA();
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d528e:	4f1e      	ldr	r7, [pc, #120]	; (d5308 <_ZN8LightIOT9measuringEPfS0_+0xc8>)
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
   d5290:	f000 fb72 	bl	d5978 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d5294:	4638      	mov	r0, r7
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
   d5296:	eeb0 9a40 	vmov.f32	s18, s0
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d529a:	f000 fb59 	bl	d5950 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float batteryCurrent = batterySensor.getCurrent_mA();
   d529e:	4638      	mov	r0, r7
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d52a0:	eef0 8a40 	vmov.f32	s17, s0
    float batteryCurrent = batterySensor.getCurrent_mA();
   d52a4:	f000 fb68 	bl	d5978 <_ZN15Adafruit_INA21913getCurrent_mAEv>

    vAverage[0] += ledVoltage;
   d52a8:	edd5 5a00 	vldr	s11, [r5]
   d52ac:	ee35 8a88 	vadd.f32	s16, s11, s16
   d52b0:	ed85 8a00 	vstr	s16, [r5]
    cAverage[0] += ledCurrent;
   d52b4:	ed94 6a00 	vldr	s12, [r4]
   d52b8:	ee36 6a0a 	vadd.f32	s12, s12, s20
   d52bc:	ed84 6a00 	vstr	s12, [r4]
    vAverage[1] += panelVoltage;
   d52c0:	edd5 6a01 	vldr	s13, [r5, #4]
   d52c4:	ee76 6aa9 	vadd.f32	s13, s13, s19
   d52c8:	edc5 6a01 	vstr	s13, [r5, #4]
    cAverage[1] += panelCurrent;
   d52cc:	ed94 7a01 	vldr	s14, [r4, #4]
   d52d0:	ee37 7a09 	vadd.f32	s14, s14, s18
   d52d4:	ed84 7a01 	vstr	s14, [r4, #4]
    vAverage[2] += batteryVoltage;
   d52d8:	edd5 7a02 	vldr	s15, [r5, #8]
   d52dc:	ee77 7aa8 	vadd.f32	s15, s15, s17
    cAverage[2] += batteryCurrent;

    _countSamples++;
}
   d52e0:	ecbd 8b06 	vpop	{d8-d10}

    vAverage[0] += ledVoltage;
    cAverage[0] += ledCurrent;
    vAverage[1] += panelVoltage;
    cAverage[1] += panelCurrent;
    vAverage[2] += batteryVoltage;
   d52e4:	edc5 7a02 	vstr	s15, [r5, #8]
    cAverage[2] += batteryCurrent;
   d52e8:	edd4 7a02 	vldr	s15, [r4, #8]
   d52ec:	ee37 0a80 	vadd.f32	s0, s15, s0
   d52f0:	ed84 0a02 	vstr	s0, [r4, #8]

    _countSamples++;
   d52f4:	f8d6 3674 	ldr.w	r3, [r6, #1652]	; 0x674
   d52f8:	3301      	adds	r3, #1
   d52fa:	f8c6 3674 	str.w	r3, [r6, #1652]	; 0x674
}
   d52fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5300:	2003e398 	.word	0x2003e398
   d5304:	2003e3b8 	.word	0x2003e3b8
   d5308:	2003e3a8 	.word	0x2003e3a8

000d530c <_ZN8LightIOT10getAverageEPfS0_>:

// set average variables (average=average/samples)
void LightIOT::getAverage(float *vAverage, float *cAverage){
    vAverage[0] = vAverage[0]/ (float) _countSamples;
   d530c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5310:	edd1 6a00 	vldr	s13, [r1]
   d5314:	ee07 3a90 	vmov	s15, r3
   d5318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d531c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5320:	ed81 7a00 	vstr	s14, [r1]
    cAverage[0] = cAverage[0]/ (float) _countSamples;
   d5324:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5328:	edd2 6a00 	vldr	s13, [r2]
   d532c:	ee07 3a90 	vmov	s15, r3
   d5330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5338:	ed82 7a00 	vstr	s14, [r2]
    vAverage[1] = vAverage[1]/ (float) _countSamples;
   d533c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5340:	edd1 6a01 	vldr	s13, [r1, #4]
   d5344:	ee07 3a90 	vmov	s15, r3
   d5348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d534c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5350:	ed81 7a01 	vstr	s14, [r1, #4]
    cAverage[1] = cAverage[1]/ (float) _countSamples;
   d5354:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5358:	edd2 6a01 	vldr	s13, [r2, #4]
   d535c:	ee07 3a90 	vmov	s15, r3
   d5360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5368:	ed82 7a01 	vstr	s14, [r2, #4]
    vAverage[2] = vAverage[2]/ (float) _countSamples;
   d536c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5370:	edd1 6a02 	vldr	s13, [r1, #8]
   d5374:	ee07 3a90 	vmov	s15, r3
   d5378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d537c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5380:	ed81 7a02 	vstr	s14, [r1, #8]
    cAverage[2] = cAverage[2]/ (float) _countSamples;
   d5384:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5388:	edd2 6a02 	vldr	s13, [r2, #8]
   d538c:	ee07 3a90 	vmov	s15, r3
   d5390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5398:	ed82 7a02 	vstr	s14, [r2, #8]
   d539c:	4770      	bx	lr

000d539e <_ZN8LightIOT12resetAverageEPfS0_>:
}

// reset average variables
void LightIOT::resetAverage(float *vAverage, float *cAverage){
    vAverage[0] = 0;
   d539e:	2300      	movs	r3, #0
   d53a0:	600b      	str	r3, [r1, #0]
    cAverage[0] = 0;
   d53a2:	6013      	str	r3, [r2, #0]
    vAverage[1] = 0;
   d53a4:	604b      	str	r3, [r1, #4]
    cAverage[1] = 0;
   d53a6:	6053      	str	r3, [r2, #4]
    vAverage[2] = 0;
   d53a8:	608b      	str	r3, [r1, #8]
    cAverage[2] = 0;
   d53aa:	6093      	str	r3, [r2, #8]
    _countSamples= 0;
   d53ac:	2300      	movs	r3, #0
   d53ae:	f8c0 3674 	str.w	r3, [r0, #1652]	; 0x674
   d53b2:	4770      	bx	lr

000d53b4 <_ZN8LightIOT13sensorsToJSONEPfS0_>:
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d53b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    String dataJson = "{";
   d53b8:	4fcf      	ldr	r7, [pc, #828]	; (d56f8 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x344>)

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d53ba:	4dd0      	ldr	r5, [pc, #832]	; (d56fc <_ZN8LightIOT13sensorsToJSONEPfS0_+0x348>)
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d53bc:	4ed0      	ldr	r6, [pc, #832]	; (d5700 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x34c>)
        	dataJson = dataJson + "\"data\":" + "{";
        	
            	dataJson = dataJson+ "\"led\":" + "{";
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d53be:	f8df b36c 	ldr.w	fp, [pc, #876]	; d572c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x378>
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d53c2:	b08b      	sub	sp, #44	; 0x2c
   d53c4:	4604      	mov	r4, r0
   d53c6:	4689      	mov	r9, r1
    String dataJson = "{";
   d53c8:	4639      	mov	r1, r7
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d53ca:	4692      	mov	sl, r2
   d53cc:	4698      	mov	r8, r3
    String dataJson = "{";
   d53ce:	f000 fee6 	bl	d619e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d53d2:	4621      	mov	r1, r4
   d53d4:	a806      	add	r0, sp, #24
   d53d6:	f000 ff04 	bl	d61e2 <_ZN6StringC1ERKS_>

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d53da:	49ca      	ldr	r1, [pc, #808]	; (d5704 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x350>)
   d53dc:	a806      	add	r0, sp, #24
   d53de:	f000 ff79 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d53e2:	49c9      	ldr	r1, [pc, #804]	; (d5708 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x354>)
   d53e4:	f000 ff76 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d53e8:	4629      	mov	r1, r5
   d53ea:	f000 ff73 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d53ee:	4601      	mov	r1, r0
   d53f0:	4620      	mov	r0, r4
   d53f2:	f000 fee7 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d53f6:	a806      	add	r0, sp, #24
   d53f8:	f000 fe8a 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d53fc:	4621      	mov	r1, r4
   d53fe:	a806      	add	r0, sp, #24
   d5400:	f000 feef 	bl	d61e2 <_ZN6StringC1ERKS_>
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
   d5404:	49c1      	ldr	r1, [pc, #772]	; (d570c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x358>)
   d5406:	a806      	add	r0, sp, #24
   d5408:	f000 ff64 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d540c:	49c0      	ldr	r1, [pc, #768]	; (d5710 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x35c>)
   d540e:	f000 ff61 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5412:	4629      	mov	r1, r5
   d5414:	f000 ff5e 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5418:	4601      	mov	r1, r0
   d541a:	4620      	mov	r0, r4
   d541c:	f000 fed2 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5420:	a806      	add	r0, sp, #24
   d5422:	f000 fe75 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5426:	4621      	mov	r1, r4
   d5428:	a806      	add	r0, sp, #24
   d542a:	f000 feda 	bl	d61e2 <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d542e:	49b9      	ldr	r1, [pc, #740]	; (d5714 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x360>)
   d5430:	a806      	add	r0, sp, #24
   d5432:	f000 ff4f 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5436:	4631      	mov	r1, r6
   d5438:	f000 ff4c 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d543c:	f509 61cb 	add.w	r1, r9, #1624	; 0x658
   d5440:	f000 ff3c 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d5444:	4631      	mov	r1, r6
   d5446:	f000 ff45 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d544a:	4629      	mov	r1, r5
   d544c:	f000 ff42 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5450:	4601      	mov	r1, r0
   d5452:	4620      	mov	r0, r4
   d5454:	f000 feb6 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5458:	a806      	add	r0, sp, #24
   d545a:	f000 fe59 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d545e:	4621      	mov	r1, r4
   d5460:	a806      	add	r0, sp, #24
   d5462:	f000 febe 	bl	d61e2 <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"data\":" + "{";
   d5466:	49ac      	ldr	r1, [pc, #688]	; (d5718 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x364>)
        	
            	dataJson = dataJson+ "\"led\":" + "{";
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d5468:	f8df 92c4 	ldr.w	r9, [pc, #708]	; d5730 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x37c>
    String dataJson = "{";

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
        	dataJson = dataJson + "\"data\":" + "{";
   d546c:	a806      	add	r0, sp, #24
   d546e:	f000 ff31 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5472:	4639      	mov	r1, r7
   d5474:	f000 ff2e 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5478:	4601      	mov	r1, r0
   d547a:	4620      	mov	r0, r4
   d547c:	f000 fea2 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5480:	a806      	add	r0, sp, #24
   d5482:	f000 fe45 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5486:	4621      	mov	r1, r4
   d5488:	a806      	add	r0, sp, #24
   d548a:	f000 feaa 	bl	d61e2 <_ZN6StringC1ERKS_>
        	
            	dataJson = dataJson+ "\"led\":" + "{";
   d548e:	49a3      	ldr	r1, [pc, #652]	; (d571c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x368>)
   d5490:	a806      	add	r0, sp, #24
   d5492:	f000 ff1f 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5496:	4639      	mov	r1, r7
   d5498:	f000 ff1c 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d549c:	4601      	mov	r1, r0
   d549e:	4620      	mov	r0, r4
   d54a0:	f000 fe90 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d54a4:	a806      	add	r0, sp, #24
   d54a6:	f000 fe33 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d54aa:	4621      	mov	r1, r4
   d54ac:	a802      	add	r0, sp, #8
   d54ae:	f000 fe98 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d54b2:	4659      	mov	r1, fp
   d54b4:	a802      	add	r0, sp, #8
   d54b6:	f000 ff0d 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d54ba:	ed9a 0a00 	vldr	s0, [sl]
   d54be:	4606      	mov	r6, r0
   d54c0:	2106      	movs	r1, #6
   d54c2:	a806      	add	r0, sp, #24
   d54c4:	f000 febc 	bl	d6240 <_ZN6StringC1Efi>
   d54c8:	a906      	add	r1, sp, #24
   d54ca:	4630      	mov	r0, r6
   d54cc:	f000 fef6 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d54d0:	4629      	mov	r1, r5
   d54d2:	f000 feff 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d54d6:	4601      	mov	r1, r0
   d54d8:	4620      	mov	r0, r4
   d54da:	f000 fe73 	bl	d61c4 <_ZN6StringaSERKS_>
   d54de:	a806      	add	r0, sp, #24
   d54e0:	f000 fe16 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d54e4:	a802      	add	r0, sp, #8
   d54e6:	f000 fe13 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d54ea:	4621      	mov	r1, r4
   d54ec:	a802      	add	r0, sp, #8
   d54ee:	f000 fe78 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d54f2:	4649      	mov	r1, r9
   d54f4:	a802      	add	r0, sp, #8
   d54f6:	f000 feed 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d54fa:	ed98 0a00 	vldr	s0, [r8]
   d54fe:	4606      	mov	r6, r0
   d5500:	2106      	movs	r1, #6
   d5502:	a806      	add	r0, sp, #24
   d5504:	f000 fe9c 	bl	d6240 <_ZN6StringC1Efi>
   d5508:	4630      	mov	r0, r6
   d550a:	4e85      	ldr	r6, [pc, #532]	; (d5720 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x36c>)
   d550c:	a906      	add	r1, sp, #24
   d550e:	f000 fed5 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d5512:	4631      	mov	r1, r6
   d5514:	f000 fede 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5518:	4601      	mov	r1, r0
   d551a:	4620      	mov	r0, r4
   d551c:	f000 fe52 	bl	d61c4 <_ZN6StringaSERKS_>
   d5520:	a806      	add	r0, sp, #24
   d5522:	f000 fdf5 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5526:	a802      	add	r0, sp, #8
   d5528:	f000 fdf2 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d552c:	4621      	mov	r1, r4
   d552e:	a806      	add	r0, sp, #24
   d5530:	f000 fe57 	bl	d61e2 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d5534:	4629      	mov	r1, r5
   d5536:	a806      	add	r0, sp, #24
   d5538:	f000 fecc 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d553c:	4601      	mov	r1, r0
   d553e:	4620      	mov	r0, r4
   d5540:	f000 fe40 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5544:	a806      	add	r0, sp, #24
   d5546:	f000 fde3 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d554a:	4621      	mov	r1, r4
   d554c:	a806      	add	r0, sp, #24
   d554e:	f000 fe48 	bl	d61e2 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"pv\":" + "{";
   d5552:	4974      	ldr	r1, [pc, #464]	; (d5724 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x370>)
   d5554:	a806      	add	r0, sp, #24
   d5556:	f000 febd 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d555a:	4639      	mov	r1, r7
   d555c:	f000 feba 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5560:	4601      	mov	r1, r0
   d5562:	4620      	mov	r0, r4
   d5564:	f000 fe2e 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5568:	a806      	add	r0, sp, #24
   d556a:	f000 fdd1 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d556e:	4621      	mov	r1, r4
   d5570:	a802      	add	r0, sp, #8
   d5572:	f000 fe36 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[1]) +",";
   d5576:	4659      	mov	r1, fp
   d5578:	a802      	add	r0, sp, #8
   d557a:	f000 feab 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d557e:	ed9a 0a01 	vldr	s0, [sl, #4]
   d5582:	9001      	str	r0, [sp, #4]
   d5584:	2106      	movs	r1, #6
   d5586:	a806      	add	r0, sp, #24
   d5588:	f000 fe5a 	bl	d6240 <_ZN6StringC1Efi>
   d558c:	9b01      	ldr	r3, [sp, #4]
   d558e:	a906      	add	r1, sp, #24
   d5590:	4618      	mov	r0, r3
   d5592:	f000 fe93 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d5596:	4629      	mov	r1, r5
   d5598:	f000 fe9c 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d559c:	4601      	mov	r1, r0
   d559e:	4620      	mov	r0, r4
   d55a0:	f000 fe10 	bl	d61c4 <_ZN6StringaSERKS_>
   d55a4:	a806      	add	r0, sp, #24
   d55a6:	f000 fdb3 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d55aa:	a802      	add	r0, sp, #8
   d55ac:	f000 fdb0 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d55b0:	4621      	mov	r1, r4
   d55b2:	a802      	add	r0, sp, #8
   d55b4:	f000 fe15 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[1]) +"}";
   d55b8:	4649      	mov	r1, r9
   d55ba:	a802      	add	r0, sp, #8
   d55bc:	f000 fe8a 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d55c0:	ed98 0a01 	vldr	s0, [r8, #4]
   d55c4:	9001      	str	r0, [sp, #4]
   d55c6:	2106      	movs	r1, #6
   d55c8:	a806      	add	r0, sp, #24
   d55ca:	f000 fe39 	bl	d6240 <_ZN6StringC1Efi>
   d55ce:	9b01      	ldr	r3, [sp, #4]
   d55d0:	a906      	add	r1, sp, #24
   d55d2:	4618      	mov	r0, r3
   d55d4:	f000 fe72 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d55d8:	4631      	mov	r1, r6
   d55da:	f000 fe7b 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d55de:	4601      	mov	r1, r0
   d55e0:	4620      	mov	r0, r4
   d55e2:	f000 fdef 	bl	d61c4 <_ZN6StringaSERKS_>
   d55e6:	a806      	add	r0, sp, #24
   d55e8:	f000 fd92 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d55ec:	a802      	add	r0, sp, #8
   d55ee:	f000 fd8f 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d55f2:	4621      	mov	r1, r4
   d55f4:	a806      	add	r0, sp, #24
   d55f6:	f000 fdf4 	bl	d61e2 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d55fa:	4629      	mov	r1, r5
   d55fc:	a806      	add	r0, sp, #24
   d55fe:	f000 fe69 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5602:	4601      	mov	r1, r0
   d5604:	4620      	mov	r0, r4
   d5606:	f000 fddd 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d560a:	a806      	add	r0, sp, #24
   d560c:	f000 fd80 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5610:	4621      	mov	r1, r4
   d5612:	a806      	add	r0, sp, #24
   d5614:	f000 fde5 	bl	d61e2 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"battery\":" + "{";
   d5618:	4943      	ldr	r1, [pc, #268]	; (d5728 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x374>)
   d561a:	a806      	add	r0, sp, #24
   d561c:	f000 fe5a 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5620:	4639      	mov	r1, r7
   d5622:	f000 fe57 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5626:	4601      	mov	r1, r0
   d5628:	4620      	mov	r0, r4
   d562a:	f000 fdcb 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d562e:	a806      	add	r0, sp, #24
   d5630:	f000 fd6e 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5634:	4621      	mov	r1, r4
   d5636:	a802      	add	r0, sp, #8
   d5638:	f000 fdd3 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[2]) +",";
   d563c:	4659      	mov	r1, fp
   d563e:	a802      	add	r0, sp, #8
   d5640:	f000 fe48 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5644:	ed9a 0a02 	vldr	s0, [sl, #8]
   d5648:	4607      	mov	r7, r0
   d564a:	2106      	movs	r1, #6
   d564c:	a806      	add	r0, sp, #24
   d564e:	f000 fdf7 	bl	d6240 <_ZN6StringC1Efi>
   d5652:	a906      	add	r1, sp, #24
   d5654:	4638      	mov	r0, r7
   d5656:	f000 fe31 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d565a:	4629      	mov	r1, r5
   d565c:	f000 fe3a 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5660:	4601      	mov	r1, r0
   d5662:	4620      	mov	r0, r4
   d5664:	f000 fdae 	bl	d61c4 <_ZN6StringaSERKS_>
   d5668:	a806      	add	r0, sp, #24
   d566a:	f000 fd51 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d566e:	a802      	add	r0, sp, #8
   d5670:	f000 fd4e 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5674:	4621      	mov	r1, r4
   d5676:	a802      	add	r0, sp, #8
   d5678:	f000 fdb3 	bl	d61e2 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[2]) +"}";
   d567c:	4649      	mov	r1, r9
   d567e:	a802      	add	r0, sp, #8
   d5680:	f000 fe28 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d5684:	ed98 0a02 	vldr	s0, [r8, #8]
   d5688:	4605      	mov	r5, r0
   d568a:	2106      	movs	r1, #6
   d568c:	a806      	add	r0, sp, #24
   d568e:	f000 fdd7 	bl	d6240 <_ZN6StringC1Efi>
   d5692:	a906      	add	r1, sp, #24
   d5694:	4628      	mov	r0, r5
   d5696:	f000 fe11 	bl	d62bc <_ZplRK15StringSumHelperRK6String>
   d569a:	4631      	mov	r1, r6
   d569c:	f000 fe1a 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d56a0:	4601      	mov	r1, r0
   d56a2:	4620      	mov	r0, r4
   d56a4:	f000 fd8e 	bl	d61c4 <_ZN6StringaSERKS_>
   d56a8:	a806      	add	r0, sp, #24
   d56aa:	f000 fd31 	bl	d6110 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56ae:	a802      	add	r0, sp, #8
   d56b0:	f000 fd2e 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56b4:	4621      	mov	r1, r4
   d56b6:	a806      	add	r0, sp, #24
   d56b8:	f000 fd93 	bl	d61e2 <_ZN6StringC1ERKS_>
        	
        	dataJson = dataJson+ "}";
   d56bc:	4631      	mov	r1, r6
   d56be:	a806      	add	r0, sp, #24
   d56c0:	f000 fe08 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d56c4:	4601      	mov	r1, r0
   d56c6:	4620      	mov	r0, r4
   d56c8:	f000 fd7c 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56cc:	a806      	add	r0, sp, #24
   d56ce:	f000 fd1f 	bl	d6110 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56d2:	4621      	mov	r1, r4
   d56d4:	a806      	add	r0, sp, #24
   d56d6:	f000 fd84 	bl	d61e2 <_ZN6StringC1ERKS_>
    	
    	dataJson = dataJson+ "}";
   d56da:	4631      	mov	r1, r6
   d56dc:	a806      	add	r0, sp, #24
   d56de:	f000 fdf9 	bl	d62d4 <_ZplRK15StringSumHelperPKc>
   d56e2:	4601      	mov	r1, r0
   d56e4:	4620      	mov	r0, r4
   d56e6:	f000 fd6d 	bl	d61c4 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56ea:	a806      	add	r0, sp, #24
   d56ec:	f000 fd10 	bl	d6110 <_ZN6StringD1Ev>

    return dataJson;
}
   d56f0:	4620      	mov	r0, r4
   d56f2:	b00b      	add	sp, #44	; 0x2c
   d56f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56f8:	000d8f8f 	.word	0x000d8f8f
   d56fc:	000d8fb2 	.word	0x000d8fb2
   d5700:	000d8fb0 	.word	0x000d8fb0
   d5704:	000d8f91 	.word	0x000d8f91
   d5708:	000d8f97 	.word	0x000d8f97
   d570c:	000d8fb4 	.word	0x000d8fb4
   d5710:	000d8fbc 	.word	0x000d8fbc
   d5714:	000d8fc9 	.word	0x000d8fc9
   d5718:	000d8fd1 	.word	0x000d8fd1
   d571c:	000d8fd9 	.word	0x000d8fd9
   d5720:	000d8ff6 	.word	0x000d8ff6
   d5724:	000d8ff8 	.word	0x000d8ff8
   d5728:	000d8ffe 	.word	0x000d8ffe
   d572c:	000d8fe0 	.word	0x000d8fe0
   d5730:	000d8feb 	.word	0x000d8feb

000d5734 <_ZN8LightIOT12changeModeIRE6String>:
}

//=============================================================
//========================= CHANGE MODE =========================
//=============================================================
void LightIOT::changeModeIR(String currentMode){
   d5734:	b538      	push	{r3, r4, r5, lr}
   d5736:	460d      	mov	r5, r1
   d5738:	4604      	mov	r4, r0
    if(currentMode.equals("OFF")){
   d573a:	4913      	ldr	r1, [pc, #76]	; (d5788 <_ZN8LightIOT12changeModeIRE6String+0x54>)
   d573c:	4628      	mov	r0, r5
   d573e:	f000 fddb 	bl	d62f8 <_ZNK6String6equalsEPKc>
   d5742:	b108      	cbz	r0, d5748 <_ZN8LightIOT12changeModeIRE6String+0x14>
        sendCommand(1);  //  Send OFF command
   d5744:	2101      	movs	r1, #1
   d5746:	e005      	b.n	d5754 <_ZN8LightIOT12changeModeIRE6String+0x20>
    }else if(currentMode.equals("MODE L")){
   d5748:	4910      	ldr	r1, [pc, #64]	; (d578c <_ZN8LightIOT12changeModeIRE6String+0x58>)
   d574a:	4628      	mov	r0, r5
   d574c:	f000 fdd4 	bl	d62f8 <_ZNK6String6equalsEPKc>
   d5750:	b128      	cbz	r0, d575e <_ZN8LightIOT12changeModeIRE6String+0x2a>
        sendCommand(2);  // Send L command
   d5752:	2102      	movs	r1, #2
   d5754:	4620      	mov	r0, r4
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d5756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
//=============================================================
void LightIOT::changeModeIR(String currentMode){
    if(currentMode.equals("OFF")){
        sendCommand(1);  //  Send OFF command
    }else if(currentMode.equals("MODE L")){
        sendCommand(2);  // Send L command
   d575a:	f7ff bd43 	b.w	d51e4 <_ZN8LightIOT11sendCommandEh>
    }else if(currentMode.equals("MODE T")){
   d575e:	490c      	ldr	r1, [pc, #48]	; (d5790 <_ZN8LightIOT12changeModeIRE6String+0x5c>)
   d5760:	4628      	mov	r0, r5
   d5762:	f000 fdc9 	bl	d62f8 <_ZNK6String6equalsEPKc>
   d5766:	b108      	cbz	r0, d576c <_ZN8LightIOT12changeModeIRE6String+0x38>
   d5768:	2103      	movs	r1, #3
   d576a:	e007      	b.n	d577c <_ZN8LightIOT12changeModeIRE6String+0x48>
        sendCommand(3);  // Send T command
    }else if(currentMode.equals("MODE U")){
   d576c:	4909      	ldr	r1, [pc, #36]	; (d5794 <_ZN8LightIOT12changeModeIRE6String+0x60>)
   d576e:	4628      	mov	r0, r5
   d5770:	f000 fdc2 	bl	d62f8 <_ZNK6String6equalsEPKc>
   d5774:	b108      	cbz	r0, d577a <_ZN8LightIOT12changeModeIRE6String+0x46>
   d5776:	2104      	movs	r1, #4
   d5778:	e000      	b.n	d577c <_ZN8LightIOT12changeModeIRE6String+0x48>
   d577a:	2105      	movs	r1, #5
   d577c:	4620      	mov	r0, r4
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d577e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5782:	f7ff bd07 	b.w	d5194 <_ZN8LightIOT11sendCommandEh.part.0>
   d5786:	bf00      	nop
   d5788:	000d87b9 	.word	0x000d87b9
   d578c:	000d87bd 	.word	0x000d87bd
   d5790:	000d87c4 	.word	0x000d87c4
   d5794:	000d87cb 	.word	0x000d87cb

000d5798 <_ZN8LightIOT17resetModeForErrorEff>:
//=============================================================



void LightIOT::resetModeForError(float vPanel, float cPanel){
    if(vPanel>=16.0 && cPanel<150.0){
   d5798:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   d579c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d57a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
//========================= FIX ERROR =========================
//=============================================================



void LightIOT::resetModeForError(float vPanel, float cPanel){
   d57a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d57a6:	4604      	mov	r4, r0
    if(vPanel>=16.0 && cPanel<150.0){
   d57a8:	db09      	blt.n	d57be <_ZN8LightIOT17resetModeForErrorEff+0x26>
   d57aa:	eddf 7a14 	vldr	s15, [pc, #80]	; d57fc <_ZN8LightIOT17resetModeForErrorEff+0x64>
   d57ae:	eef4 0ae7 	vcmpe.f32	s1, s15
   d57b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        _error = true;
   d57b6:	bf44      	itt	mi
   d57b8:	2301      	movmi	r3, #1
   d57ba:	f880 3670 	strbmi.w	r3, [r0, #1648]	; 0x670
    }

    if(_error) {
   d57be:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   d57c2:	b1cb      	cbz	r3, d57f8 <_ZN8LightIOT17resetModeForErrorEff+0x60>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d57c4:	f000 f962 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
        unsigned int tActual = millis();
        if(tActual > _last_tError + _intervalOutError) {
   d57c8:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
   d57cc:	f8d4 366c 	ldr.w	r3, [r4, #1644]	; 0x66c
   d57d0:	4413      	add	r3, r2
   d57d2:	4283      	cmp	r3, r0
   d57d4:	d210      	bcs.n	d57f8 <_ZN8LightIOT17resetModeForErrorEff+0x60>
            _last_tError = tActual;
   d57d6:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
            changeModeIR(_modeDriver);
   d57da:	f504 61cb 	add.w	r1, r4, #1624	; 0x658
   d57de:	4668      	mov	r0, sp
   d57e0:	f000 fcff 	bl	d61e2 <_ZN6StringC1ERKS_>
   d57e4:	4669      	mov	r1, sp
   d57e6:	4620      	mov	r0, r4
   d57e8:	f7ff ffa4 	bl	d5734 <_ZN8LightIOT12changeModeIRE6String>
   d57ec:	4668      	mov	r0, sp
   d57ee:	f000 fc8f 	bl	d6110 <_ZN6StringD1Ev>
            _error = false;
   d57f2:	2300      	movs	r3, #0
   d57f4:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        }
    }
    
}
   d57f8:	b004      	add	sp, #16
   d57fa:	bd10      	pop	{r4, pc}
   d57fc:	43160000 	.word	0x43160000

000d5800 <_GLOBAL__sub_I_batterySensor>:
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d5800:	b508      	push	{r3, lr}
   d5802:	f000 f8db 	bl	d59bc <HAL_Pin_Map>
})

/**
 * INA219 Sensors INIT.
 */
Adafruit_INA219 batterySensor = Adafruit_INA219(INA219_BATTERY);
   d5806:	2144      	movs	r1, #68	; 0x44
   d5808:	4806      	ldr	r0, [pc, #24]	; (d5824 <_GLOBAL__sub_I_batterySensor+0x24>)
   d580a:	f000 f873 	bl	d58f4 <_ZN15Adafruit_INA219C1Eh>
Adafruit_INA219 panelSensor = Adafruit_INA219(INA219_PANEL);
   d580e:	2141      	movs	r1, #65	; 0x41
   d5810:	4805      	ldr	r0, [pc, #20]	; (d5828 <_GLOBAL__sub_I_batterySensor+0x28>)
   d5812:	f000 f86f 	bl	d58f4 <_ZN15Adafruit_INA219C1Eh>
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);
   d5816:	2140      	movs	r1, #64	; 0x40
   d5818:	4804      	ldr	r0, [pc, #16]	; (d582c <_GLOBAL__sub_I_batterySensor+0x2c>)
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d581a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/**
 * INA219 Sensors INIT.
 */
Adafruit_INA219 batterySensor = Adafruit_INA219(INA219_BATTERY);
Adafruit_INA219 panelSensor = Adafruit_INA219(INA219_PANEL);
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);
   d581e:	f000 b869 	b.w	d58f4 <_ZN15Adafruit_INA219C1Eh>
   d5822:	bf00      	nop
   d5824:	2003e3a8 	.word	0x2003e3a8
   d5828:	2003e398 	.word	0x2003e398
   d582c:	2003e3b8 	.word	0x2003e3b8

000d5830 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5830:	6803      	ldr	r3, [r0, #0]
   d5832:	b2c9      	uxtb	r1, r1
   d5834:	689b      	ldr	r3, [r3, #8]
   d5836:	4718      	bx	r3

000d5838 <_ZN15Adafruit_INA21917wireWriteRegisterEht>:
/*! 
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireWriteRegister (uint8_t reg, uint16_t value)
{
   d5838:	b570      	push	{r4, r5, r6, lr}
   d583a:	4606      	mov	r6, r0
   d583c:	4614      	mov	r4, r2
   d583e:	460d      	mov	r5, r1
  Wire.beginTransmission(ina219_i2caddr);
   d5840:	f001 ff2a 	bl	d7698 <_Z19__fetch_global_Wirev>
   d5844:	7831      	ldrb	r1, [r6, #0]
   d5846:	f001 f955 	bl	d6af4 <_ZN7TwoWire17beginTransmissionEh>
  #if defined (SPARK)
      Wire.write(reg);                       // Register
   d584a:	f001 ff25 	bl	d7698 <_Z19__fetch_global_Wirev>
   d584e:	6803      	ldr	r3, [r0, #0]
   d5850:	4629      	mov	r1, r5
   d5852:	689b      	ldr	r3, [r3, #8]
   d5854:	4798      	blx	r3
      Wire.write((value >> 8) & 0xFF);       // Upper 8-bits
   d5856:	f001 ff1f 	bl	d7698 <_Z19__fetch_global_Wirev>
   d585a:	0a21      	lsrs	r1, r4, #8
   d585c:	f7ff ffe8 	bl	d5830 <_ZN7TwoWire5writeEi>
      Wire.write(value & 0xFF);              // Lower 8-bits
   d5860:	f001 ff1a 	bl	d7698 <_Z19__fetch_global_Wirev>
   d5864:	b2e1      	uxtb	r1, r4
   d5866:	f7ff ffe3 	bl	d5830 <_ZN7TwoWire5writeEi>
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d586a:	f001 ff15 	bl	d7698 <_Z19__fetch_global_Wirev>
}
   d586e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d5872:	f001 b947 	b.w	d6b04 <_ZN7TwoWire15endTransmissionEv>

000d5876 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>:
/*! 
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value)
{
   d5876:	b570      	push	{r4, r5, r6, lr}
   d5878:	4604      	mov	r4, r0
   d587a:	4615      	mov	r5, r2
   d587c:	460e      	mov	r6, r1

  Wire.beginTransmission(ina219_i2caddr);
   d587e:	f001 ff0b 	bl	d7698 <_Z19__fetch_global_Wirev>
   d5882:	7821      	ldrb	r1, [r4, #0]
   d5884:	f001 f936 	bl	d6af4 <_ZN7TwoWire17beginTransmissionEh>
    #if defined (SPARK)
      Wire.write(reg);
   d5888:	f001 ff06 	bl	d7698 <_Z19__fetch_global_Wirev>
   d588c:	6803      	ldr	r3, [r0, #0]
   d588e:	4631      	mov	r1, r6
   d5890:	689b      	ldr	r3, [r3, #8]
   d5892:	4798      	blx	r3
        Wire.write(reg);                       // Register
      #else
        Wire.send(reg);                        // Register
      #endif
    #endif
  Wire.endTransmission();
   d5894:	f001 ff00 	bl	d7698 <_Z19__fetch_global_Wirev>
   d5898:	f001 f934 	bl	d6b04 <_ZN7TwoWire15endTransmissionEv>
  
  delay(1); // Max 12-bit conversion time is 586us per sample
   d589c:	2001      	movs	r0, #1
   d589e:	f000 feb3 	bl	d6608 <delay>

  Wire.requestFrom(ina219_i2caddr, (uint8_t)2);  
   d58a2:	f001 fef9 	bl	d7698 <_Z19__fetch_global_Wirev>
   d58a6:	7821      	ldrb	r1, [r4, #0]
   d58a8:	2202      	movs	r2, #2
   d58aa:	f001 f920 	bl	d6aee <_ZN7TwoWire11requestFromEhh>
  #if defined (SPARK)
      *value = ((Wire.read() << 8) | Wire.read());
   d58ae:	f001 fef3 	bl	d7698 <_Z19__fetch_global_Wirev>
   d58b2:	6803      	ldr	r3, [r0, #0]
   d58b4:	695b      	ldr	r3, [r3, #20]
   d58b6:	4798      	blx	r3
   d58b8:	4604      	mov	r4, r0
   d58ba:	f001 feed 	bl	d7698 <_Z19__fetch_global_Wirev>
   d58be:	6803      	ldr	r3, [r0, #0]
   d58c0:	695b      	ldr	r3, [r3, #20]
   d58c2:	4798      	blx	r3
   d58c4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d58c8:	8028      	strh	r0, [r5, #0]
   d58ca:	bd70      	pop	{r4, r5, r6, pc}

000d58cc <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d58cc:	b510      	push	{r4, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d58ce:	230a      	movs	r3, #10
  
  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)
  
  ina219_calValue = 4096;
   d58d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d58d4:	6083      	str	r3, [r0, #8]
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d58d6:	2302      	movs	r3, #2
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d58d8:	4604      	mov	r4, r0
  
  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)
  
  ina219_calValue = 4096;
   d58da:	6042      	str	r2, [r0, #4]
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d58dc:	60c3      	str	r3, [r0, #12]

  // Set Calibration register to 'Cal' calculated above	
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d58de:	2105      	movs	r1, #5
   d58e0:	f7ff ffaa 	bl	d5838 <_ZN15Adafruit_INA21917wireWriteRegisterEht>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d58e4:	4620      	mov	r0, r4
   d58e6:	f643 421f 	movw	r2, #15391	; 0x3c1f
   d58ea:	2100      	movs	r1, #0
}
   d58ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d58f0:	f7ff bfa2 	b.w	d5838 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

000d58f4 <_ZN15Adafruit_INA219C1Eh>:
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d58f4:	2200      	movs	r2, #0
/*! 
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
   d58f6:	7001      	strb	r1, [r0, #0]
  ina219_currentDivider_mA = 0;
   d58f8:	6082      	str	r2, [r0, #8]
  ina219_powerDivider_mW = 0;
   d58fa:	60c2      	str	r2, [r0, #12]
}
   d58fc:	4770      	bx	lr

000d58fe <_ZN15Adafruit_INA2195beginEv>:
void Adafruit_INA219::begin(uint8_t addr) {
  ina219_i2caddr = addr;
  begin();
}

void Adafruit_INA219::begin(void) {
   d58fe:	b510      	push	{r4, lr}
   d5900:	4604      	mov	r4, r0
  Wire.begin();    
   d5902:	f001 fec9 	bl	d7698 <_Z19__fetch_global_Wirev>
   d5906:	f001 f8e3 	bl	d6ad0 <_ZN7TwoWire5beginEv>
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d590a:	4620      	mov	r0, r4
}
   d590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void Adafruit_INA219::begin(void) {
  Wire.begin();    
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d5910:	f7ff bfdc 	b.w	d58cc <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>

000d5914 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d5914:	b507      	push	{r0, r1, r2, lr}
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
   d5916:	2102      	movs	r1, #2
   d5918:	f10d 0206 	add.w	r2, sp, #6
   d591c:	f7ff ffab 	bl	d5876 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d5920:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d5924:	10c0      	asrs	r0, r0, #3
}
   d5926:	0080      	lsls	r0, r0, #2
   d5928:	b003      	add	sp, #12
   d592a:	f85d fb04 	ldr.w	pc, [sp], #4

000d592e <_ZN15Adafruit_INA21914getCurrent_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getCurrent_raw() {
   d592e:	b513      	push	{r0, r1, r4, lr}
   d5930:	4604      	mov	r4, r0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d5932:	8882      	ldrh	r2, [r0, #4]
   d5934:	2105      	movs	r1, #5
   d5936:	f7ff ff7f 	bl	d5838 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
   d593a:	4620      	mov	r0, r4
   d593c:	f10d 0206 	add.w	r2, sp, #6
   d5940:	2104      	movs	r1, #4
   d5942:	f7ff ff98 	bl	d5876 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>
  
  return (int16_t)value;
}
   d5946:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   d594a:	b002      	add	sp, #8
   d594c:	bd10      	pop	{r4, pc}
	...

000d5950 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:
/**************************************************************************/
/*! 
    @brief  Gets the shunt voltage in volts
*/
/**************************************************************************/
float Adafruit_INA219::getBusVoltage_V() {
   d5950:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d5952:	f7ff ffdf 	bl	d5914 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d5956:	f002 f961 	bl	d7c1c <__aeabi_i2d>
   d595a:	a305      	add	r3, pc, #20	; (adr r3, d5970 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d595c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5960:	f002 f9c2 	bl	d7ce8 <__aeabi_dmul>
   d5964:	f002 fcb8 	bl	d82d8 <__aeabi_d2f>
}
   d5968:	ee00 0a10 	vmov	s0, r0
   d596c:	bd08      	pop	{r3, pc}
   d596e:	bf00      	nop
   d5970:	d2f1a9fc 	.word	0xd2f1a9fc
   d5974:	3f50624d 	.word	0x3f50624d

000d5978 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*! 
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
   d5978:	b510      	push	{r4, lr}
   d597a:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d597c:	f7ff ffd7 	bl	d592e <_ZN15Adafruit_INA21914getCurrent_rawEv>
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
   d5980:	ed94 0a02 	vldr	s0, [r4, #8]
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
  float valueDec = getCurrent_raw();
   d5984:	ee07 0a90 	vmov	s15, r0
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
   d5988:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
  float valueDec = getCurrent_raw();
   d598c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
}
   d5990:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5994:	bd10      	pop	{r4, pc}

000d5996 <_GLOBAL__sub_I__ZN15Adafruit_INA21917wireWriteRegisterEht>:
   d5996:	f000 b811 	b.w	d59bc <HAL_Pin_Map>
	...

000d599c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <netdb_freeaddrinfo+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	689b      	ldr	r3, [r3, #8]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	00030268 	.word	0x00030268

000d59ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <netdb_getaddrinfo+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	68db      	ldr	r3, [r3, #12]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	00030268 	.word	0x00030268

000d59bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <HAL_Pin_Map+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	681b      	ldr	r3, [r3, #0]
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003022c 	.word	0x0003022c

000d59cc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <HAL_Validate_Pin_Function+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	685b      	ldr	r3, [r3, #4]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003022c 	.word	0x0003022c

000d59dc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <HAL_Pin_Mode+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	689b      	ldr	r3, [r3, #8]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003022c 	.word	0x0003022c

000d59ec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <HAL_Get_Pin_Mode+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	68db      	ldr	r3, [r3, #12]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003022c 	.word	0x0003022c

000d59fc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <HAL_GPIO_Write+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	691b      	ldr	r3, [r3, #16]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	0003022c 	.word	0x0003022c

000d5a0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <HAL_GPIO_Read+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	695b      	ldr	r3, [r3, #20]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	0003022c 	.word	0x0003022c

000d5a1c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <HAL_ADC_Read+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	0003022c 	.word	0x0003022c

000d5a2c <HAL_PWM_Write_With_Frequency_Ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, HAL_PWM_Write_With_Frequency_Ext, void(uint16_t, uint32_t, uint32_t))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <HAL_PWM_Write_With_Frequency_Ext+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	0003022c 	.word	0x0003022c

000d5a3c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <HAL_SPI_Init+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	69db      	ldr	r3, [r3, #28]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030230 	.word	0x00030230

000d5a4c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <HAL_SPI_Is_Enabled+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	6a1b      	ldr	r3, [r3, #32]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030230 	.word	0x00030230

000d5a5c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <if_index_to_name+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	695b      	ldr	r3, [r3, #20]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	0003026c 	.word	0x0003026c

000d5a6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <HAL_RNG_GetRandomNumber+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	685b      	ldr	r3, [r3, #4]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030218 	.word	0x00030218

000d5a7c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <HAL_Delay_Microseconds+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	68db      	ldr	r3, [r3, #12]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030218 	.word	0x00030218

000d5a8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	695b      	ldr	r3, [r3, #20]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030218 	.word	0x00030218

000d5a9c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <os_thread_is_current+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	689b      	ldr	r3, [r3, #8]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030248 	.word	0x00030248

000d5aac <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <os_thread_join+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	691b      	ldr	r3, [r3, #16]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030248 	.word	0x00030248

000d5abc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <os_thread_cleanup+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	695b      	ldr	r3, [r3, #20]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030248 	.word	0x00030248

000d5acc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <os_mutex_create+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030248 	.word	0x00030248

000d5adc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <os_mutex_recursive_create+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030248 	.word	0x00030248

000d5aec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <inet_inet_ntop+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	695b      	ldr	r3, [r3, #20]
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030264 	.word	0x00030264

000d5afc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <inet_htonl+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	6a1b      	ldr	r3, [r3, #32]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030264 	.word	0x00030264

000d5b0c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <inet_htons+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030264 	.word	0x00030264

000d5b1c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <HAL_USART_Init+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	681b      	ldr	r3, [r3, #0]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	0003023c 	.word	0x0003023c

000d5b2c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <HAL_USART_Write_Data+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	68db      	ldr	r3, [r3, #12]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	0003023c 	.word	0x0003023c

000d5b3c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <HAL_USART_Available_Data+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	691b      	ldr	r3, [r3, #16]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	0003023c 	.word	0x0003023c

000d5b4c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <HAL_USART_Read_Data+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	695b      	ldr	r3, [r3, #20]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	0003023c 	.word	0x0003023c

000d5b5c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <HAL_USART_Peek_Data+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	699b      	ldr	r3, [r3, #24]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	0003023c 	.word	0x0003023c

000d5b6c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <HAL_USART_Flush_Data+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	69db      	ldr	r3, [r3, #28]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003023c 	.word	0x0003023c

000d5b7c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <HAL_USART_Is_Enabled+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	6a1b      	ldr	r3, [r3, #32]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003023c 	.word	0x0003023c

000d5b8c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <HAL_USART_Available_Data_For_Write+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003023c 	.word	0x0003023c

000d5b9c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <HAL_I2C_Begin+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	68db      	ldr	r3, [r3, #12]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030228 	.word	0x00030228

000d5bac <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <HAL_I2C_Request_Data+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	695b      	ldr	r3, [r3, #20]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030228 	.word	0x00030228

000d5bbc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <HAL_I2C_Begin_Transmission+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	699b      	ldr	r3, [r3, #24]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030228 	.word	0x00030228

000d5bcc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_I2C_End_Transmission+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	69db      	ldr	r3, [r3, #28]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030228 	.word	0x00030228

000d5bdc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_I2C_Write_Data+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6a1b      	ldr	r3, [r3, #32]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030228 	.word	0x00030228

000d5bec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <HAL_I2C_Available_Data+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030228 	.word	0x00030228

000d5bfc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_I2C_Read_Data+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030228 	.word	0x00030228

000d5c0c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_I2C_Peek_Data+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030228 	.word	0x00030228

000d5c1c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_I2C_Flush_Data+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030228 	.word	0x00030228

000d5c2c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <HAL_I2C_Is_Enabled+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030228 	.word	0x00030228

000d5c3c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <HAL_I2C_Init+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030228 	.word	0x00030228

000d5c4c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <sock_setsockopt+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	699b      	ldr	r3, [r3, #24]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030238 	.word	0x00030238

000d5c5c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <sock_close+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	69db      	ldr	r3, [r3, #28]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030238 	.word	0x00030238

000d5c6c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <sock_connect+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6a1b      	ldr	r3, [r3, #32]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030238 	.word	0x00030238

000d5c7c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <sock_recv+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030238 	.word	0x00030238

000d5c8c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <sock_send+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030238 	.word	0x00030238

000d5c9c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <sock_socket+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030238 	.word	0x00030238

000d5cac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <HAL_USB_USART_Init+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	681b      	ldr	r3, [r3, #0]
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	0003024c 	.word	0x0003024c

000d5cbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <HAL_USB_USART_Begin+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	685b      	ldr	r3, [r3, #4]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	0003024c 	.word	0x0003024c

000d5ccc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <HAL_USB_USART_Available_Data+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	691b      	ldr	r3, [r3, #16]
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	0003024c 	.word	0x0003024c

000d5cdc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	695b      	ldr	r3, [r3, #20]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	0003024c 	.word	0x0003024c

000d5cec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <HAL_USB_USART_Receive_Data+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	699b      	ldr	r3, [r3, #24]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	0003024c 	.word	0x0003024c

000d5cfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <HAL_USB_USART_Send_Data+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	69db      	ldr	r3, [r3, #28]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	0003024c 	.word	0x0003024c

000d5d0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <HAL_USB_USART_Flush_Data+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	6a1b      	ldr	r3, [r3, #32]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	0003024c 	.word	0x0003024c

000d5d1c <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <wlan_connected_info+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030274 	.word	0x00030274

000d5d2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <log_message+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030260 	.word	0x00030260

000d5d3c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <set_system_mode+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	685b      	ldr	r3, [r3, #4]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030220 	.word	0x00030220

000d5d4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <system_delay_ms+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	695b      	ldr	r3, [r3, #20]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030220 	.word	0x00030220

000d5d5c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <system_thread_set_state+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030220 	.word	0x00030220

000d5d6c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b03      	ldr	r3, [pc, #12]	; (d5d7c <system_ctrl_set_app_request_handler+0x10>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d76:	9301      	str	r3, [sp, #4]
   d5d78:	bd08      	pop	{r3, pc}
   d5d7a:	0000      	.short	0x0000
   d5d7c:	00030220 	.word	0x00030220

000d5d80 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b03      	ldr	r3, [pc, #12]	; (d5d90 <system_ctrl_set_result+0x10>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d8a:	9301      	str	r3, [sp, #4]
   d5d8c:	bd08      	pop	{r3, pc}
   d5d8e:	0000      	.short	0x0000
   d5d90:	00030220 	.word	0x00030220

000d5d94 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <network_config+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	681b      	ldr	r3, [r3, #0]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030240 	.word	0x00030240

000d5da4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <network_connect+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	685b      	ldr	r3, [r3, #4]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030240 	.word	0x00030240

000d5db4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <network_connecting+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	689b      	ldr	r3, [r3, #8]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030240 	.word	0x00030240

000d5dc4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <network_disconnect+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	68db      	ldr	r3, [r3, #12]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030240 	.word	0x00030240

000d5dd4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <network_ready+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	691b      	ldr	r3, [r3, #16]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030240 	.word	0x00030240

000d5de4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <network_on+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	695b      	ldr	r3, [r3, #20]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030240 	.word	0x00030240

000d5df4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <network_off+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	699b      	ldr	r3, [r3, #24]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030240 	.word	0x00030240

000d5e04 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <network_listen+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	69db      	ldr	r3, [r3, #28]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030240 	.word	0x00030240

000d5e14 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <network_listening+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6a1b      	ldr	r3, [r3, #32]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030240 	.word	0x00030240

000d5e24 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <network_set_credentials+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030240 	.word	0x00030240

000d5e34 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <network_clear_credentials+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030240 	.word	0x00030240

000d5e44 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <network_set_listen_timeout+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030240 	.word	0x00030240

000d5e54 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <network_get_listen_timeout+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030240 	.word	0x00030240

000d5e64 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <spark_process+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	689b      	ldr	r3, [r3, #8]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030244 	.word	0x00030244

000d5e74 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <spark_deviceID+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	69db      	ldr	r3, [r3, #28]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030244 	.word	0x00030244

000d5e84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030244 	.word	0x00030244

000d5e94 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <malloc+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	681b      	ldr	r3, [r3, #0]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003021c 	.word	0x0003021c

000d5ea4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <free+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	685b      	ldr	r3, [r3, #4]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003021c 	.word	0x0003021c

000d5eb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <realloc+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	689b      	ldr	r3, [r3, #8]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003021c 	.word	0x0003021c

000d5ec4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <__errno+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003021c 	.word	0x0003021c

000d5ed4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	4611      	mov	r1, r2
   d5ed8:	6840      	ldr	r0, [r0, #4]
   d5eda:	f7ff bf9b 	b.w	d5e14 <network_listening>

000d5ede <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ede:	2200      	movs	r2, #0
   d5ee0:	4611      	mov	r1, r2
   d5ee2:	6840      	ldr	r0, [r0, #4]
   d5ee4:	f7ff bfb6 	b.w	d5e54 <network_get_listen_timeout>

000d5ee8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ee8:	2200      	movs	r2, #0
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f7ff bfaa 	b.w	d5e44 <network_set_listen_timeout>

000d5ef0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ef0:	2200      	movs	r2, #0
   d5ef2:	f081 0101 	eor.w	r1, r1, #1
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	f7ff bf84 	b.w	d5e04 <network_listen>

000d5efc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5efc:	2300      	movs	r3, #0
   d5efe:	461a      	mov	r2, r3
   d5f00:	4619      	mov	r1, r3
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	f7ff bf76 	b.w	d5df4 <network_off>

000d5f08 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f08:	2300      	movs	r3, #0
   d5f0a:	461a      	mov	r2, r3
   d5f0c:	4619      	mov	r1, r3
   d5f0e:	6840      	ldr	r0, [r0, #4]
   d5f10:	f7ff bf68 	b.w	d5de4 <network_on>

000d5f14 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f14:	2200      	movs	r2, #0
   d5f16:	4611      	mov	r1, r2
   d5f18:	6840      	ldr	r0, [r0, #4]
   d5f1a:	f7ff bf5b 	b.w	d5dd4 <network_ready>

000d5f1e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f1e:	2200      	movs	r2, #0
   d5f20:	4611      	mov	r1, r2
   d5f22:	6840      	ldr	r0, [r0, #4]
   d5f24:	f7ff bf46 	b.w	d5db4 <network_connecting>

000d5f28 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f28:	2200      	movs	r2, #0
   d5f2a:	2102      	movs	r1, #2
   d5f2c:	6840      	ldr	r0, [r0, #4]
   d5f2e:	f7ff bf49 	b.w	d5dc4 <network_disconnect>

000d5f32 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f32:	2300      	movs	r3, #0
   d5f34:	461a      	mov	r2, r3
   d5f36:	6840      	ldr	r0, [r0, #4]
   d5f38:	f7ff bf34 	b.w	d5da4 <network_connect>

000d5f3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f3c:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f3e:	2203      	movs	r2, #3
   d5f40:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f42:	4a02      	ldr	r2, [pc, #8]	; (d5f4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f44:	601a      	str	r2, [r3, #0]
   d5f46:	4770      	bx	lr
   d5f48:	2003e3c8 	.word	0x2003e3c8
   d5f4c:	000d9014 	.word	0x000d9014

000d5f50 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5f50:	4770      	bx	lr

000d5f52 <_ZN8SPIClassD0Ev>:
   d5f52:	b510      	push	{r4, lr}
   d5f54:	2110      	movs	r1, #16
   d5f56:	4604      	mov	r4, r0
   d5f58:	f001 fbc3 	bl	d76e2 <_ZdlPvj>
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f60:	b570      	push	{r4, r5, r6, lr}
   d5f62:	4b08      	ldr	r3, [pc, #32]	; (d5f84 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5f64:	6003      	str	r3, [r0, #0]
   d5f66:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5f68:	2500      	movs	r5, #0
   d5f6a:	460e      	mov	r6, r1
   d5f6c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5f70:	f7ff fdac 	bl	d5acc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5f74:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5f76:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5f78:	f7ff fd60 	bl	d5a3c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5f7c:	60a5      	str	r5, [r4, #8]
}
   d5f7e:	4620      	mov	r0, r4
   d5f80:	bd70      	pop	{r4, r5, r6, pc}
   d5f82:	bf00      	nop
   d5f84:	000d9048 	.word	0x000d9048

000d5f88 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5f88:	7900      	ldrb	r0, [r0, #4]
   d5f8a:	f7ff bd5f 	b.w	d5a4c <HAL_SPI_Is_Enabled>
	...

000d5f90 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5f90:	4b04      	ldr	r3, [pc, #16]	; (d5fa4 <_GLOBAL__sub_I_System+0x14>)
   d5f92:	2000      	movs	r0, #0
   d5f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f98:	7018      	strb	r0, [r3, #0]
   d5f9a:	8058      	strh	r0, [r3, #2]
   d5f9c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f9e:	f7ff becd 	b.w	d5d3c <set_system_mode>
   d5fa2:	bf00      	nop
   d5fa4:	2003e3d0 	.word	0x2003e3d0

000d5fa8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5fac:	f002 fbf0 	bl	d8790 <strlen>
   d5fb0:	3801      	subs	r0, #1
   d5fb2:	1823      	adds	r3, r4, r0
   d5fb4:	4620      	mov	r0, r4
	while(i<j){
   d5fb6:	4298      	cmp	r0, r3
   d5fb8:	d206      	bcs.n	d5fc8 <_Z11str_reversePc+0x20>
		c = *i;
   d5fba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5fbc:	7819      	ldrb	r1, [r3, #0]
   d5fbe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5fc2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5fc6:	e7f6      	b.n	d5fb6 <_Z11str_reversePc+0xe>
   d5fc8:	bd10      	pop	{r4, pc}

000d5fca <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fca:	b570      	push	{r4, r5, r6, lr}
   d5fcc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5fce:	1e91      	subs	r1, r2, #2
   d5fd0:	2922      	cmp	r1, #34	; 0x22
   d5fd2:	d820      	bhi.n	d6016 <ultoa+0x4c>
   d5fd4:	4625      	mov	r5, r4
   d5fd6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5fd8:	b910      	cbnz	r0, d5fe0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5fda:	4423      	add	r3, r4
            *ptr++ = '0';
   d5fdc:	2230      	movs	r2, #48	; 0x30
   d5fde:	e00e      	b.n	d5ffe <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5fe0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5fe4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5fe8:	b2c1      	uxtb	r1, r0
   d5fea:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5fee:	2809      	cmp	r0, #9
                *ptr += '0';
   d5ff0:	bf94      	ite	ls
   d5ff2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5ff4:	3157      	addhi	r1, #87	; 0x57
   d5ff6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5ffa:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5ffc:	e7eb      	b.n	d5fd6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5ffe:	4299      	cmp	r1, r3
   d6000:	d202      	bcs.n	d6008 <ultoa+0x3e>
            *ptr++ = '0';
   d6002:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6006:	e7fa      	b.n	d5ffe <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6008:	2300      	movs	r3, #0
	str_reverse(buffer);
   d600a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d600c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d600e:	f7ff ffcb 	bl	d5fa8 <_Z11str_reversePc>
	return buffer;
   d6012:	4620      	mov	r0, r4
   d6014:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6016:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6018:	bd70      	pop	{r4, r5, r6, pc}

000d601a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d601a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d601c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d601e:	460c      	mov	r4, r1
   d6020:	4615      	mov	r5, r2
	if(a<0){
   d6022:	da0b      	bge.n	d603c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6028:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d602c:	bf14      	ite	ne
   d602e:	4258      	negne	r0, r3
   d6030:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6032:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6034:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d6036:	462a      	mov	r2, r5
   d6038:	4419      	add	r1, r3
   d603a:	e000      	b.n	d603e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d603c:	2301      	movs	r3, #1
   d603e:	f7ff ffc4 	bl	d5fca <ultoa>
	}
	return buffer;
}
   d6042:	4620      	mov	r0, r4
   d6044:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6048 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6048:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d604c:	ec59 8b10 	vmov	r8, r9, d0
   d6050:	4607      	mov	r7, r0
   d6052:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d6054:	2200      	movs	r2, #0
   d6056:	2300      	movs	r3, #0
   d6058:	ee10 0a10 	vmov	r0, s0
   d605c:	4649      	mov	r1, r9
   d605e:	f002 f8b5 	bl	d81cc <__aeabi_dcmplt>
   d6062:	b128      	cbz	r0, d6070 <_Z4dtoadhPc+0x28>
        val = -val;
   d6064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6068:	4699      	mov	r9, r3
        *sout++ = '-';
   d606a:	232d      	movs	r3, #45	; 0x2d
   d606c:	7033      	strb	r3, [r6, #0]
   d606e:	3601      	adds	r6, #1
   d6070:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6072:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6074:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6076:	b2d9      	uxtb	r1, r3
   d6078:	428f      	cmp	r7, r1
   d607a:	d902      	bls.n	d6082 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d607c:	4354      	muls	r4, r2
   d607e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6080:	e7f9      	b.n	d6076 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d6082:	4620      	mov	r0, r4
   d6084:	f001 fdca 	bl	d7c1c <__aeabi_i2d>
   d6088:	4642      	mov	r2, r8
   d608a:	464b      	mov	r3, r9
   d608c:	f001 fe2c 	bl	d7ce8 <__aeabi_dmul>
   d6090:	4682      	mov	sl, r0
   d6092:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6094:	f002 f988 	bl	d83a8 <__aeabi_d2ulz>
   d6098:	4680      	mov	r8, r0
   d609a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d609c:	f001 fdee 	bl	d7c7c <__aeabi_ul2d>
   d60a0:	4602      	mov	r2, r0
   d60a2:	460b      	mov	r3, r1
   d60a4:	4650      	mov	r0, sl
   d60a6:	4659      	mov	r1, fp
   d60a8:	f001 fc6a 	bl	d7980 <__aeabi_dsub>
   d60ac:	2200      	movs	r2, #0
   d60ae:	4b17      	ldr	r3, [pc, #92]	; (d610c <_Z4dtoadhPc+0xc4>)
   d60b0:	f002 f8a0 	bl	d81f4 <__aeabi_dcmpge>
   d60b4:	b118      	cbz	r0, d60be <_Z4dtoadhPc+0x76>
        fixed++;
   d60b6:	f118 0801 	adds.w	r8, r8, #1
   d60ba:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d60be:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d60c0:	4622      	mov	r2, r4
   d60c2:	462b      	mov	r3, r5
   d60c4:	4640      	mov	r0, r8
   d60c6:	4649      	mov	r1, r9
   d60c8:	f002 f956 	bl	d8378 <__aeabi_uldivmod>
   d60cc:	2301      	movs	r3, #1
   d60ce:	220a      	movs	r2, #10
   d60d0:	4631      	mov	r1, r6
   d60d2:	f7ff ff7a 	bl	d5fca <ultoa>
    if (prec) {
   d60d6:	b1af      	cbz	r7, d6104 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d60d8:	4630      	mov	r0, r6
   d60da:	f002 fb59 	bl	d8790 <strlen>
        *sout++ = '.';
   d60de:	232e      	movs	r3, #46	; 0x2e
   d60e0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d60e2:	3001      	adds	r0, #1
   d60e4:	4406      	add	r6, r0
   d60e6:	4622      	mov	r2, r4
   d60e8:	462b      	mov	r3, r5
   d60ea:	4640      	mov	r0, r8
   d60ec:	4649      	mov	r1, r9
   d60ee:	f002 f943 	bl	d8378 <__aeabi_uldivmod>
   d60f2:	463b      	mov	r3, r7
   d60f4:	4610      	mov	r0, r2
   d60f6:	4631      	mov	r1, r6
   d60f8:	220a      	movs	r2, #10
    }
}
   d60fa:	b001      	add	sp, #4
   d60fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d6100:	f7ff bf63 	b.w	d5fca <ultoa>
    }
}
   d6104:	b001      	add	sp, #4
   d6106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d610a:	bf00      	nop
   d610c:	3fe00000 	.word	0x3fe00000

000d6110 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6110:	b510      	push	{r4, lr}
   d6112:	4604      	mov	r4, r0
{
	free(buffer);
   d6114:	6800      	ldr	r0, [r0, #0]
   d6116:	f7ff fec5 	bl	d5ea4 <free>
}
   d611a:	4620      	mov	r0, r4
   d611c:	bd10      	pop	{r4, pc}

000d611e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d611e:	b510      	push	{r4, lr}
   d6120:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6122:	6800      	ldr	r0, [r0, #0]
   d6124:	b108      	cbz	r0, d612a <_ZN6String10invalidateEv+0xc>
   d6126:	f7ff febd 	bl	d5ea4 <free>
	buffer = NULL;
   d612a:	2300      	movs	r3, #0
   d612c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d612e:	60a3      	str	r3, [r4, #8]
   d6130:	6063      	str	r3, [r4, #4]
   d6132:	bd10      	pop	{r4, pc}

000d6134 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6134:	b538      	push	{r3, r4, r5, lr}
   d6136:	4604      	mov	r4, r0
   d6138:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d613a:	6800      	ldr	r0, [r0, #0]
   d613c:	3101      	adds	r1, #1
   d613e:	f7ff feb9 	bl	d5eb4 <realloc>
	if (newbuffer) {
   d6142:	b110      	cbz	r0, d614a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6144:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6148:	2001      	movs	r0, #1
	}
	return 0;
}
   d614a:	bd38      	pop	{r3, r4, r5, pc}

000d614c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d614c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d614e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6150:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6152:	b113      	cbz	r3, d615a <_ZN6String7reserveEj+0xe>
   d6154:	6843      	ldr	r3, [r0, #4]
   d6156:	428b      	cmp	r3, r1
   d6158:	d207      	bcs.n	d616a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d615a:	4620      	mov	r0, r4
   d615c:	f7ff ffea 	bl	d6134 <_ZN6String12changeBufferEj>
   d6160:	b120      	cbz	r0, d616c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6162:	68a3      	ldr	r3, [r4, #8]
   d6164:	b90b      	cbnz	r3, d616a <_ZN6String7reserveEj+0x1e>
   d6166:	6822      	ldr	r2, [r4, #0]
   d6168:	7013      	strb	r3, [r2, #0]
   d616a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d616c:	bd10      	pop	{r4, pc}

000d616e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d616e:	b570      	push	{r4, r5, r6, lr}
   d6170:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6172:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6174:	4604      	mov	r4, r0
   d6176:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6178:	f7ff ffe8 	bl	d614c <_ZN6String7reserveEj>
   d617c:	b918      	cbnz	r0, d6186 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d617e:	4620      	mov	r0, r4
   d6180:	f7ff ffcd 	bl	d611e <_ZN6String10invalidateEv>
		return *this;
   d6184:	e009      	b.n	d619a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6186:	462a      	mov	r2, r5
   d6188:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d618a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d618c:	6820      	ldr	r0, [r4, #0]
   d618e:	f002 fab1 	bl	d86f4 <memcpy>
	buffer[len] = 0;
   d6192:	6822      	ldr	r2, [r4, #0]
   d6194:	68a3      	ldr	r3, [r4, #8]
   d6196:	2100      	movs	r1, #0
   d6198:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d619a:	4620      	mov	r0, r4
   d619c:	bd70      	pop	{r4, r5, r6, pc}

000d619e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d619e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61a0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d61a2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61a4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61a6:	6043      	str	r3, [r0, #4]
	len = 0;
   d61a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61aa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d61ac:	460d      	mov	r5, r1
   d61ae:	b139      	cbz	r1, d61c0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d61b0:	4608      	mov	r0, r1
   d61b2:	f002 faed 	bl	d8790 <strlen>
   d61b6:	4629      	mov	r1, r5
   d61b8:	4602      	mov	r2, r0
   d61ba:	4620      	mov	r0, r4
   d61bc:	f7ff ffd7 	bl	d616e <_ZN6String4copyEPKcj>
}
   d61c0:	4620      	mov	r0, r4
   d61c2:	bd38      	pop	{r3, r4, r5, pc}

000d61c4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61c4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d61c6:	b510      	push	{r4, lr}
   d61c8:	460b      	mov	r3, r1
   d61ca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61cc:	d007      	beq.n	d61de <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61ce:	6809      	ldr	r1, [r1, #0]
   d61d0:	b119      	cbz	r1, d61da <_ZN6StringaSERKS_+0x16>
   d61d2:	689a      	ldr	r2, [r3, #8]
   d61d4:	f7ff ffcb 	bl	d616e <_ZN6String4copyEPKcj>
   d61d8:	e001      	b.n	d61de <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d61da:	f7ff ffa0 	bl	d611e <_ZN6String10invalidateEv>

	return *this;
}
   d61de:	4620      	mov	r0, r4
   d61e0:	bd10      	pop	{r4, pc}

000d61e2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61e2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61e4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61e6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61ea:	6043      	str	r3, [r0, #4]
	len = 0;
   d61ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61ee:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d61f0:	f7ff ffe8 	bl	d61c4 <_ZN6StringaSERKS_>
}
   d61f4:	4620      	mov	r0, r4
   d61f6:	bd10      	pop	{r4, pc}

000d61f8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d61f8:	b538      	push	{r3, r4, r5, lr}
   d61fa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d61fc:	460c      	mov	r4, r1
   d61fe:	b141      	cbz	r1, d6212 <_ZN6StringaSEPKc+0x1a>
   d6200:	4608      	mov	r0, r1
   d6202:	f002 fac5 	bl	d8790 <strlen>
   d6206:	4621      	mov	r1, r4
   d6208:	4602      	mov	r2, r0
   d620a:	4628      	mov	r0, r5
   d620c:	f7ff ffaf 	bl	d616e <_ZN6String4copyEPKcj>
   d6210:	e001      	b.n	d6216 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6212:	f7ff ff84 	bl	d611e <_ZN6String10invalidateEv>

	return *this;
}
   d6216:	4628      	mov	r0, r5
   d6218:	bd38      	pop	{r3, r4, r5, pc}

000d621a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d621a:	b510      	push	{r4, lr}
   d621c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d621e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6220:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6222:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6224:	6063      	str	r3, [r4, #4]
	len = 0;
   d6226:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6228:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d622a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d622c:	a901      	add	r1, sp, #4
   d622e:	f7ff fef4 	bl	d601a <itoa>
	*this = buf;
   d6232:	a901      	add	r1, sp, #4
   d6234:	4620      	mov	r0, r4
   d6236:	f7ff ffdf 	bl	d61f8 <_ZN6StringaSEPKc>
}
   d623a:	4620      	mov	r0, r4
   d623c:	b00a      	add	sp, #40	; 0x28
   d623e:	bd10      	pop	{r4, pc}

000d6240 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6240:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6242:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6244:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6246:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6248:	6043      	str	r3, [r0, #4]
	len = 0;
   d624a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d624c:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d624e:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6250:	ee10 0a10 	vmov	r0, s0
   d6254:	b2cd      	uxtb	r5, r1
   d6256:	f001 fcf3 	bl	d7c40 <__aeabi_f2d>
   d625a:	ec41 0b10 	vmov	d0, r0, r1
   d625e:	a901      	add	r1, sp, #4
   d6260:	4628      	mov	r0, r5
   d6262:	f7ff fef1 	bl	d6048 <_Z4dtoadhPc>
        *this = buf;
   d6266:	a901      	add	r1, sp, #4
   d6268:	4620      	mov	r0, r4
   d626a:	f7ff ffc5 	bl	d61f8 <_ZN6StringaSEPKc>
}
   d626e:	4620      	mov	r0, r4
   d6270:	b00b      	add	sp, #44	; 0x2c
   d6272:	bd30      	pop	{r4, r5, pc}

000d6274 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6274:	b570      	push	{r4, r5, r6, lr}
   d6276:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6278:	460e      	mov	r6, r1
   d627a:	b909      	cbnz	r1, d6280 <_ZN6String6concatEPKcj+0xc>
   d627c:	2000      	movs	r0, #0
   d627e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6280:	b16a      	cbz	r2, d629e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6282:	6883      	ldr	r3, [r0, #8]
   d6284:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6286:	4629      	mov	r1, r5
   d6288:	f7ff ff60 	bl	d614c <_ZN6String7reserveEj>
   d628c:	2800      	cmp	r0, #0
   d628e:	d0f5      	beq.n	d627c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6290:	6820      	ldr	r0, [r4, #0]
   d6292:	68a3      	ldr	r3, [r4, #8]
   d6294:	4631      	mov	r1, r6
   d6296:	4418      	add	r0, r3
   d6298:	f002 fa72 	bl	d8780 <strcpy>
	len = newlen;
   d629c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d629e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d62a0:	bd70      	pop	{r4, r5, r6, pc}

000d62a2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d62a2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d62a4:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d62a6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d62aa:	2201      	movs	r2, #1
   d62ac:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d62ae:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d62b2:	f7ff ffdf 	bl	d6274 <_ZN6String6concatEPKcj>
}
   d62b6:	b003      	add	sp, #12
   d62b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d62bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62be:	688a      	ldr	r2, [r1, #8]
   d62c0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62c2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62c4:	f7ff ffd6 	bl	d6274 <_ZN6String6concatEPKcj>
   d62c8:	b910      	cbnz	r0, d62d0 <_ZplRK15StringSumHelperRK6String+0x14>
   d62ca:	4620      	mov	r0, r4
   d62cc:	f7ff ff27 	bl	d611e <_ZN6String10invalidateEv>
	return a;
}
   d62d0:	4620      	mov	r0, r4
   d62d2:	bd10      	pop	{r4, pc}

000d62d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d62d4:	b538      	push	{r3, r4, r5, lr}
   d62d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d62d8:	460d      	mov	r5, r1
   d62da:	b141      	cbz	r1, d62ee <_ZplRK15StringSumHelperPKc+0x1a>
   d62dc:	4608      	mov	r0, r1
   d62de:	f002 fa57 	bl	d8790 <strlen>
   d62e2:	4629      	mov	r1, r5
   d62e4:	4602      	mov	r2, r0
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffc4 	bl	d6274 <_ZN6String6concatEPKcj>
   d62ec:	b910      	cbnz	r0, d62f4 <_ZplRK15StringSumHelperPKc+0x20>
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ff15 	bl	d611e <_ZN6String10invalidateEv>
	return a;
}
   d62f4:	4620      	mov	r0, r4
   d62f6:	bd38      	pop	{r3, r4, r5, pc}

000d62f8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62f8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62fa:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62fc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62fe:	b912      	cbnz	r2, d6306 <_ZNK6String6equalsEPKc+0xe>
   d6300:	b919      	cbnz	r1, d630a <_ZNK6String6equalsEPKc+0x12>
   d6302:	2001      	movs	r0, #1
   d6304:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6306:	b911      	cbnz	r1, d630e <_ZNK6String6equalsEPKc+0x16>
   d6308:	6803      	ldr	r3, [r0, #0]
   d630a:	7818      	ldrb	r0, [r3, #0]
   d630c:	e002      	b.n	d6314 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d630e:	6800      	ldr	r0, [r0, #0]
   d6310:	f002 fa2c 	bl	d876c <strcmp>
   d6314:	fab0 f080 	clz	r0, r0
   d6318:	0940      	lsrs	r0, r0, #5
}
   d631a:	bd08      	pop	{r3, pc}

000d631c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d631c:	4802      	ldr	r0, [pc, #8]	; (d6328 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d631e:	2300      	movs	r3, #0
   d6320:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6322:	f7ff bbdb 	b.w	d5adc <os_mutex_recursive_create>
   d6326:	bf00      	nop
   d6328:	2003e3d8 	.word	0x2003e3d8

000d632c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d632e:	4606      	mov	r6, r0
   d6330:	460d      	mov	r5, r1
   d6332:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6334:	2400      	movs	r4, #0
  while (size--) {
   d6336:	42bd      	cmp	r5, r7
   d6338:	d00c      	beq.n	d6354 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d633a:	6833      	ldr	r3, [r6, #0]
   d633c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6340:	689b      	ldr	r3, [r3, #8]
   d6342:	4630      	mov	r0, r6
   d6344:	4798      	blx	r3
     if (chunk>=0)
   d6346:	2800      	cmp	r0, #0
   d6348:	db01      	blt.n	d634e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d634a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d634c:	e7f3      	b.n	d6336 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d634e:	2c00      	cmp	r4, #0
   d6350:	bf08      	it	eq
   d6352:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6354:	4620      	mov	r0, r4
   d6356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6358 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6358:	b570      	push	{r4, r5, r6, lr}
   d635a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d635c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d635e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6360:	b149      	cbz	r1, d6376 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6362:	f002 fa15 	bl	d8790 <strlen>
   d6366:	682b      	ldr	r3, [r5, #0]
   d6368:	4602      	mov	r2, r0
   d636a:	4621      	mov	r1, r4
   d636c:	4628      	mov	r0, r5
   d636e:	68db      	ldr	r3, [r3, #12]
    }
   d6370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6374:	4718      	bx	r3
    }
   d6376:	bd70      	pop	{r4, r5, r6, pc}

000d6378 <_ZN5Print5printEPKc>:
   d6378:	b508      	push	{r3, lr}
   d637a:	f7ff ffed 	bl	d6358 <_ZN5Print5writeEPKc>
   d637e:	bd08      	pop	{r3, pc}

000d6380 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6380:	6803      	ldr	r3, [r0, #0]
   d6382:	689b      	ldr	r3, [r3, #8]
   d6384:	4718      	bx	r3

000d6386 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6386:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6388:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d638a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d638c:	f7ff fff8 	bl	d6380 <_ZN5Print5printEc>
  n += print('\n');
   d6390:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6392:	4604      	mov	r4, r0
  n += print('\n');
   d6394:	4628      	mov	r0, r5
   d6396:	f7ff fff3 	bl	d6380 <_ZN5Print5printEc>
  return n;
}
   d639a:	4420      	add	r0, r4
   d639c:	bd38      	pop	{r3, r4, r5, pc}

000d639e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d639e:	b538      	push	{r3, r4, r5, lr}
   d63a0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d63a2:	f7ff ffd9 	bl	d6358 <_ZN5Print5writeEPKc>
   d63a6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d63a8:	4628      	mov	r0, r5
   d63aa:	f7ff ffec 	bl	d6386 <_ZN5Print7printlnEv>
  return n;
}
   d63ae:	4420      	add	r0, r4
   d63b0:	bd38      	pop	{r3, r4, r5, pc}

000d63b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d63b2:	b530      	push	{r4, r5, lr}
   d63b4:	b08b      	sub	sp, #44	; 0x2c
   d63b6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d63b8:	2100      	movs	r1, #0
   d63ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d63be:	2a01      	cmp	r2, #1
   d63c0:	bf98      	it	ls
   d63c2:	220a      	movls	r2, #10
   d63c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d63c8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d63cc:	fb05 3312 	mls	r3, r5, r2, r3
   d63d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d63d4:	2b09      	cmp	r3, #9
   d63d6:	bf94      	ite	ls
   d63d8:	3330      	addls	r3, #48	; 0x30
   d63da:	3337      	addhi	r3, #55	; 0x37
   d63dc:	b2db      	uxtb	r3, r3
   d63de:	4621      	mov	r1, r4
   d63e0:	f804 3901 	strb.w	r3, [r4], #-1
   d63e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d63e6:	2d00      	cmp	r5, #0
   d63e8:	d1ee      	bne.n	d63c8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d63ea:	f7ff ffb5 	bl	d6358 <_ZN5Print5writeEPKc>
}
   d63ee:	b00b      	add	sp, #44	; 0x2c
   d63f0:	bd30      	pop	{r4, r5, pc}

000d63f2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d63f2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d63f4:	b92a      	cbnz	r2, d6402 <_ZN5Print5printEmi+0x10>
   d63f6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d63f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d63fc:	689b      	ldr	r3, [r3, #8]
   d63fe:	b2c9      	uxtb	r1, r1
   d6400:	4718      	bx	r3
  else return printNumber(n, base);
   d6402:	b2d2      	uxtb	r2, r2
}
   d6404:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6408:	f7ff bfd3 	b.w	d63b2 <_ZN5Print11printNumberEmh>

000d640c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d640c:	f7ff bff1 	b.w	d63f2 <_ZN5Print5printEmi>

000d6410 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6414:	4607      	mov	r7, r0
   d6416:	460e      	mov	r6, r1
  if (base == 0) {
   d6418:	4615      	mov	r5, r2
   d641a:	b92a      	cbnz	r2, d6428 <_ZN5Print5printEli+0x18>
    return write(n);
   d641c:	6803      	ldr	r3, [r0, #0]
   d641e:	b2c9      	uxtb	r1, r1
   d6420:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6426:	4718      	bx	r3
  } else if (base == 10) {
   d6428:	2a0a      	cmp	r2, #10
   d642a:	d102      	bne.n	d6432 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d642c:	2900      	cmp	r1, #0
   d642e:	da01      	bge.n	d6434 <_ZN5Print5printEli+0x24>
   d6430:	e004      	b.n	d643c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6432:	b2d2      	uxtb	r2, r2
  }
}
   d6434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6438:	f7ff bfbb 	b.w	d63b2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d643c:	212d      	movs	r1, #45	; 0x2d
   d643e:	f7ff ff9f 	bl	d6380 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6442:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6444:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6446:	4271      	negs	r1, r6
   d6448:	4638      	mov	r0, r7
   d644a:	f7ff ffb2 	bl	d63b2 <_ZN5Print11printNumberEmh>
   d644e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6454 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d6454:	b538      	push	{r3, r4, r5, lr}
   d6456:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6458:	f7ff ffda 	bl	d6410 <_ZN5Print5printEli>
   d645c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d645e:	4628      	mov	r0, r5
   d6460:	f7ff ff91 	bl	d6386 <_ZN5Print7printlnEv>
  return n;
}
   d6464:	4420      	add	r0, r4
   d6466:	bd38      	pop	{r3, r4, r5, pc}

000d6468 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d646c:	ec57 6b10 	vmov	r6, r7, d0
   d6470:	4682      	mov	sl, r0
   d6472:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6474:	ee10 2a10 	vmov	r2, s0
   d6478:	463b      	mov	r3, r7
   d647a:	ee10 0a10 	vmov	r0, s0
   d647e:	4639      	mov	r1, r7
   d6480:	f001 fecc 	bl	d821c <__aeabi_dcmpun>
   d6484:	b108      	cbz	r0, d648a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6486:	4948      	ldr	r1, [pc, #288]	; (d65a8 <_ZN5Print10printFloatEdh+0x140>)
   d6488:	e012      	b.n	d64b0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d648a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d648e:	f04f 32ff 	mov.w	r2, #4294967295
   d6492:	4b46      	ldr	r3, [pc, #280]	; (d65ac <_ZN5Print10printFloatEdh+0x144>)
   d6494:	4630      	mov	r0, r6
   d6496:	4649      	mov	r1, r9
   d6498:	f001 fec0 	bl	d821c <__aeabi_dcmpun>
   d649c:	b968      	cbnz	r0, d64ba <_ZN5Print10printFloatEdh+0x52>
   d649e:	f04f 32ff 	mov.w	r2, #4294967295
   d64a2:	4b42      	ldr	r3, [pc, #264]	; (d65ac <_ZN5Print10printFloatEdh+0x144>)
   d64a4:	4630      	mov	r0, r6
   d64a6:	4649      	mov	r1, r9
   d64a8:	f001 fe9a 	bl	d81e0 <__aeabi_dcmple>
   d64ac:	b928      	cbnz	r0, d64ba <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64ae:	4940      	ldr	r1, [pc, #256]	; (d65b0 <_ZN5Print10printFloatEdh+0x148>)
   d64b0:	4650      	mov	r0, sl
   d64b2:	f7ff ff51 	bl	d6358 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d64b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d64ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64be:	4b3d      	ldr	r3, [pc, #244]	; (d65b4 <_ZN5Print10printFloatEdh+0x14c>)
   d64c0:	4630      	mov	r0, r6
   d64c2:	4639      	mov	r1, r7
   d64c4:	f001 fea0 	bl	d8208 <__aeabi_dcmpgt>
   d64c8:	b108      	cbz	r0, d64ce <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64ca:	493b      	ldr	r1, [pc, #236]	; (d65b8 <_ZN5Print10printFloatEdh+0x150>)
   d64cc:	e7f0      	b.n	d64b0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d64ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64d2:	4b3a      	ldr	r3, [pc, #232]	; (d65bc <_ZN5Print10printFloatEdh+0x154>)
   d64d4:	4630      	mov	r0, r6
   d64d6:	4639      	mov	r1, r7
   d64d8:	f001 fe78 	bl	d81cc <__aeabi_dcmplt>
   d64dc:	2800      	cmp	r0, #0
   d64de:	d1f4      	bne.n	d64ca <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d64e0:	2200      	movs	r2, #0
   d64e2:	2300      	movs	r3, #0
   d64e4:	4630      	mov	r0, r6
   d64e6:	4639      	mov	r1, r7
   d64e8:	f001 fe70 	bl	d81cc <__aeabi_dcmplt>
   d64ec:	b140      	cbz	r0, d6500 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d64ee:	212d      	movs	r1, #45	; 0x2d
   d64f0:	4650      	mov	r0, sl
   d64f2:	f7ff ff45 	bl	d6380 <_ZN5Print5printEc>
     number = -number;
   d64f6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d64fa:	4604      	mov	r4, r0
     number = -number;
   d64fc:	461f      	mov	r7, r3
   d64fe:	e000      	b.n	d6502 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6500:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6502:	492f      	ldr	r1, [pc, #188]	; (d65c0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6504:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6508:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d650a:	fa5f f388 	uxtb.w	r3, r8
   d650e:	429d      	cmp	r5, r3
   d6510:	d906      	bls.n	d6520 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6512:	2200      	movs	r2, #0
   d6514:	4b2b      	ldr	r3, [pc, #172]	; (d65c4 <_ZN5Print10printFloatEdh+0x15c>)
   d6516:	f001 fd11 	bl	d7f3c <__aeabi_ddiv>
   d651a:	f108 0801 	add.w	r8, r8, #1
   d651e:	e7f4      	b.n	d650a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6520:	4632      	mov	r2, r6
   d6522:	463b      	mov	r3, r7
   d6524:	f001 fa2e 	bl	d7984 <__adddf3>
   d6528:	460f      	mov	r7, r1
   d652a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d652c:	f001 feb4 	bl	d8298 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6530:	220a      	movs	r2, #10
   d6532:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6534:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6536:	4650      	mov	r0, sl
   d6538:	f7ff ff3b 	bl	d63b2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d653c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d653e:	b37d      	cbz	r5, d65a0 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6540:	4640      	mov	r0, r8
   d6542:	f001 fb5b 	bl	d7bfc <__aeabi_ui2d>
   d6546:	4602      	mov	r2, r0
   d6548:	460b      	mov	r3, r1
   d654a:	4630      	mov	r0, r6
   d654c:	4639      	mov	r1, r7
   d654e:	f001 fa17 	bl	d7980 <__aeabi_dsub>
   d6552:	4606      	mov	r6, r0
   d6554:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6556:	4650      	mov	r0, sl
   d6558:	491b      	ldr	r1, [pc, #108]	; (d65c8 <_ZN5Print10printFloatEdh+0x160>)
   d655a:	f7ff fefd 	bl	d6358 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d655e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6560:	4b18      	ldr	r3, [pc, #96]	; (d65c4 <_ZN5Print10printFloatEdh+0x15c>)
   d6562:	2200      	movs	r2, #0
   d6564:	4630      	mov	r0, r6
   d6566:	4639      	mov	r1, r7
   d6568:	f001 fbbe 	bl	d7ce8 <__aeabi_dmul>
   d656c:	460f      	mov	r7, r1
   d656e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6570:	f001 fe6a 	bl	d8248 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6574:	220a      	movs	r2, #10
   d6576:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6578:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d657a:	4650      	mov	r0, sl
   d657c:	f7ff ff48 	bl	d6410 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6580:	4404      	add	r4, r0
    remainder -= toPrint;
   d6582:	4640      	mov	r0, r8
   d6584:	f001 fb4a 	bl	d7c1c <__aeabi_i2d>
   d6588:	4602      	mov	r2, r0
   d658a:	460b      	mov	r3, r1
   d658c:	4630      	mov	r0, r6
   d658e:	4639      	mov	r1, r7
   d6590:	f001 f9f6 	bl	d7980 <__aeabi_dsub>
   d6594:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6596:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d659a:	4606      	mov	r6, r0
   d659c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d659e:	d1df      	bne.n	d6560 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d65a0:	4620      	mov	r0, r4
   d65a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65a6:	bf00      	nop
   d65a8:	000d9050 	.word	0x000d9050
   d65ac:	7fefffff 	.word	0x7fefffff
   d65b0:	000d9058 	.word	0x000d9058
   d65b4:	41efffff 	.word	0x41efffff
   d65b8:	000d9054 	.word	0x000d9054
   d65bc:	c1efffff 	.word	0xc1efffff
   d65c0:	3fe00000 	.word	0x3fe00000
   d65c4:	40240000 	.word	0x40240000
   d65c8:	000d88e4 	.word	0x000d88e4

000d65cc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d65cc:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d65ce:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d65d0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d65d2:	f7ff ff49 	bl	d6468 <_ZN5Print10printFloatEdh>
   d65d6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d65d8:	4628      	mov	r0, r5
   d65da:	f7ff fed4 	bl	d6386 <_ZN5Print7printlnEv>
  return n;
}
   d65de:	4420      	add	r0, r4
   d65e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d65e4:	4b01      	ldr	r3, [pc, #4]	; (d65ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d65e6:	4a02      	ldr	r2, [pc, #8]	; (d65f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d65e8:	601a      	str	r2, [r3, #0]
   d65ea:	4770      	bx	lr
   d65ec:	2003e3dc 	.word	0x2003e3dc
   d65f0:	000d910f 	.word	0x000d910f

000d65f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d65f4:	4b02      	ldr	r3, [pc, #8]	; (d6600 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d65f6:	681a      	ldr	r2, [r3, #0]
   d65f8:	4b02      	ldr	r3, [pc, #8]	; (d6604 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d65fa:	601a      	str	r2, [r3, #0]
   d65fc:	4770      	bx	lr
   d65fe:	bf00      	nop
   d6600:	2003dbe0 	.word	0x2003dbe0
   d6604:	2003e3e0 	.word	0x2003e3e0

000d6608 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6608:	2100      	movs	r1, #0
   d660a:	f7ff bb9f 	b.w	d5d4c <system_delay_ms>

000d660e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d660e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6610:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6612:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6614:	b113      	cbz	r3, d661c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6616:	2203      	movs	r2, #3
   d6618:	4601      	mov	r1, r0
   d661a:	4798      	blx	r3
    }
   d661c:	4620      	mov	r0, r4
   d661e:	bd10      	pop	{r4, pc}

000d6620 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6620:	b510      	push	{r4, lr}
   d6622:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6624:	f7ff fff3 	bl	d660e <_ZNSt14_Function_baseD1Ev>
   d6628:	4620      	mov	r0, r4
   d662a:	bd10      	pop	{r4, pc}

000d662c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d662c:	4803      	ldr	r0, [pc, #12]	; (d663c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d662e:	4a04      	ldr	r2, [pc, #16]	; (d6640 <_GLOBAL__sub_I_RGB+0x14>)
   d6630:	4904      	ldr	r1, [pc, #16]	; (d6644 <_GLOBAL__sub_I_RGB+0x18>)
   d6632:	2300      	movs	r3, #0
   d6634:	6083      	str	r3, [r0, #8]
   d6636:	f001 b84f 	b.w	d76d8 <__aeabi_atexit>
   d663a:	bf00      	nop
   d663c:	2003e3e4 	.word	0x2003e3e4
   d6640:	2003dc48 	.word	0x2003dc48
   d6644:	000d6621 	.word	0x000d6621

000d6648 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6648:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d664a:	4b0c      	ldr	r3, [pc, #48]	; (d667c <serialEventRun+0x34>)
   d664c:	b133      	cbz	r3, d665c <serialEventRun+0x14>
   d664e:	f000 f959 	bl	d6904 <_Z16_fetch_usbserialv>
   d6652:	6803      	ldr	r3, [r0, #0]
   d6654:	691b      	ldr	r3, [r3, #16]
   d6656:	4798      	blx	r3
   d6658:	2800      	cmp	r0, #0
   d665a:	dc09      	bgt.n	d6670 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d665c:	4b08      	ldr	r3, [pc, #32]	; (d6680 <serialEventRun+0x38>)
   d665e:	b163      	cbz	r3, d667a <serialEventRun+0x32>
   d6660:	f000 f9d2 	bl	d6a08 <_Z22__fetch_global_Serial1v>
   d6664:	6803      	ldr	r3, [r0, #0]
   d6666:	691b      	ldr	r3, [r3, #16]
   d6668:	4798      	blx	r3
   d666a:	2800      	cmp	r0, #0
   d666c:	dc03      	bgt.n	d6676 <serialEventRun+0x2e>
   d666e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6670:	f3af 8000 	nop.w
   d6674:	e7f2      	b.n	d665c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6676:	f3af 8000 	nop.w
   d667a:	bd08      	pop	{r3, pc}
	...

000d6684 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6684:	b508      	push	{r3, lr}
	serialEventRun();
   d6686:	f7ff ffdf 	bl	d6648 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d668a:	f7ff f9ff 	bl	d5a8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d668e:	4b01      	ldr	r3, [pc, #4]	; (d6694 <_post_loop+0x10>)
   d6690:	6018      	str	r0, [r3, #0]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	2003e734 	.word	0x2003e734

000d6698 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6698:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d669a:	2300      	movs	r3, #0
   d669c:	9300      	str	r3, [sp, #0]
   d669e:	461a      	mov	r2, r3
   d66a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66a4:	f7ff fb6c 	bl	d5d80 <system_ctrl_set_result>
}
   d66a8:	b003      	add	sp, #12
   d66aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d66b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d66b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d66b2:	8843      	ldrh	r3, [r0, #2]
   d66b4:	2b0a      	cmp	r3, #10
   d66b6:	d008      	beq.n	d66ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d66b8:	2b50      	cmp	r3, #80	; 0x50
   d66ba:	d109      	bne.n	d66d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d66bc:	4b09      	ldr	r3, [pc, #36]	; (d66e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d66be:	681b      	ldr	r3, [r3, #0]
   d66c0:	b13b      	cbz	r3, d66d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d66c2:	b003      	add	sp, #12
   d66c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d66c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d66ca:	f7ff ffe5 	bl	d6698 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d66ce:	e006      	b.n	d66de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66d0:	2300      	movs	r3, #0
   d66d2:	9300      	str	r3, [sp, #0]
   d66d4:	461a      	mov	r2, r3
   d66d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66da:	f7ff fb51 	bl	d5d80 <system_ctrl_set_result>
        break;
    }
}
   d66de:	b003      	add	sp, #12
   d66e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d66e4:	2003e3f4 	.word	0x2003e3f4

000d66e8 <module_user_init_hook>:

void module_user_init_hook()
{
   d66e8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d66ea:	f7ff f9bf 	bl	d5a6c <HAL_RNG_GetRandomNumber>
   d66ee:	4604      	mov	r4, r0
    srand(seed);
   d66f0:	f002 f814 	bl	d871c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d66f4:	4b07      	ldr	r3, [pc, #28]	; (d6714 <module_user_init_hook+0x2c>)
   d66f6:	b113      	cbz	r3, d66fe <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d66f8:	4620      	mov	r0, r4
   d66fa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d66fe:	2100      	movs	r1, #0
   d6700:	4804      	ldr	r0, [pc, #16]	; (d6714 <module_user_init_hook+0x2c>)
   d6702:	f7ff fbbf 	bl	d5e84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6706:	2100      	movs	r1, #0
   d6708:	4803      	ldr	r0, [pc, #12]	; (d6718 <module_user_init_hook+0x30>)
}
   d670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d670e:	f7ff bb2d 	b.w	d5d6c <system_ctrl_set_app_request_handler>
   d6712:	bf00      	nop
   d6714:	00000000 	.word	0x00000000
   d6718:	000d66b1 	.word	0x000d66b1

000d671c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d671c:	4770      	bx	lr

000d671e <_ZN9IPAddressD0Ev>:
   d671e:	b510      	push	{r4, lr}
   d6720:	2118      	movs	r1, #24
   d6722:	4604      	mov	r4, r0
   d6724:	f000 ffdd 	bl	d76e2 <_ZdlPvj>
   d6728:	4620      	mov	r0, r4
   d672a:	bd10      	pop	{r4, pc}

000d672c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d672c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d672e:	7d03      	ldrb	r3, [r0, #20]
   d6730:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6732:	b08d      	sub	sp, #52	; 0x34
   d6734:	460e      	mov	r6, r1
   d6736:	f100 0704 	add.w	r7, r0, #4
   d673a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d673e:	d002      	beq.n	d6746 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6740:	f100 0508 	add.w	r5, r0, #8
   d6744:	e018      	b.n	d6778 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6746:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6748:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d674a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d674e:	232f      	movs	r3, #47	; 0x2f
   d6750:	462a      	mov	r2, r5
   d6752:	200a      	movs	r0, #10
   d6754:	f7ff f9ca 	bl	d5aec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6758:	4628      	mov	r0, r5
   d675a:	f002 f819 	bl	d8790 <strlen>
   d675e:	6833      	ldr	r3, [r6, #0]
   d6760:	4602      	mov	r2, r0
   d6762:	68db      	ldr	r3, [r3, #12]
   d6764:	4629      	mov	r1, r5
   d6766:	4630      	mov	r0, r6
   d6768:	4798      	blx	r3
   d676a:	e00f      	b.n	d678c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d676c:	b124      	cbz	r4, d6778 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d676e:	212e      	movs	r1, #46	; 0x2e
   d6770:	4630      	mov	r0, r6
   d6772:	f7ff fe05 	bl	d6380 <_ZN5Print5printEc>
   d6776:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6778:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d677c:	220a      	movs	r2, #10
   d677e:	4630      	mov	r0, r6
   d6780:	f7ff fe44 	bl	d640c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6784:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6786:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6788:	d1f0      	bne.n	d676c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d678a:	4620      	mov	r0, r4
    }
    return n;
}
   d678c:	b00d      	add	sp, #52	; 0x34
   d678e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6790 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6790:	b510      	push	{r4, lr}
   d6792:	4b05      	ldr	r3, [pc, #20]	; (d67a8 <_ZN9IPAddressC1Ev+0x18>)
   d6794:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6796:	2211      	movs	r2, #17
   d6798:	f840 3b04 	str.w	r3, [r0], #4
   d679c:	2100      	movs	r1, #0
   d679e:	f001 ffb4 	bl	d870a <memset>
{
    clear();
}
   d67a2:	4620      	mov	r0, r4
   d67a4:	bd10      	pop	{r4, pc}
   d67a6:	bf00      	nop
   d67a8:	000d9168 	.word	0x000d9168

000d67ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d67ac:	4603      	mov	r3, r0
   d67ae:	4a07      	ldr	r2, [pc, #28]	; (d67cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67b0:	b510      	push	{r4, lr}
   d67b2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d67b6:	f101 0210 	add.w	r2, r1, #16
   d67ba:	f851 4b04 	ldr.w	r4, [r1], #4
   d67be:	f843 4b04 	str.w	r4, [r3], #4
   d67c2:	4291      	cmp	r1, r2
   d67c4:	d1f9      	bne.n	d67ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d67c6:	780a      	ldrb	r2, [r1, #0]
   d67c8:	701a      	strb	r2, [r3, #0]
}
   d67ca:	bd10      	pop	{r4, pc}
   d67cc:	000d9168 	.word	0x000d9168

000d67d0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d67d0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d67d2:	2b04      	cmp	r3, #4
   d67d4:	d101      	bne.n	d67da <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d67d6:	6840      	ldr	r0, [r0, #4]
   d67d8:	e008      	b.n	d67ec <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d67da:	2b06      	cmp	r3, #6
   d67dc:	d10a      	bne.n	d67f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d67de:	6843      	ldr	r3, [r0, #4]
   d67e0:	b153      	cbz	r3, d67f8 <_ZNK9IPAddresscvbEv+0x28>
   d67e2:	6883      	ldr	r3, [r0, #8]
   d67e4:	b143      	cbz	r3, d67f8 <_ZNK9IPAddresscvbEv+0x28>
   d67e6:	68c3      	ldr	r3, [r0, #12]
   d67e8:	b133      	cbz	r3, d67f8 <_ZNK9IPAddresscvbEv+0x28>
   d67ea:	6900      	ldr	r0, [r0, #16]
   d67ec:	3000      	adds	r0, #0
   d67ee:	bf18      	it	ne
   d67f0:	2001      	movne	r0, #1
   d67f2:	4770      	bx	lr
   d67f4:	2000      	movs	r0, #0
   d67f6:	4770      	bx	lr
   d67f8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d67fa:	4770      	bx	lr

000d67fc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d67fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d67fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6802:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6806:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d680a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d680e:	2304      	movs	r3, #4
   d6810:	6041      	str	r1, [r0, #4]
   d6812:	7503      	strb	r3, [r0, #20]
   d6814:	bd10      	pop	{r4, pc}

000d6816 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6816:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6818:	780d      	ldrb	r5, [r1, #0]
   d681a:	788b      	ldrb	r3, [r1, #2]
   d681c:	784a      	ldrb	r2, [r1, #1]
   d681e:	78c9      	ldrb	r1, [r1, #3]
   d6820:	9100      	str	r1, [sp, #0]
   d6822:	4629      	mov	r1, r5
   d6824:	f7ff ffea 	bl	d67fc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6828:	b003      	add	sp, #12
   d682a:	bd30      	pop	{r4, r5, pc}

000d682c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d682c:	b510      	push	{r4, lr}
   d682e:	4b03      	ldr	r3, [pc, #12]	; (d683c <_ZN9IPAddressC1EPKh+0x10>)
   d6830:	6003      	str	r3, [r0, #0]
   d6832:	4604      	mov	r4, r0
{
    *this = address;
   d6834:	f7ff ffef 	bl	d6816 <_ZN9IPAddressaSEPKh>
}
   d6838:	4620      	mov	r0, r4
   d683a:	bd10      	pop	{r4, pc}
   d683c:	000d9168 	.word	0x000d9168

000d6840 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6840:	7441      	strb	r1, [r0, #17]
   d6842:	4770      	bx	lr

000d6844 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6844:	4770      	bx	lr

000d6846 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6846:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6848:	2100      	movs	r1, #0
   d684a:	7c00      	ldrb	r0, [r0, #16]
   d684c:	f7ff fa4e 	bl	d5cec <HAL_USB_USART_Receive_Data>
}
   d6850:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6854:	bf28      	it	cs
   d6856:	f04f 30ff 	movcs.w	r0, #4294967295
   d685a:	bd08      	pop	{r3, pc}

000d685c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d685c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d685e:	2101      	movs	r1, #1
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7ff fa43 	bl	d5cec <HAL_USB_USART_Receive_Data>
}
   d6866:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d686a:	bf28      	it	cs
   d686c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6870:	bd08      	pop	{r3, pc}

000d6872 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6872:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6874:	7c00      	ldrb	r0, [r0, #16]
   d6876:	f7ff fa31 	bl	d5cdc <HAL_USB_USART_Available_Data_For_Write>
}
   d687a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d687e:	bd08      	pop	{r3, pc}

000d6880 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6880:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6882:	7c00      	ldrb	r0, [r0, #16]
   d6884:	f7ff fa22 	bl	d5ccc <HAL_USB_USART_Available_Data>
}
   d6888:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d688c:	bd08      	pop	{r3, pc}

000d688e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d688e:	7c00      	ldrb	r0, [r0, #16]
   d6890:	f7ff ba3c 	b.w	d5d0c <HAL_USB_USART_Flush_Data>

000d6894 <_ZN9USBSerialD0Ev>:
   d6894:	b510      	push	{r4, lr}
   d6896:	2114      	movs	r1, #20
   d6898:	4604      	mov	r4, r0
   d689a:	f000 ff22 	bl	d76e2 <_ZdlPvj>
   d689e:	4620      	mov	r0, r4
   d68a0:	bd10      	pop	{r4, pc}

000d68a2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68a2:	b538      	push	{r3, r4, r5, lr}
   d68a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68a6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68a8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68aa:	f7ff fa17 	bl	d5cdc <HAL_USB_USART_Available_Data_For_Write>
   d68ae:	2800      	cmp	r0, #0
   d68b0:	dc01      	bgt.n	d68b6 <_ZN9USBSerial5writeEh+0x14>
   d68b2:	7c60      	ldrb	r0, [r4, #17]
   d68b4:	b128      	cbz	r0, d68c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d68b6:	4629      	mov	r1, r5
   d68b8:	7c20      	ldrb	r0, [r4, #16]
   d68ba:	f7ff fa1f 	bl	d5cfc <HAL_USB_USART_Send_Data>
   d68be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d68c2:	bd38      	pop	{r3, r4, r5, pc}

000d68c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68c4:	b510      	push	{r4, lr}
   d68c6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d68c8:	2300      	movs	r3, #0
   d68ca:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d68cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d68d0:	60a3      	str	r3, [r4, #8]
   d68d2:	4b05      	ldr	r3, [pc, #20]	; (d68e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d68d4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d68d6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68d8:	4608      	mov	r0, r1
{
  _serial = serial;
   d68da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d68dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d68de:	4611      	mov	r1, r2
   d68e0:	f7ff f9e4 	bl	d5cac <HAL_USB_USART_Init>
}
   d68e4:	4620      	mov	r0, r4
   d68e6:	bd10      	pop	{r4, pc}
   d68e8:	000d917c 	.word	0x000d917c

000d68ec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d68ec:	2200      	movs	r2, #0
   d68ee:	7c00      	ldrb	r0, [r0, #16]
   d68f0:	f7ff b9e4 	b.w	d5cbc <HAL_USB_USART_Begin>

000d68f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d68f6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d68fa:	2100      	movs	r1, #0
   d68fc:	f001 ff05 	bl	d870a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6900:	4620      	mov	r0, r4
   d6902:	bd10      	pop	{r4, pc}

000d6904 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6904:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6906:	4d0e      	ldr	r5, [pc, #56]	; (d6940 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6908:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d690a:	a801      	add	r0, sp, #4
   d690c:	f7ff fff2 	bl	d68f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6910:	6829      	ldr	r1, [r5, #0]
   d6912:	f011 0401 	ands.w	r4, r1, #1
   d6916:	d110      	bne.n	d693a <_Z16_fetch_usbserialv+0x36>
   d6918:	4628      	mov	r0, r5
   d691a:	f7fd fbc4 	bl	d40a6 <__cxa_guard_acquire>
   d691e:	b160      	cbz	r0, d693a <_Z16_fetch_usbserialv+0x36>
   d6920:	aa01      	add	r2, sp, #4
   d6922:	4621      	mov	r1, r4
   d6924:	4807      	ldr	r0, [pc, #28]	; (d6944 <_Z16_fetch_usbserialv+0x40>)
   d6926:	f7ff ffcd 	bl	d68c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d692a:	4628      	mov	r0, r5
   d692c:	f7fd fbc0 	bl	d40b0 <__cxa_guard_release>
   d6930:	4a05      	ldr	r2, [pc, #20]	; (d6948 <_Z16_fetch_usbserialv+0x44>)
   d6932:	4906      	ldr	r1, [pc, #24]	; (d694c <_Z16_fetch_usbserialv+0x48>)
   d6934:	4803      	ldr	r0, [pc, #12]	; (d6944 <_Z16_fetch_usbserialv+0x40>)
   d6936:	f000 fecf 	bl	d76d8 <__aeabi_atexit>
	return _usbserial;
}
   d693a:	4802      	ldr	r0, [pc, #8]	; (d6944 <_Z16_fetch_usbserialv+0x40>)
   d693c:	b007      	add	sp, #28
   d693e:	bd30      	pop	{r4, r5, pc}
   d6940:	2003e3f8 	.word	0x2003e3f8
   d6944:	2003e3fc 	.word	0x2003e3fc
   d6948:	2003dc48 	.word	0x2003dc48
   d694c:	000d6845 	.word	0x000d6845

000d6950 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6950:	4770      	bx	lr

000d6952 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6952:	7441      	strb	r1, [r0, #17]
   d6954:	4770      	bx	lr

000d6956 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6956:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6958:	7c00      	ldrb	r0, [r0, #16]
   d695a:	f7ff f917 	bl	d5b8c <HAL_USART_Available_Data_For_Write>
}
   d695e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6962:	bd08      	pop	{r3, pc}

000d6964 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6964:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6966:	7c00      	ldrb	r0, [r0, #16]
   d6968:	f7ff f8e8 	bl	d5b3c <HAL_USART_Available_Data>
}
   d696c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6970:	bd08      	pop	{r3, pc}

000d6972 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6972:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6974:	7c00      	ldrb	r0, [r0, #16]
   d6976:	f7ff f8f1 	bl	d5b5c <HAL_USART_Peek_Data>
}
   d697a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d697e:	bf28      	it	cs
   d6980:	f04f 30ff 	movcs.w	r0, #4294967295
   d6984:	bd08      	pop	{r3, pc}

000d6986 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6986:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6988:	7c00      	ldrb	r0, [r0, #16]
   d698a:	f7ff f8df 	bl	d5b4c <HAL_USART_Read_Data>
}
   d698e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6992:	bf28      	it	cs
   d6994:	f04f 30ff 	movcs.w	r0, #4294967295
   d6998:	bd08      	pop	{r3, pc}

000d699a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d699a:	7c00      	ldrb	r0, [r0, #16]
   d699c:	f7ff b8e6 	b.w	d5b6c <HAL_USART_Flush_Data>

000d69a0 <_ZN11USARTSerialD0Ev>:
   d69a0:	b510      	push	{r4, lr}
   d69a2:	2114      	movs	r1, #20
   d69a4:	4604      	mov	r4, r0
   d69a6:	f000 fe9c 	bl	d76e2 <_ZdlPvj>
   d69aa:	4620      	mov	r0, r4
   d69ac:	bd10      	pop	{r4, pc}

000d69ae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d69ae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69b0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d69b2:	4604      	mov	r4, r0
   d69b4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69b6:	b925      	cbnz	r5, d69c2 <_ZN11USARTSerial5writeEh+0x14>
   d69b8:	7c00      	ldrb	r0, [r0, #16]
   d69ba:	f7ff f8e7 	bl	d5b8c <HAL_USART_Available_Data_For_Write>
   d69be:	2800      	cmp	r0, #0
   d69c0:	dd05      	ble.n	d69ce <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69c2:	4631      	mov	r1, r6
   d69c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d69c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69ca:	f7ff b8af 	b.w	d5b2c <HAL_USART_Write_Data>
  }
  return 0;
}
   d69ce:	4628      	mov	r0, r5
   d69d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d69d4:	b510      	push	{r4, lr}
   d69d6:	4604      	mov	r4, r0
   d69d8:	4608      	mov	r0, r1
   d69da:	4611      	mov	r1, r2
   d69dc:	2200      	movs	r2, #0
   d69de:	6062      	str	r2, [r4, #4]
   d69e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69e4:	60a2      	str	r2, [r4, #8]
   d69e6:	4a05      	ldr	r2, [pc, #20]	; (d69fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d69e8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d69ea:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d69ec:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d69ee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d69f0:	461a      	mov	r2, r3
   d69f2:	f7ff f893 	bl	d5b1c <HAL_USART_Init>
}
   d69f6:	4620      	mov	r0, r4
   d69f8:	bd10      	pop	{r4, pc}
   d69fa:	bf00      	nop
   d69fc:	000d91ac 	.word	0x000d91ac

000d6a00 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6a00:	7c00      	ldrb	r0, [r0, #16]
   d6a02:	f7ff b8bb 	b.w	d5b7c <HAL_USART_Is_Enabled>
	...

000d6a08 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a08:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a0a:	4d0c      	ldr	r5, [pc, #48]	; (d6a3c <_Z22__fetch_global_Serial1v+0x34>)
   d6a0c:	6829      	ldr	r1, [r5, #0]
   d6a0e:	f011 0401 	ands.w	r4, r1, #1
   d6a12:	d111      	bne.n	d6a38 <_Z22__fetch_global_Serial1v+0x30>
   d6a14:	4628      	mov	r0, r5
   d6a16:	f7fd fb46 	bl	d40a6 <__cxa_guard_acquire>
   d6a1a:	b168      	cbz	r0, d6a38 <_Z22__fetch_global_Serial1v+0x30>
   d6a1c:	4a08      	ldr	r2, [pc, #32]	; (d6a40 <_Z22__fetch_global_Serial1v+0x38>)
   d6a1e:	4b09      	ldr	r3, [pc, #36]	; (d6a44 <_Z22__fetch_global_Serial1v+0x3c>)
   d6a20:	4809      	ldr	r0, [pc, #36]	; (d6a48 <_Z22__fetch_global_Serial1v+0x40>)
   d6a22:	4621      	mov	r1, r4
   d6a24:	f7ff ffd6 	bl	d69d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6a28:	4628      	mov	r0, r5
   d6a2a:	f7fd fb41 	bl	d40b0 <__cxa_guard_release>
   d6a2e:	4a07      	ldr	r2, [pc, #28]	; (d6a4c <_Z22__fetch_global_Serial1v+0x44>)
   d6a30:	4907      	ldr	r1, [pc, #28]	; (d6a50 <_Z22__fetch_global_Serial1v+0x48>)
   d6a32:	4805      	ldr	r0, [pc, #20]	; (d6a48 <_Z22__fetch_global_Serial1v+0x40>)
   d6a34:	f000 fe50 	bl	d76d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a38:	4803      	ldr	r0, [pc, #12]	; (d6a48 <_Z22__fetch_global_Serial1v+0x40>)
   d6a3a:	bd38      	pop	{r3, r4, r5, pc}
   d6a3c:	2003e4a8 	.word	0x2003e4a8
   d6a40:	2003e4ac 	.word	0x2003e4ac
   d6a44:	2003e424 	.word	0x2003e424
   d6a48:	2003e410 	.word	0x2003e410
   d6a4c:	2003dc48 	.word	0x2003dc48
   d6a50:	000d6951 	.word	0x000d6951

000d6a54 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6a54:	4770      	bx	lr

000d6a56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a58:	4606      	mov	r6, r0
   d6a5a:	4615      	mov	r5, r2
   d6a5c:	460c      	mov	r4, r1
   d6a5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a60:	42bc      	cmp	r4, r7
   d6a62:	d006      	beq.n	d6a72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a64:	6833      	ldr	r3, [r6, #0]
   d6a66:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a6a:	689b      	ldr	r3, [r3, #8]
   d6a6c:	4630      	mov	r0, r6
   d6a6e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a70:	e7f6      	b.n	d6a60 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6a72:	4628      	mov	r0, r5
   d6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a76 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6a76:	2200      	movs	r2, #0
   d6a78:	7c00      	ldrb	r0, [r0, #16]
   d6a7a:	f7ff b8af 	b.w	d5bdc <HAL_I2C_Write_Data>

000d6a7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6a7e:	2100      	movs	r1, #0
   d6a80:	7c00      	ldrb	r0, [r0, #16]
   d6a82:	f7ff b8b3 	b.w	d5bec <HAL_I2C_Available_Data>

000d6a86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6a86:	2100      	movs	r1, #0
   d6a88:	7c00      	ldrb	r0, [r0, #16]
   d6a8a:	f7ff b8b7 	b.w	d5bfc <HAL_I2C_Read_Data>

000d6a8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6a8e:	2100      	movs	r1, #0
   d6a90:	7c00      	ldrb	r0, [r0, #16]
   d6a92:	f7ff b8bb 	b.w	d5c0c <HAL_I2C_Peek_Data>

000d6a96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6a96:	2100      	movs	r1, #0
   d6a98:	7c00      	ldrb	r0, [r0, #16]
   d6a9a:	f7ff b8bf 	b.w	d5c1c <HAL_I2C_Flush_Data>

000d6a9e <_ZN7TwoWireD0Ev>:
   d6a9e:	b510      	push	{r4, lr}
   d6aa0:	2114      	movs	r1, #20
   d6aa2:	4604      	mov	r4, r0
   d6aa4:	f000 fe1d 	bl	d76e2 <_ZdlPvj>
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	bd10      	pop	{r4, pc}

000d6aac <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6aac:	b510      	push	{r4, lr}
   d6aae:	4604      	mov	r4, r0
   d6ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ab4:	4608      	mov	r0, r1
   d6ab6:	60a3      	str	r3, [r4, #8]
   d6ab8:	2100      	movs	r1, #0
   d6aba:	4b04      	ldr	r3, [pc, #16]	; (d6acc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6abc:	7420      	strb	r0, [r4, #16]
   d6abe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ac0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6ac2:	f7ff f8bb 	bl	d5c3c <HAL_I2C_Init>

}
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	bd10      	pop	{r4, pc}
   d6aca:	bf00      	nop
   d6acc:	000d91dc 	.word	0x000d91dc

000d6ad0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ad0:	2300      	movs	r3, #0
   d6ad2:	461a      	mov	r2, r3
   d6ad4:	4619      	mov	r1, r3
   d6ad6:	7c00      	ldrb	r0, [r0, #16]
   d6ad8:	f7ff b860 	b.w	d5b9c <HAL_I2C_Begin>

000d6adc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6adc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6ade:	2400      	movs	r4, #0
   d6ae0:	7c00      	ldrb	r0, [r0, #16]
   d6ae2:	9400      	str	r4, [sp, #0]
   d6ae4:	f7ff f862 	bl	d5bac <HAL_I2C_Request_Data>
  return result;
}
   d6ae8:	b2c0      	uxtb	r0, r0
   d6aea:	b002      	add	sp, #8
   d6aec:	bd10      	pop	{r4, pc}

000d6aee <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d6aee:	2301      	movs	r3, #1
   d6af0:	f7ff bff4 	b.w	d6adc <_ZN7TwoWire11requestFromEhhh>

000d6af4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6af4:	2200      	movs	r2, #0
   d6af6:	7c00      	ldrb	r0, [r0, #16]
   d6af8:	f7ff b860 	b.w	d5bbc <HAL_I2C_Begin_Transmission>

000d6afc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6afc:	2200      	movs	r2, #0
   d6afe:	7c00      	ldrb	r0, [r0, #16]
   d6b00:	f7ff b864 	b.w	d5bcc <HAL_I2C_End_Transmission>

000d6b04 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6b04:	2101      	movs	r1, #1
   d6b06:	f7ff bff9 	b.w	d6afc <_ZN7TwoWire15endTransmissionEh>

000d6b0a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6b0a:	2100      	movs	r1, #0
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7ff b88d 	b.w	d5c2c <HAL_I2C_Is_Enabled>

000d6b12 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b12:	2200      	movs	r2, #0
   d6b14:	4611      	mov	r1, r2
   d6b16:	6840      	ldr	r0, [r0, #4]
   d6b18:	f7ff b97c 	b.w	d5e14 <network_listening>

000d6b1c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b1c:	2200      	movs	r2, #0
   d6b1e:	4611      	mov	r1, r2
   d6b20:	6840      	ldr	r0, [r0, #4]
   d6b22:	f7ff b997 	b.w	d5e54 <network_get_listen_timeout>

000d6b26 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b26:	2200      	movs	r2, #0
   d6b28:	6840      	ldr	r0, [r0, #4]
   d6b2a:	f7ff b98b 	b.w	d5e44 <network_set_listen_timeout>

000d6b2e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b2e:	2200      	movs	r2, #0
   d6b30:	f081 0101 	eor.w	r1, r1, #1
   d6b34:	6840      	ldr	r0, [r0, #4]
   d6b36:	f7ff b965 	b.w	d5e04 <network_listen>

000d6b3a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b3a:	2300      	movs	r3, #0
   d6b3c:	461a      	mov	r2, r3
   d6b3e:	2101      	movs	r1, #1
   d6b40:	6840      	ldr	r0, [r0, #4]
   d6b42:	f7ff b957 	b.w	d5df4 <network_off>

000d6b46 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b46:	2300      	movs	r3, #0
   d6b48:	461a      	mov	r2, r3
   d6b4a:	4619      	mov	r1, r3
   d6b4c:	6840      	ldr	r0, [r0, #4]
   d6b4e:	f7ff b949 	b.w	d5de4 <network_on>

000d6b52 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b52:	2200      	movs	r2, #0
   d6b54:	4611      	mov	r1, r2
   d6b56:	6840      	ldr	r0, [r0, #4]
   d6b58:	f7ff b93c 	b.w	d5dd4 <network_ready>

000d6b5c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b5c:	2200      	movs	r2, #0
   d6b5e:	4611      	mov	r1, r2
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	f7ff b927 	b.w	d5db4 <network_connecting>

000d6b66 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b66:	2200      	movs	r2, #0
   d6b68:	2102      	movs	r1, #2
   d6b6a:	6840      	ldr	r0, [r0, #4]
   d6b6c:	f7ff b92a 	b.w	d5dc4 <network_disconnect>

000d6b70 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b70:	2300      	movs	r3, #0
   d6b72:	461a      	mov	r2, r3
   d6b74:	6840      	ldr	r0, [r0, #4]
   d6b76:	f7ff b915 	b.w	d5da4 <network_connect>

000d6b7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6b7a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b7c:	4605      	mov	r5, r0
   d6b7e:	b188      	cbz	r0, d6ba4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b80:	6804      	ldr	r4, [r0, #0]
   d6b82:	b14c      	cbz	r4, d6b98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6b84:	68a3      	ldr	r3, [r4, #8]
   d6b86:	b11b      	cbz	r3, d6b90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b88:	2203      	movs	r2, #3
   d6b8a:	4621      	mov	r1, r4
   d6b8c:	4620      	mov	r0, r4
   d6b8e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b90:	2110      	movs	r1, #16
   d6b92:	4620      	mov	r0, r4
   d6b94:	f000 fda5 	bl	d76e2 <_ZdlPvj>
   d6b98:	4628      	mov	r0, r5
   d6b9a:	2114      	movs	r1, #20
      }
   d6b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ba0:	f000 bd9f 	b.w	d76e2 <_ZdlPvj>
   d6ba4:	bd38      	pop	{r3, r4, r5, pc}

000d6ba6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6ba6:	b110      	cbz	r0, d6bae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6ba8:	6803      	ldr	r3, [r0, #0]
   d6baa:	685b      	ldr	r3, [r3, #4]
   d6bac:	4718      	bx	r3
   d6bae:	4770      	bx	lr

000d6bb0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6bb0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6bb2:	6803      	ldr	r3, [r0, #0]
   d6bb4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6bb6:	b1bb      	cbz	r3, d6be8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6bb8:	6858      	ldr	r0, [r3, #4]
   d6bba:	f7fe ff6f 	bl	d5a9c <os_thread_is_current>
   d6bbe:	b978      	cbnz	r0, d6be0 <_ZN6ThreadD1Ev+0x30>
   d6bc0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6bc2:	7c5a      	ldrb	r2, [r3, #17]
   d6bc4:	b912      	cbnz	r2, d6bcc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6bc6:	6858      	ldr	r0, [r3, #4]
   d6bc8:	f7fe ff70 	bl	d5aac <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6bcc:	6823      	ldr	r3, [r4, #0]
   d6bce:	6858      	ldr	r0, [r3, #4]
   d6bd0:	f7fe ff74 	bl	d5abc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bd4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6bd6:	2300      	movs	r3, #0
   d6bd8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6bda:	b128      	cbz	r0, d6be8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6bdc:	f7ff ffcd 	bl	d6b7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6be0:	6820      	ldr	r0, [r4, #0]
   d6be2:	b108      	cbz	r0, d6be8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6be4:	f7ff ffc9 	bl	d6b7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6be8:	4620      	mov	r0, r4
   d6bea:	bd10      	pop	{r4, pc}

000d6bec <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6bec:	b538      	push	{r3, r4, r5, lr}
   d6bee:	4b0c      	ldr	r3, [pc, #48]	; (d6c20 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6bf0:	6003      	str	r3, [r0, #0]
   d6bf2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bf4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6bf8:	b108      	cbz	r0, d6bfe <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6bfa:	f7fd fa52 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bfe:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6c02:	b135      	cbz	r5, d6c12 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c04:	4628      	mov	r0, r5
   d6c06:	f7ff ffd3 	bl	d6bb0 <_ZN6ThreadD1Ev>
   d6c0a:	2104      	movs	r1, #4
   d6c0c:	4628      	mov	r0, r5
   d6c0e:	f000 fd68 	bl	d76e2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c12:	68a0      	ldr	r0, [r4, #8]
   d6c14:	b108      	cbz	r0, d6c1a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6c16:	f7ff ffc6 	bl	d6ba6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6c1a:	4620      	mov	r0, r4
   d6c1c:	bd38      	pop	{r3, r4, r5, pc}
   d6c1e:	bf00      	nop
   d6c20:	000d9204 	.word	0x000d9204

000d6c24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c24:	b538      	push	{r3, r4, r5, lr}
   d6c26:	4c0e      	ldr	r4, [pc, #56]	; (d6c60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6c28:	4b0e      	ldr	r3, [pc, #56]	; (d6c64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6c2a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6c2c:	2500      	movs	r5, #0
   d6c2e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6c30:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6c34:	6063      	str	r3, [r4, #4]
   d6c36:	60a5      	str	r5, [r4, #8]
   d6c38:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6c3c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6c40:	f7fe ff4c 	bl	d5adc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6c44:	4b08      	ldr	r3, [pc, #32]	; (d6c68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6c46:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c4a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6c4e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6c50:	4620      	mov	r0, r4
   d6c52:	4a06      	ldr	r2, [pc, #24]	; (d6c6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6c54:	4906      	ldr	r1, [pc, #24]	; (d6c70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6c5a:	f000 bd3d 	b.w	d76d8 <__aeabi_atexit>
   d6c5e:	bf00      	nop
   d6c60:	2003e530 	.word	0x2003e530
   d6c64:	000d9310 	.word	0x000d9310
   d6c68:	000d9204 	.word	0x000d9204
   d6c6c:	2003dc48 	.word	0x2003dc48
   d6c70:	000d6bed 	.word	0x000d6bed

000d6c74 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d6c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c76:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6c78:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d6c7a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6c7e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6c80:	2201      	movs	r2, #1
   d6c82:	f04f 33ff 	mov.w	r3, #4294967295
   d6c86:	4621      	mov	r1, r4
   d6c88:	47a8      	blx	r5
}
   d6c8a:	b003      	add	sp, #12
   d6c8c:	bd30      	pop	{r4, r5, pc}

000d6c8e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6c8e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6c90:	6803      	ldr	r3, [r0, #0]
   d6c92:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6c94:	f04f 33ff 	mov.w	r3, #4294967295
   d6c98:	46a4      	mov	ip, r4
}
   d6c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6c9e:	4760      	bx	ip

000d6ca0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6ca2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6ca4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6ca6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6caa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6cac:	4621      	mov	r1, r4
   d6cae:	4613      	mov	r3, r2
   d6cb0:	2201      	movs	r2, #1
   d6cb2:	47a8      	blx	r5
}
   d6cb4:	b003      	add	sp, #12
   d6cb6:	bd30      	pop	{r4, r5, pc}

000d6cb8 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6cb8:	4770      	bx	lr

000d6cba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6cba:	b538      	push	{r3, r4, r5, lr}
   d6cbc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6cbe:	681a      	ldr	r2, [r3, #0]
   d6cc0:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6cc2:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6cc4:	da05      	bge.n	d6cd2 <_ZN9TCPClient9connectedEv+0x18>
   d6cc6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6cca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6cce:	429a      	cmp	r2, r3
   d6cd0:	d001      	beq.n	d6cd6 <_ZN9TCPClient9connectedEv+0x1c>
   d6cd2:	2501      	movs	r5, #1
   d6cd4:	e00b      	b.n	d6cee <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6cd6:	6803      	ldr	r3, [r0, #0]
   d6cd8:	691b      	ldr	r3, [r3, #16]
   d6cda:	4798      	blx	r3
   d6cdc:	2800      	cmp	r0, #0
   d6cde:	bf14      	ite	ne
   d6ce0:	2501      	movne	r5, #1
   d6ce2:	2500      	moveq	r5, #0
        if (!rv) {
   d6ce4:	d103      	bne.n	d6cee <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6ce6:	6823      	ldr	r3, [r4, #0]
   d6ce8:	4620      	mov	r0, r4
   d6cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6cec:	4798      	blx	r3
        }
    }
    return rv;
}
   d6cee:	4628      	mov	r0, r5
   d6cf0:	bd38      	pop	{r3, r4, r5, pc}

000d6cf2 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6cf2:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6cf4:	6818      	ldr	r0, [r3, #0]
}
   d6cf6:	43c0      	mvns	r0, r0
   d6cf8:	0fc0      	lsrs	r0, r0, #31
   d6cfa:	4770      	bx	lr

000d6cfc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6cfc:	4770      	bx	lr

000d6cfe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6cfe:	2000      	movs	r0, #0
   d6d00:	4770      	bx	lr

000d6d02 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d02:	b510      	push	{r4, lr}
   d6d04:	2114      	movs	r1, #20
   d6d06:	4604      	mov	r4, r0
   d6d08:	f000 fceb 	bl	d76e2 <_ZdlPvj>
   d6d0c:	4620      	mov	r0, r4
   d6d0e:	bd10      	pop	{r4, pc}

000d6d10 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6d10:	f7fd b9c5 	b.w	d409e <_ZdlPv>

000d6d14 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d18:	4698      	mov	r8, r3
    stop();
   d6d1a:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6d1c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6d20:	460c      	mov	r4, r1
   d6d22:	4606      	mov	r6, r0
   d6d24:	4617      	mov	r7, r2
    stop();
   d6d26:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6d28:	ab12      	add	r3, sp, #72	; 0x48
   d6d2a:	2500      	movs	r5, #0
   d6d2c:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6d30:	462a      	mov	r2, r5
   d6d32:	4629      	mov	r1, r5
   d6d34:	4620      	mov	r0, r4
   d6d36:	f7fe fe39 	bl	d59ac <netdb_getaddrinfo>
   d6d3a:	2800      	cmp	r0, #0
   d6d3c:	db3a      	blt.n	d6db4 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6d3e:	9b00      	ldr	r3, [sp, #0]
   d6d40:	2b00      	cmp	r3, #0
   d6d42:	d039      	beq.n	d6db8 <_ZN9TCPClient7connectEPKctm+0xa4>
   d6d44:	695b      	ldr	r3, [r3, #20]
   d6d46:	2b00      	cmp	r3, #0
   d6d48:	d036      	beq.n	d6db8 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6d4a:	a806      	add	r0, sp, #24
   d6d4c:	f7ff fd20 	bl	d6790 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6d50:	9b00      	ldr	r3, [sp, #0]
   d6d52:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6d54:	7863      	ldrb	r3, [r4, #1]
   d6d56:	2b02      	cmp	r3, #2
   d6d58:	d101      	bne.n	d6d5e <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6d5a:	1d21      	adds	r1, r4, #4
   d6d5c:	e013      	b.n	d6d86 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6d5e:	2b0a      	cmp	r3, #10
   d6d60:	d114      	bne.n	d6d8c <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6d62:	2211      	movs	r2, #17
   d6d64:	4629      	mov	r1, r5
   d6d66:	a801      	add	r0, sp, #4
   d6d68:	f001 fccf 	bl	d870a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6d6c:	68a3      	ldr	r3, [r4, #8]
   d6d6e:	bb33      	cbnz	r3, d6dbe <_ZN9TCPClient7connectEPKctm+0xaa>
   d6d70:	68e3      	ldr	r3, [r4, #12]
   d6d72:	bb23      	cbnz	r3, d6dbe <_ZN9TCPClient7connectEPKctm+0xaa>
   d6d74:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6d78:	6925      	ldr	r5, [r4, #16]
   d6d7a:	f7fe febf 	bl	d5afc <inet_htonl>
   d6d7e:	4285      	cmp	r5, r0
   d6d80:	d11d      	bne.n	d6dbe <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6d82:	f104 0114 	add.w	r1, r4, #20
   d6d86:	a806      	add	r0, sp, #24
   d6d88:	f7ff fd45 	bl	d6816 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6d8c:	a806      	add	r0, sp, #24
   d6d8e:	f7ff fd1f 	bl	d67d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6d92:	b188      	cbz	r0, d6db8 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d6d94:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d96:	ad07      	add	r5, sp, #28
   d6d98:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6d9c:	4b18      	ldr	r3, [pc, #96]	; (d6e00 <_ZN9TCPClient7connectEPKctm+0xec>)
   d6d9e:	930c      	str	r3, [sp, #48]	; 0x30
   d6da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6da2:	ac0d      	add	r4, sp, #52	; 0x34
   d6da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6da6:	682b      	ldr	r3, [r5, #0]
   d6da8:	7023      	strb	r3, [r4, #0]
   d6daa:	463a      	mov	r2, r7
   d6dac:	4643      	mov	r3, r8
   d6dae:	a90c      	add	r1, sp, #48	; 0x30
   d6db0:	4630      	mov	r0, r6
   d6db2:	47c8      	blx	r9
   d6db4:	4604      	mov	r4, r0
   d6db6:	e01c      	b.n	d6df2 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d6db8:	f04f 34ff 	mov.w	r4, #4294967295
   d6dbc:	e019      	b.n	d6df2 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6dbe:	f104 0308 	add.w	r3, r4, #8
   d6dc2:	ad01      	add	r5, sp, #4
   d6dc4:	3418      	adds	r4, #24
   d6dc6:	6818      	ldr	r0, [r3, #0]
   d6dc8:	6859      	ldr	r1, [r3, #4]
   d6dca:	462a      	mov	r2, r5
   d6dcc:	c203      	stmia	r2!, {r0, r1}
   d6dce:	3308      	adds	r3, #8
   d6dd0:	42a3      	cmp	r3, r4
   d6dd2:	4615      	mov	r5, r2
   d6dd4:	d1f7      	bne.n	d6dc6 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d6dd6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6dd8:	a901      	add	r1, sp, #4
   d6dda:	a80c      	add	r0, sp, #48	; 0x30
   d6ddc:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6dde:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6de2:	f7ff fce3 	bl	d67ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6de8:	ac07      	add	r4, sp, #28
   d6dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6dec:	682b      	ldr	r3, [r5, #0]
   d6dee:	7023      	strb	r3, [r4, #0]
   d6df0:	e7cc      	b.n	d6d8c <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6df2:	9800      	ldr	r0, [sp, #0]
   d6df4:	f7fe fdd2 	bl	d599c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6df8:	4620      	mov	r0, r4
   d6dfa:	b013      	add	sp, #76	; 0x4c
   d6dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6e00:	000d9168 	.word	0x000d9168

000d6e04 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6e04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e06:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6e08:	2200      	movs	r2, #0
   d6e0a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6e0c:	9202      	str	r2, [sp, #8]
   d6e0e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6e10:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6e12:	4604      	mov	r4, r0
   d6e14:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6e16:	d008      	beq.n	d6e2a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6e1c:	fbb3 f1f2 	udiv	r1, r3, r2
   d6e20:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6e22:	fb02 3111 	mls	r1, r2, r1, r3
   d6e26:	434a      	muls	r2, r1
   d6e28:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6e2a:	6960      	ldr	r0, [r4, #20]
   d6e2c:	2308      	movs	r3, #8
   d6e2e:	9300      	str	r3, [sp, #0]
   d6e30:	f241 0205 	movw	r2, #4101	; 0x1005
   d6e34:	446b      	add	r3, sp
   d6e36:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6e3a:	6800      	ldr	r0, [r0, #0]
   d6e3c:	f7fe ff06 	bl	d5c4c <sock_setsockopt>
    if (ret < 0) {
   d6e40:	2800      	cmp	r0, #0
   d6e42:	db08      	blt.n	d6e56 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6e44:	6960      	ldr	r0, [r4, #20]
   d6e46:	2300      	movs	r3, #0
   d6e48:	4632      	mov	r2, r6
   d6e4a:	4629      	mov	r1, r5
   d6e4c:	6800      	ldr	r0, [r0, #0]
   d6e4e:	f7fe ff1d 	bl	d5c8c <sock_send>
    if (ret < 0) {
   d6e52:	2800      	cmp	r0, #0
   d6e54:	da04      	bge.n	d6e60 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6e56:	f7ff f835 	bl	d5ec4 <__errno>
   d6e5a:	6803      	ldr	r3, [r0, #0]
   d6e5c:	6063      	str	r3, [r4, #4]
   d6e5e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6e60:	b004      	add	sp, #16
   d6e62:	bd70      	pop	{r4, r5, r6, pc}

000d6e64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e64:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e66:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6e68:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6e6a:	689b      	ldr	r3, [r3, #8]
   d6e6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6e6e:	68a3      	ldr	r3, [r4, #8]
   d6e70:	3b01      	subs	r3, #1
   d6e72:	60a3      	str	r3, [r4, #8]
   d6e74:	b92b      	cbnz	r3, d6e82 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6e76:	6823      	ldr	r3, [r4, #0]
   d6e78:	4620      	mov	r0, r4
   d6e7a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6e80:	4718      	bx	r3
   d6e82:	bd10      	pop	{r4, pc}

000d6e84 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6e84:	b570      	push	{r4, r5, r6, lr}
   d6e86:	4604      	mov	r4, r0
   d6e88:	694d      	ldr	r5, [r1, #20]
   d6e8a:	4b05      	ldr	r3, [pc, #20]	; (d6ea0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6e8c:	f844 3b04 	str.w	r3, [r4], #4
   d6e90:	358c      	adds	r5, #140	; 0x8c
   d6e92:	4606      	mov	r6, r0
   d6e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e98:	682b      	ldr	r3, [r5, #0]
   d6e9a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6e9c:	4630      	mov	r0, r6
   d6e9e:	bd70      	pop	{r4, r5, r6, pc}
   d6ea0:	000d9168 	.word	0x000d9168

000d6ea4 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6ea4:	b510      	push	{r4, lr}
   d6ea6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6ea8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6eac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6eb0:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6eb2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6eb4:	d005      	beq.n	d6ec2 <_ZN9TCPClient4peekEv+0x1e>
   d6eb6:	6962      	ldr	r2, [r4, #20]
   d6eb8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6ebc:	4413      	add	r3, r2
   d6ebe:	7918      	ldrb	r0, [r3, #4]
   d6ec0:	bd10      	pop	{r4, pc}
   d6ec2:	6803      	ldr	r3, [r0, #0]
   d6ec4:	691b      	ldr	r3, [r3, #16]
   d6ec6:	4798      	blx	r3
   d6ec8:	2800      	cmp	r0, #0
   d6eca:	d1f4      	bne.n	d6eb6 <_ZN9TCPClient4peekEv+0x12>
   d6ecc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6ed0:	bd10      	pop	{r4, pc}

000d6ed2 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6ed2:	b510      	push	{r4, lr}
   d6ed4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6ed6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6eda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ede:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6ee0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6ee2:	d008      	beq.n	d6ef6 <_ZN9TCPClient4readEv+0x24>
   d6ee4:	6962      	ldr	r2, [r4, #20]
   d6ee6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6eea:	1c59      	adds	r1, r3, #1
   d6eec:	4413      	add	r3, r2
   d6eee:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6ef2:	7918      	ldrb	r0, [r3, #4]
   d6ef4:	bd10      	pop	{r4, pc}
   d6ef6:	6803      	ldr	r3, [r0, #0]
   d6ef8:	691b      	ldr	r3, [r3, #16]
   d6efa:	4798      	blx	r3
   d6efc:	2800      	cmp	r0, #0
   d6efe:	d1f1      	bne.n	d6ee4 <_ZN9TCPClient4readEv+0x12>
   d6f00:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6f04:	bd10      	pop	{r4, pc}

000d6f06 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f08:	6943      	ldr	r3, [r0, #20]
   d6f0a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6f0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6f10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6f14:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6f16:	4605      	mov	r5, r0
   d6f18:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6f1a:	d106      	bne.n	d6f2a <_ZN9TCPClient4readEPhj+0x24>
   d6f1c:	6803      	ldr	r3, [r0, #0]
   d6f1e:	691b      	ldr	r3, [r3, #16]
   d6f20:	4798      	blx	r3
   d6f22:	b910      	cbnz	r0, d6f2a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6f24:	f04f 34ff 	mov.w	r4, #4294967295
   d6f28:	e014      	b.n	d6f54 <_ZN9TCPClient4readEPhj+0x4e>
   d6f2a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6f2c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6f30:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6f34:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6f36:	42bc      	cmp	r4, r7
   d6f38:	bf28      	it	cs
   d6f3a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6f3c:	4419      	add	r1, r3
   d6f3e:	4622      	mov	r2, r4
   d6f40:	3104      	adds	r1, #4
   d6f42:	4630      	mov	r0, r6
   d6f44:	f001 fbd6 	bl	d86f4 <memcpy>
   d6f48:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6f4a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6f4e:	4423      	add	r3, r4
   d6f50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6f54:	4620      	mov	r0, r4
   d6f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f58 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6f58:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6f5a:	2300      	movs	r3, #0
   d6f5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6f60:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6f62:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6f66:	4770      	bx	lr

000d6f68 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f6c:	4698      	mov	r8, r3
    stop();
   d6f6e:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f70:	460d      	mov	r5, r1
   d6f72:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f76:	4606      	mov	r6, r0
   d6f78:	4617      	mov	r7, r2
    stop();
   d6f7a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6f7c:	7d2b      	ldrb	r3, [r5, #20]
   d6f7e:	6974      	ldr	r4, [r6, #20]
   d6f80:	2b04      	cmp	r3, #4
   d6f82:	bf0c      	ite	eq
   d6f84:	2002      	moveq	r0, #2
   d6f86:	200a      	movne	r0, #10
   d6f88:	2206      	movs	r2, #6
   d6f8a:	2101      	movs	r1, #1
   d6f8c:	f7fe fe86 	bl	d5c9c <sock_socket>
   d6f90:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d6f92:	6973      	ldr	r3, [r6, #20]
   d6f94:	681c      	ldr	r4, [r3, #0]
   d6f96:	2c00      	cmp	r4, #0
   d6f98:	db5b      	blt.n	d7052 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d6f9a:	4630      	mov	r0, r6
   d6f9c:	f7ff ffdc 	bl	d6f58 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6fa0:	f1b8 0f00 	cmp.w	r8, #0
   d6fa4:	d017      	beq.n	d6fd6 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d6fa6:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6fa8:	a903      	add	r1, sp, #12
   d6faa:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6fae:	9303      	str	r3, [sp, #12]
   d6fb0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6fb4:	f7fe fd52 	bl	d5a5c <if_index_to_name>
   d6fb8:	2800      	cmp	r0, #0
   d6fba:	db49      	blt.n	d7050 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d6fbc:	6970      	ldr	r0, [r6, #20]
   d6fbe:	2306      	movs	r3, #6
   d6fc0:	9300      	str	r3, [sp, #0]
   d6fc2:	f241 020b 	movw	r2, #4107	; 0x100b
   d6fc6:	ab03      	add	r3, sp, #12
   d6fc8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6fcc:	6800      	ldr	r0, [r0, #0]
   d6fce:	f7fe fe3d 	bl	d5c4c <sock_setsockopt>
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	db3c      	blt.n	d7050 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6fd6:	241c      	movs	r4, #28
   d6fd8:	4622      	mov	r2, r4
   d6fda:	2100      	movs	r1, #0
   d6fdc:	a803      	add	r0, sp, #12
   d6fde:	f001 fb94 	bl	d870a <memset>
    if (ip.version() == 4) {
   d6fe2:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6fe4:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6fe8:	2b04      	cmp	r3, #4
   d6fea:	d10c      	bne.n	d7006 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6fec:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6fee:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6ff0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6ff4:	f7fe fd8a 	bl	d5b0c <inet_htons>
   d6ff8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6ffc:	6868      	ldr	r0, [r5, #4]
   d6ffe:	f7fe fd7d 	bl	d5afc <inet_htonl>
   d7002:	9004      	str	r0, [sp, #16]
   d7004:	e013      	b.n	d702e <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7006:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7008:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d700a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d700e:	f7fe fd7d 	bl	d5b0c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7012:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7014:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7018:	1d2b      	adds	r3, r5, #4
   d701a:	f105 0714 	add.w	r7, r5, #20
   d701e:	6818      	ldr	r0, [r3, #0]
   d7020:	6859      	ldr	r1, [r3, #4]
   d7022:	4622      	mov	r2, r4
   d7024:	c203      	stmia	r2!, {r0, r1}
   d7026:	3308      	adds	r3, #8
   d7028:	42bb      	cmp	r3, r7
   d702a:	4614      	mov	r4, r2
   d702c:	d1f7      	bne.n	d701e <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d702e:	6973      	ldr	r3, [r6, #20]
   d7030:	221c      	movs	r2, #28
   d7032:	a903      	add	r1, sp, #12
   d7034:	6818      	ldr	r0, [r3, #0]
   d7036:	f7fe fe19 	bl	d5c6c <sock_connect>
   d703a:	2800      	cmp	r0, #0
   d703c:	db08      	blt.n	d7050 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d703e:	1d2c      	adds	r4, r5, #4
   d7040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7042:	6976      	ldr	r6, [r6, #20]
   d7044:	368c      	adds	r6, #140	; 0x8c
   d7046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7048:	6823      	ldr	r3, [r4, #0]
   d704a:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d704c:	2401      	movs	r4, #1
   d704e:	e004      	b.n	d705a <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d7050:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7052:	6833      	ldr	r3, [r6, #0]
   d7054:	4630      	mov	r0, r6
   d7056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7058:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d705a:	4620      	mov	r0, r4
   d705c:	b00a      	add	sp, #40	; 0x28
   d705e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7062 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7062:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7064:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7066:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7068:	6818      	ldr	r0, [r3, #0]
   d706a:	2800      	cmp	r0, #0
   d706c:	db01      	blt.n	d7072 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d706e:	f7fe fdf5 	bl	d5c5c <sock_close>
   d7072:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7074:	f04f 32ff 	mov.w	r2, #4294967295
   d7078:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d707a:	6960      	ldr	r0, [r4, #20]
   d707c:	2211      	movs	r2, #17
   d707e:	2100      	movs	r1, #0
   d7080:	308c      	adds	r0, #140	; 0x8c
   d7082:	f001 fb42 	bl	d870a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7086:	4620      	mov	r0, r4
}
   d7088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d708c:	f7ff bf64 	b.w	d6f58 <_ZN9TCPClient12flush_bufferEv>

000d7090 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7090:	b530      	push	{r4, r5, lr}
   d7092:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7094:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7098:	b08b      	sub	sp, #44	; 0x2c
   d709a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d709c:	b11b      	cbz	r3, d70a6 <_ZN9TCPClient9availableEv+0x16>
   d709e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d70a2:	429a      	cmp	r2, r3
   d70a4:	d040      	beq.n	d7128 <_ZN9TCPClient9availableEv+0x98>
   d70a6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d70a8:	6818      	ldr	r0, [r3, #0]
   d70aa:	2800      	cmp	r0, #0
   d70ac:	db3f      	blt.n	d712e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d70ae:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d70b2:	2d7f      	cmp	r5, #127	; 0x7f
   d70b4:	d83b      	bhi.n	d712e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d70b6:	1d19      	adds	r1, r3, #4
   d70b8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d70bc:	2308      	movs	r3, #8
   d70be:	4429      	add	r1, r5
   d70c0:	f7fe fddc 	bl	d5c7c <sock_recv>
            if (ret > 0) {
   d70c4:	2800      	cmp	r0, #0
   d70c6:	dd0c      	ble.n	d70e2 <_ZN9TCPClient9availableEv+0x52>
   d70c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d70ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70ce:	b90a      	cbnz	r2, d70d4 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d70d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d70d4:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d70d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d70da:	4418      	add	r0, r3
   d70dc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d70e0:	e025      	b.n	d712e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d70e2:	f7fe feef 	bl	d5ec4 <__errno>
   d70e6:	6803      	ldr	r3, [r0, #0]
   d70e8:	2b0b      	cmp	r3, #11
   d70ea:	d020      	beq.n	d712e <_ZN9TCPClient9availableEv+0x9e>
   d70ec:	f7fe feea 	bl	d5ec4 <__errno>
   d70f0:	6803      	ldr	r3, [r0, #0]
   d70f2:	2b0b      	cmp	r3, #11
   d70f4:	d01b      	beq.n	d712e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d70f6:	2320      	movs	r3, #32
   d70f8:	2500      	movs	r5, #0
   d70fa:	9302      	str	r3, [sp, #8]
   d70fc:	9503      	str	r5, [sp, #12]
   d70fe:	f7fe fee1 	bl	d5ec4 <__errno>
   d7102:	6803      	ldr	r3, [r0, #0]
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	4b0e      	ldr	r3, [pc, #56]	; (d7140 <_ZN9TCPClient9availableEv+0xb0>)
   d7108:	9300      	str	r3, [sp, #0]
   d710a:	aa02      	add	r2, sp, #8
   d710c:	462b      	mov	r3, r5
   d710e:	490d      	ldr	r1, [pc, #52]	; (d7144 <_ZN9TCPClient9availableEv+0xb4>)
   d7110:	2032      	movs	r0, #50	; 0x32
   d7112:	f7fe fe0b 	bl	d5d2c <log_message>
                    sock_close(d_->sock);
   d7116:	6963      	ldr	r3, [r4, #20]
   d7118:	6818      	ldr	r0, [r3, #0]
   d711a:	f7fe fd9f 	bl	d5c5c <sock_close>
   d711e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7120:	f04f 32ff 	mov.w	r2, #4294967295
   d7124:	601a      	str	r2, [r3, #0]
   d7126:	e002      	b.n	d712e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7128:	f7ff ff16 	bl	d6f58 <_ZN9TCPClient12flush_bufferEv>
   d712c:	e7bb      	b.n	d70a6 <_ZN9TCPClient9availableEv+0x16>
   d712e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7130:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7134:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7138:	1a18      	subs	r0, r3, r0
}
   d713a:	b00b      	add	sp, #44	; 0x2c
   d713c:	bd30      	pop	{r4, r5, pc}
   d713e:	bf00      	nop
   d7140:	000d929f 	.word	0x000d929f
   d7144:	000d9298 	.word	0x000d9298

000d7148 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7148:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d714a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d714c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d714e:	6001      	str	r1, [r0, #0]
   d7150:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7154:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7158:	3088      	adds	r0, #136	; 0x88
   d715a:	f7ff fb19 	bl	d6790 <_ZN9IPAddressC1Ev>
}
   d715e:	4620      	mov	r0, r4
   d7160:	bd10      	pop	{r4, pc}
	...

000d7164 <_ZN9TCPClientC1Ei>:
   d7164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7168:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d716a:	2300      	movs	r3, #0
   d716c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d716e:	4a14      	ldr	r2, [pc, #80]	; (d71c0 <_ZN9TCPClientC1Ei+0x5c>)
   d7170:	6043      	str	r3, [r0, #4]
   d7172:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7174:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7176:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7178:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d717a:	20a0      	movs	r0, #160	; 0xa0
   d717c:	460e      	mov	r6, r1
   d717e:	f7fc ff8a 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7182:	4605      	mov	r5, r0
   d7184:	b110      	cbz	r0, d718c <_ZN9TCPClientC1Ei+0x28>
   d7186:	4631      	mov	r1, r6
   d7188:	f7ff ffde 	bl	d7148 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d718c:	2014      	movs	r0, #20
   d718e:	f7fc ff82 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7192:	4603      	mov	r3, r0
   d7194:	b128      	cbz	r0, d71a2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7196:	2201      	movs	r2, #1
   d7198:	6042      	str	r2, [r0, #4]
   d719a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d719c:	4a09      	ldr	r2, [pc, #36]	; (d71c4 <_ZN9TCPClientC1Ei+0x60>)
   d719e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d71a0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d71a2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d71a4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d71a6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d71a8:	b128      	cbz	r0, d71b6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d71aa:	6843      	ldr	r3, [r0, #4]
   d71ac:	3b01      	subs	r3, #1
   d71ae:	6043      	str	r3, [r0, #4]
   d71b0:	b90b      	cbnz	r3, d71b6 <_ZN9TCPClientC1Ei+0x52>
   d71b2:	f7ff fe57 	bl	d6e64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d71b6:	4620      	mov	r0, r4
   d71b8:	f7ff fece 	bl	d6f58 <_ZN9TCPClient12flush_bufferEv>
}
   d71bc:	4620      	mov	r0, r4
   d71be:	bd70      	pop	{r4, r5, r6, pc}
   d71c0:	000d9254 	.word	0x000d9254
   d71c4:	000d9238 	.word	0x000d9238

000d71c8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d71c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d71ca:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d71ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d71d0:	f7ff ffc8 	bl	d7164 <_ZN9TCPClientC1Ei>
}
   d71d4:	4620      	mov	r0, r4
   d71d6:	bd10      	pop	{r4, pc}

000d71d8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d71d8:	b510      	push	{r4, lr}
   d71da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d71dc:	6800      	ldr	r0, [r0, #0]
   d71de:	2800      	cmp	r0, #0
   d71e0:	db01      	blt.n	d71e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d71e2:	f7fe fd3b 	bl	d5c5c <sock_close>
    }
}
   d71e6:	4620      	mov	r0, r4
   d71e8:	bd10      	pop	{r4, pc}

000d71ea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d71ea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d71ec:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d71ee:	4620      	mov	r0, r4
   d71f0:	f7ff fff2 	bl	d71d8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d71f4:	b124      	cbz	r4, d7200 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d71f6:	4620      	mov	r0, r4
   d71f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d71fc:	f7fc bf4f 	b.w	d409e <_ZdlPv>
   d7200:	bd10      	pop	{r4, pc}

000d7202 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d7202:	4770      	bx	lr

000d7204 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d7204:	2001      	movs	r0, #1
   d7206:	4770      	bx	lr

000d7208 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d7208:	8983      	ldrh	r3, [r0, #12]
   d720a:	b11b      	cbz	r3, d7214 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d720c:	6903      	ldr	r3, [r0, #16]
   d720e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7212:	d102      	bne.n	d721a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d7214:	ed9f 0a05 	vldr	s0, [pc, #20]	; d722c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d7218:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d721a:	ee07 3a90 	vmov	s15, r3
   d721e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7230 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d7222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7226:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d722a:	4770      	bx	lr
   d722c:	00000000 	.word	0x00000000
   d7230:	42c80000 	.word	0x42c80000

000d7234 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d7234:	8983      	ldrh	r3, [r0, #12]
   d7236:	b11b      	cbz	r3, d7240 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d7238:	6983      	ldr	r3, [r0, #24]
   d723a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d723e:	d102      	bne.n	d7246 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d7240:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7258 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d7244:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d7246:	ee07 3a90 	vmov	s15, r3
   d724a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d725c <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d724e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7252:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d7256:	4770      	bx	lr
   d7258:	00000000 	.word	0x00000000
   d725c:	42c80000 	.word	0x42c80000

000d7260 <_ZN10WiFiSignalD0Ev>:
   d7260:	b510      	push	{r4, lr}
   d7262:	2124      	movs	r1, #36	; 0x24
   d7264:	4604      	mov	r4, r0
   d7266:	f000 fa3c 	bl	d76e2 <_ZdlPvj>
   d726a:	4620      	mov	r0, r4
   d726c:	bd10      	pop	{r4, pc}

000d726e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d726e:	2200      	movs	r2, #0
   d7270:	4611      	mov	r1, r2
   d7272:	6840      	ldr	r0, [r0, #4]
   d7274:	f7fe bdce 	b.w	d5e14 <network_listening>

000d7278 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7278:	2200      	movs	r2, #0
   d727a:	4611      	mov	r1, r2
   d727c:	6840      	ldr	r0, [r0, #4]
   d727e:	f7fe bde9 	b.w	d5e54 <network_get_listen_timeout>

000d7282 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7282:	2200      	movs	r2, #0
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	f7fe bddd 	b.w	d5e44 <network_set_listen_timeout>

000d728a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d728a:	2200      	movs	r2, #0
   d728c:	f081 0101 	eor.w	r1, r1, #1
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7fe bdb7 	b.w	d5e04 <network_listen>

000d7296 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7296:	2300      	movs	r3, #0
   d7298:	461a      	mov	r2, r3
   d729a:	4619      	mov	r1, r3
   d729c:	6840      	ldr	r0, [r0, #4]
   d729e:	f7fe bda9 	b.w	d5df4 <network_off>

000d72a2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72a2:	2200      	movs	r2, #0
   d72a4:	4611      	mov	r1, r2
   d72a6:	6840      	ldr	r0, [r0, #4]
   d72a8:	f7fe bd84 	b.w	d5db4 <network_connecting>

000d72ac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72ac:	2200      	movs	r2, #0
   d72ae:	2102      	movs	r1, #2
   d72b0:	6840      	ldr	r0, [r0, #4]
   d72b2:	f7fe bd87 	b.w	d5dc4 <network_disconnect>

000d72b6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72b6:	2300      	movs	r3, #0
   d72b8:	461a      	mov	r2, r3
   d72ba:	6840      	ldr	r0, [r0, #4]
   d72bc:	f7fe bd72 	b.w	d5da4 <network_connect>

000d72c0 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d72c0:	8983      	ldrh	r3, [r0, #12]
   d72c2:	b17b      	cbz	r3, d72e4 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d72c4:	6a03      	ldr	r3, [r0, #32]
   d72c6:	2b00      	cmp	r3, #0
   d72c8:	db0c      	blt.n	d72e4 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d72ca:	ee07 3a90 	vmov	s15, r3
   d72ce:	eddf 6a07 	vldr	s13, [pc, #28]	; d72ec <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d72d2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d72f0 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d72d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d72da:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d72de:	ee27 0a80 	vmul.f32	s0, s15, s0
   d72e2:	4770      	bx	lr
    }
    return -1.0f;
   d72e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d72e8:	4770      	bx	lr
   d72ea:	bf00      	nop
   d72ec:	477fff00 	.word	0x477fff00
   d72f0:	42c80000 	.word	0x42c80000

000d72f4 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d72f4:	8983      	ldrh	r3, [r0, #12]
   d72f6:	b17b      	cbz	r3, d7318 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d72f8:	6943      	ldr	r3, [r0, #20]
   d72fa:	2b00      	cmp	r3, #0
   d72fc:	db0c      	blt.n	d7318 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d72fe:	ee07 3a90 	vmov	s15, r3
   d7302:	eddf 6a07 	vldr	s13, [pc, #28]	; d7320 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d7306:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7324 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d730a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d730e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d7312:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7316:	4770      	bx	lr
    }
    return -1.0f;
   d7318:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d731c:	4770      	bx	lr
   d731e:	bf00      	nop
   d7320:	477fff00 	.word	0x477fff00
   d7324:	42c80000 	.word	0x42c80000

000d7328 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
   d7328:	f990 0004 	ldrsb.w	r0, [r0, #4]
   d732c:	4770      	bx	lr

000d732e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d732e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d7330:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d7332:	4606      	mov	r6, r0
    inf_ = inf;
   d7334:	f100 040c 	add.w	r4, r0, #12
   d7338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d733a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d733c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7340:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d7344:	6933      	ldr	r3, [r6, #16]
   d7346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d734a:	bf0e      	itee	eq
   d734c:	2302      	moveq	r3, #2
   d734e:	2264      	movne	r2, #100	; 0x64
   d7350:	fb93 f3f2 	sdivne	r3, r3, r2
   d7354:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d7356:	69b3      	ldr	r3, [r6, #24]
   d7358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d735c:	bf0e      	itee	eq
   d735e:	2300      	moveq	r3, #0
   d7360:	2264      	movne	r2, #100	; 0x64
   d7362:	fb93 f3f2 	sdivne	r3, r3, r2
   d7366:	60b3      	str	r3, [r6, #8]
    return true;
}
   d7368:	2001      	movs	r0, #1
   d736a:	bd70      	pop	{r4, r5, r6, pc}

000d736c <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d7370:	4b16      	ldr	r3, [pc, #88]	; (d73cc <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d7372:	6003      	str	r3, [r0, #0]
   d7374:	2500      	movs	r5, #0
   d7376:	4688      	mov	r8, r1
   d7378:	2702      	movs	r7, #2
   d737a:	2618      	movs	r6, #24
   d737c:	b086      	sub	sp, #24
   d737e:	6047      	str	r7, [r0, #4]
   d7380:	6085      	str	r5, [r0, #8]
   d7382:	4632      	mov	r2, r6
   d7384:	4629      	mov	r1, r5
   d7386:	4604      	mov	r4, r0
   d7388:	300c      	adds	r0, #12
   d738a:	f001 f9be 	bl	d870a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d738e:	462a      	mov	r2, r5
   d7390:	4629      	mov	r1, r5
   d7392:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d7396:	f7fe fd1d 	bl	d5dd4 <network_ready>
   d739a:	b190      	cbz	r0, d73c2 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d739c:	4632      	mov	r2, r6
   d739e:	4629      	mov	r1, r5
   d73a0:	4668      	mov	r0, sp
   d73a2:	f001 f9b2 	bl	d870a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d73a6:	462a      	mov	r2, r5
   d73a8:	4669      	mov	r1, sp
   d73aa:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d73ac:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d73b0:	f7fe fcb4 	bl	d5d1c <wlan_connected_info>
        if (r == 0) {
   d73b4:	b920      	cbnz	r0, d73c0 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d73b6:	4669      	mov	r1, sp
   d73b8:	4620      	mov	r0, r4
   d73ba:	f7ff ffb8 	bl	d732e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d73be:	e000      	b.n	d73c2 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d73c0:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d73c2:	4620      	mov	r0, r4
   d73c4:	b006      	add	sp, #24
   d73c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73ca:	bf00      	nop
   d73cc:	000d92ec 	.word	0x000d92ec

000d73d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d73d0:	4b02      	ldr	r3, [pc, #8]	; (d73dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d73d2:	2204      	movs	r2, #4
   d73d4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d73d6:	4a02      	ldr	r2, [pc, #8]	; (d73e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d73d8:	601a      	str	r2, [r3, #0]
   d73da:	4770      	bx	lr
   d73dc:	2003e704 	.word	0x2003e704
   d73e0:	000d92b8 	.word	0x000d92b8

000d73e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d73e4:	2300      	movs	r3, #0
   d73e6:	461a      	mov	r2, r3
   d73e8:	6840      	ldr	r0, [r0, #4]
   d73ea:	f7fe bcdb 	b.w	d5da4 <network_connect>

000d73ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d73ee:	2200      	movs	r2, #0
   d73f0:	2102      	movs	r1, #2
   d73f2:	6840      	ldr	r0, [r0, #4]
   d73f4:	f7fe bce6 	b.w	d5dc4 <network_disconnect>

000d73f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d73f8:	2200      	movs	r2, #0
   d73fa:	4611      	mov	r1, r2
   d73fc:	6840      	ldr	r0, [r0, #4]
   d73fe:	f7fe bcd9 	b.w	d5db4 <network_connecting>

000d7402 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7402:	2200      	movs	r2, #0
   d7404:	4611      	mov	r1, r2
   d7406:	6840      	ldr	r0, [r0, #4]
   d7408:	f7fe bce4 	b.w	d5dd4 <network_ready>

000d740c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d740c:	2300      	movs	r3, #0
   d740e:	461a      	mov	r2, r3
   d7410:	4619      	mov	r1, r3
   d7412:	6840      	ldr	r0, [r0, #4]
   d7414:	f7fe bce6 	b.w	d5de4 <network_on>

000d7418 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7418:	2300      	movs	r3, #0
   d741a:	461a      	mov	r2, r3
   d741c:	4619      	mov	r1, r3
   d741e:	6840      	ldr	r0, [r0, #4]
   d7420:	f7fe bce8 	b.w	d5df4 <network_off>

000d7424 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7424:	2200      	movs	r2, #0
   d7426:	f081 0101 	eor.w	r1, r1, #1
   d742a:	6840      	ldr	r0, [r0, #4]
   d742c:	f7fe bcea 	b.w	d5e04 <network_listen>

000d7430 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7430:	2200      	movs	r2, #0
   d7432:	6840      	ldr	r0, [r0, #4]
   d7434:	f7fe bd06 	b.w	d5e44 <network_set_listen_timeout>

000d7438 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7438:	2200      	movs	r2, #0
   d743a:	4611      	mov	r1, r2
   d743c:	6840      	ldr	r0, [r0, #4]
   d743e:	f7fe bd09 	b.w	d5e54 <network_get_listen_timeout>

000d7442 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7442:	2200      	movs	r2, #0
   d7444:	4611      	mov	r1, r2
   d7446:	6840      	ldr	r0, [r0, #4]
   d7448:	f7fe bce4 	b.w	d5e14 <network_listening>

000d744c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d744c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7450:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7452:	b095      	sub	sp, #84	; 0x54
   d7454:	4616      	mov	r6, r2
   d7456:	460d      	mov	r5, r1
   d7458:	4607      	mov	r7, r0
    IPAddress addr;
   d745a:	f7ff f999 	bl	d6790 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d745e:	4621      	mov	r1, r4
   d7460:	2220      	movs	r2, #32
   d7462:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7464:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7466:	f001 f950 	bl	d870a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d746a:	2340      	movs	r3, #64	; 0x40
   d746c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d746e:	4621      	mov	r1, r4
   d7470:	466b      	mov	r3, sp
   d7472:	aa0c      	add	r2, sp, #48	; 0x30
   d7474:	4630      	mov	r0, r6
   d7476:	f7fe fa99 	bl	d59ac <netdb_getaddrinfo>
    if (!r) {
   d747a:	4604      	mov	r4, r0
   d747c:	2800      	cmp	r0, #0
   d747e:	d144      	bne.n	d750a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7480:	4602      	mov	r2, r0
   d7482:	2101      	movs	r1, #1
   d7484:	6868      	ldr	r0, [r5, #4]
   d7486:	f7fe fca5 	bl	d5dd4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d748a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d748c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d748e:	4622      	mov	r2, r4
   d7490:	6868      	ldr	r0, [r5, #4]
   d7492:	f7fe fc9f 	bl	d5dd4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7496:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7498:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d749a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d749c:	2e00      	cmp	r6, #0
   d749e:	d034      	beq.n	d750a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d74a0:	2900      	cmp	r1, #0
   d74a2:	d132      	bne.n	d750a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d74a4:	6873      	ldr	r3, [r6, #4]
   d74a6:	2b02      	cmp	r3, #2
   d74a8:	d002      	beq.n	d74b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d74aa:	2b0a      	cmp	r3, #10
   d74ac:	d009      	beq.n	d74c2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d74ae:	e02a      	b.n	d7506 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d74b0:	f1b8 0f00 	cmp.w	r8, #0
   d74b4:	d027      	beq.n	d7506 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d74b6:	6971      	ldr	r1, [r6, #20]
   d74b8:	4638      	mov	r0, r7
   d74ba:	3104      	adds	r1, #4
   d74bc:	f7ff f9ab 	bl	d6816 <_ZN9IPAddressaSEPKh>
   d74c0:	e020      	b.n	d7504 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d74c2:	f1b9 0f00 	cmp.w	r9, #0
   d74c6:	d01e      	beq.n	d7506 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d74c8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d74ca:	2211      	movs	r2, #17
   d74cc:	a801      	add	r0, sp, #4
   d74ce:	f001 f91c 	bl	d870a <memset>
                    a.v = 6;
   d74d2:	2306      	movs	r3, #6
   d74d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d74d8:	ad01      	add	r5, sp, #4
   d74da:	f104 0308 	add.w	r3, r4, #8
   d74de:	3418      	adds	r4, #24
   d74e0:	6818      	ldr	r0, [r3, #0]
   d74e2:	6859      	ldr	r1, [r3, #4]
   d74e4:	462a      	mov	r2, r5
   d74e6:	c203      	stmia	r2!, {r0, r1}
   d74e8:	3308      	adds	r3, #8
   d74ea:	42a3      	cmp	r3, r4
   d74ec:	4615      	mov	r5, r2
   d74ee:	d1f7      	bne.n	d74e0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d74f0:	a901      	add	r1, sp, #4
   d74f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74f4:	ad07      	add	r5, sp, #28
   d74f6:	f7ff f959 	bl	d67ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d74fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74fc:	1d3c      	adds	r4, r7, #4
   d74fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7500:	682b      	ldr	r3, [r5, #0]
   d7502:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7504:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7506:	69f6      	ldr	r6, [r6, #28]
   d7508:	e7c8      	b.n	d749c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d750a:	9800      	ldr	r0, [sp, #0]
   d750c:	f7fe fa46 	bl	d599c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7510:	4638      	mov	r0, r7
   d7512:	b015      	add	sp, #84	; 0x54
   d7514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7518 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7518:	4b02      	ldr	r3, [pc, #8]	; (d7524 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d751a:	4a03      	ldr	r2, [pc, #12]	; (d7528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d751c:	601a      	str	r2, [r3, #0]
   d751e:	2200      	movs	r2, #0
   d7520:	605a      	str	r2, [r3, #4]
   d7522:	4770      	bx	lr
   d7524:	2003e70c 	.word	0x2003e70c
   d7528:	000d9310 	.word	0x000d9310

000d752c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d752c:	b510      	push	{r4, lr}
   d752e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7530:	480f      	ldr	r0, [pc, #60]	; (d7570 <pinAvailable+0x44>)
   d7532:	f7fe fd29 	bl	d5f88 <_ZN8SPIClass9isEnabledEv>
   d7536:	b128      	cbz	r0, d7544 <pinAvailable+0x18>
   d7538:	f1a4 030b 	sub.w	r3, r4, #11
   d753c:	2b02      	cmp	r3, #2
   d753e:	d801      	bhi.n	d7544 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7540:	2000      	movs	r0, #0
   d7542:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7544:	f000 f8a8 	bl	d7698 <_Z19__fetch_global_Wirev>
   d7548:	f7ff fadf 	bl	d6b0a <_ZN7TwoWire9isEnabledEv>
   d754c:	b108      	cbz	r0, d7552 <pinAvailable+0x26>
   d754e:	2c01      	cmp	r4, #1
   d7550:	d9f6      	bls.n	d7540 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7552:	f7ff fa59 	bl	d6a08 <_Z22__fetch_global_Serial1v>
   d7556:	f7ff fa53 	bl	d6a00 <_ZN11USARTSerial9isEnabledEv>
   d755a:	b118      	cbz	r0, d7564 <pinAvailable+0x38>
   d755c:	f1a4 0309 	sub.w	r3, r4, #9
   d7560:	2b01      	cmp	r3, #1
   d7562:	d9ed      	bls.n	d7540 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7564:	2c23      	cmp	r4, #35	; 0x23
   d7566:	bf8c      	ite	hi
   d7568:	2000      	movhi	r0, #0
   d756a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d756c:	bd10      	pop	{r4, pc}
   d756e:	bf00      	nop
   d7570:	2003e714 	.word	0x2003e714

000d7574 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7574:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7576:	b538      	push	{r3, r4, r5, lr}
   d7578:	4604      	mov	r4, r0
   d757a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d757c:	d80a      	bhi.n	d7594 <pinMode+0x20>
   d757e:	29ff      	cmp	r1, #255	; 0xff
   d7580:	d008      	beq.n	d7594 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7582:	f7ff ffd3 	bl	d752c <pinAvailable>
   d7586:	b128      	cbz	r0, d7594 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7588:	4629      	mov	r1, r5
   d758a:	4620      	mov	r0, r4
}
   d758c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7590:	f7fe ba24 	b.w	d59dc <HAL_Pin_Mode>
   d7594:	bd38      	pop	{r3, r4, r5, pc}

000d7596 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7596:	b538      	push	{r3, r4, r5, lr}
   d7598:	4604      	mov	r4, r0
   d759a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d759c:	f7fe fa26 	bl	d59ec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d75a0:	28ff      	cmp	r0, #255	; 0xff
   d75a2:	d010      	beq.n	d75c6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d75a4:	2806      	cmp	r0, #6
   d75a6:	d804      	bhi.n	d75b2 <digitalWrite+0x1c>
   d75a8:	234d      	movs	r3, #77	; 0x4d
   d75aa:	fa23 f000 	lsr.w	r0, r3, r0
   d75ae:	07c3      	lsls	r3, r0, #31
   d75b0:	d409      	bmi.n	d75c6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d75b2:	4620      	mov	r0, r4
   d75b4:	f7ff ffba 	bl	d752c <pinAvailable>
   d75b8:	b128      	cbz	r0, d75c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75ba:	4629      	mov	r1, r5
   d75bc:	4620      	mov	r0, r4
}
   d75be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75c2:	f7fe ba1b 	b.w	d59fc <HAL_GPIO_Write>
   d75c6:	bd38      	pop	{r3, r4, r5, pc}

000d75c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d75c8:	b510      	push	{r4, lr}
   d75ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d75cc:	f7fe fa0e 	bl	d59ec <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d75d0:	3804      	subs	r0, #4
   d75d2:	b2c0      	uxtb	r0, r0
   d75d4:	2801      	cmp	r0, #1
   d75d6:	d908      	bls.n	d75ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d75d8:	4620      	mov	r0, r4
   d75da:	f7ff ffa7 	bl	d752c <pinAvailable>
   d75de:	b120      	cbz	r0, d75ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75e0:	4620      	mov	r0, r4
}
   d75e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75e6:	f7fe ba11 	b.w	d5a0c <HAL_GPIO_Read>
}
   d75ea:	2000      	movs	r0, #0
   d75ec:	bd10      	pop	{r4, pc}

000d75ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d75ee:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d75f0:	b510      	push	{r4, lr}
   d75f2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d75f4:	bf9c      	itt	ls
   d75f6:	340e      	addls	r4, #14
   d75f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d75fa:	4620      	mov	r0, r4
   d75fc:	f7ff ff96 	bl	d752c <pinAvailable>
   d7600:	b150      	cbz	r0, d7618 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7602:	2103      	movs	r1, #3
   d7604:	4620      	mov	r0, r4
   d7606:	f7fe f9e1 	bl	d59cc <HAL_Validate_Pin_Function>
   d760a:	2803      	cmp	r0, #3
   d760c:	d104      	bne.n	d7618 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d760e:	4620      	mov	r0, r4
}
   d7610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7614:	f7fe ba02 	b.w	d5a1c <HAL_ADC_Read>
}
   d7618:	2000      	movs	r0, #0
   d761a:	bd10      	pop	{r4, pc}

000d761c <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   d761c:	b570      	push	{r4, r5, r6, lr}
   d761e:	4604      	mov	r4, r0
   d7620:	460d      	mov	r5, r1
   d7622:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   d7624:	f7ff ff82 	bl	d752c <pinAvailable>
   d7628:	b198      	cbz	r0, d7652 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d762a:	2102      	movs	r1, #2
   d762c:	4620      	mov	r0, r4
   d762e:	f7fe f9cd 	bl	d59cc <HAL_Validate_Pin_Function>
   d7632:	2802      	cmp	r0, #2
   d7634:	d10d      	bne.n	d7652 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7636:	4620      	mov	r0, r4
   d7638:	f7fe f9d8 	bl	d59ec <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d763c:	2801      	cmp	r0, #1
   d763e:	d001      	beq.n	d7644 <_Z11analogWritetmm+0x28>
   d7640:	2804      	cmp	r0, #4
   d7642:	d106      	bne.n	d7652 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d7644:	4632      	mov	r2, r6
   d7646:	4629      	mov	r1, r5
   d7648:	4620      	mov	r0, r4
    }
}
   d764a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d764e:	f7fe b9ed 	b.w	d5a2c <HAL_PWM_Write_With_Frequency_Ext>
   d7652:	bd70      	pop	{r4, r5, r6, pc}

000d7654 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7654:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7656:	4c0c      	ldr	r4, [pc, #48]	; (d7688 <_GLOBAL__sub_I_SPI+0x34>)
   d7658:	4e0c      	ldr	r6, [pc, #48]	; (d768c <_GLOBAL__sub_I_SPI+0x38>)
   d765a:	4d0d      	ldr	r5, [pc, #52]	; (d7690 <_GLOBAL__sub_I_SPI+0x3c>)
   d765c:	2100      	movs	r1, #0
   d765e:	4620      	mov	r0, r4
   d7660:	f7fe fc7e 	bl	d5f60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7664:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7666:	4c0b      	ldr	r4, [pc, #44]	; (d7694 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7668:	4632      	mov	r2, r6
   d766a:	4629      	mov	r1, r5
   d766c:	f000 f834 	bl	d76d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7670:	2101      	movs	r1, #1
   d7672:	4620      	mov	r0, r4
   d7674:	f7fe fc74 	bl	d5f60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7678:	4632      	mov	r2, r6
   d767a:	4629      	mov	r1, r5
   d767c:	4620      	mov	r0, r4
   d767e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7682:	f000 b829 	b.w	d76d8 <__aeabi_atexit>
   d7686:	bf00      	nop
   d7688:	2003e714 	.word	0x2003e714
   d768c:	2003dc48 	.word	0x2003dc48
   d7690:	000d5f51 	.word	0x000d5f51
   d7694:	2003e724 	.word	0x2003e724

000d7698 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7698:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d769a:	4d0b      	ldr	r5, [pc, #44]	; (d76c8 <_Z19__fetch_global_Wirev+0x30>)
   d769c:	6829      	ldr	r1, [r5, #0]
   d769e:	f011 0401 	ands.w	r4, r1, #1
   d76a2:	d10f      	bne.n	d76c4 <_Z19__fetch_global_Wirev+0x2c>
   d76a4:	4628      	mov	r0, r5
   d76a6:	f7fc fcfe 	bl	d40a6 <__cxa_guard_acquire>
   d76aa:	b158      	cbz	r0, d76c4 <_Z19__fetch_global_Wirev+0x2c>
   d76ac:	4621      	mov	r1, r4
   d76ae:	4807      	ldr	r0, [pc, #28]	; (d76cc <_Z19__fetch_global_Wirev+0x34>)
   d76b0:	f7ff f9fc 	bl	d6aac <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d76b4:	4628      	mov	r0, r5
   d76b6:	f7fc fcfb 	bl	d40b0 <__cxa_guard_release>
   d76ba:	4a05      	ldr	r2, [pc, #20]	; (d76d0 <_Z19__fetch_global_Wirev+0x38>)
   d76bc:	4905      	ldr	r1, [pc, #20]	; (d76d4 <_Z19__fetch_global_Wirev+0x3c>)
   d76be:	4803      	ldr	r0, [pc, #12]	; (d76cc <_Z19__fetch_global_Wirev+0x34>)
   d76c0:	f000 f80a 	bl	d76d8 <__aeabi_atexit>
	return wire;
}
   d76c4:	4801      	ldr	r0, [pc, #4]	; (d76cc <_Z19__fetch_global_Wirev+0x34>)
   d76c6:	bd38      	pop	{r3, r4, r5, pc}
   d76c8:	2003e738 	.word	0x2003e738
   d76cc:	2003e73c 	.word	0x2003e73c
   d76d0:	2003dc48 	.word	0x2003dc48
   d76d4:	000d6a55 	.word	0x000d6a55

000d76d8 <__aeabi_atexit>:
   d76d8:	460b      	mov	r3, r1
   d76da:	4601      	mov	r1, r0
   d76dc:	4618      	mov	r0, r3
   d76de:	f000 bffb 	b.w	d86d8 <__cxa_atexit>

000d76e2 <_ZdlPvj>:
   d76e2:	f7fc bcdc 	b.w	d409e <_ZdlPv>
	...

000d76e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d76e8:	4b18      	ldr	r3, [pc, #96]	; (d774c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d76ea:	681a      	ldr	r2, [r3, #0]
   d76ec:	07d1      	lsls	r1, r2, #31
   d76ee:	bf5c      	itt	pl
   d76f0:	2201      	movpl	r2, #1
   d76f2:	601a      	strpl	r2, [r3, #0]
   d76f4:	4b16      	ldr	r3, [pc, #88]	; (d7750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d76f6:	681a      	ldr	r2, [r3, #0]
   d76f8:	07d2      	lsls	r2, r2, #31
   d76fa:	bf5c      	itt	pl
   d76fc:	2201      	movpl	r2, #1
   d76fe:	601a      	strpl	r2, [r3, #0]
   d7700:	4b14      	ldr	r3, [pc, #80]	; (d7754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7702:	681a      	ldr	r2, [r3, #0]
   d7704:	07d0      	lsls	r0, r2, #31
   d7706:	bf5c      	itt	pl
   d7708:	2201      	movpl	r2, #1
   d770a:	601a      	strpl	r2, [r3, #0]
   d770c:	4b12      	ldr	r3, [pc, #72]	; (d7758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d770e:	681a      	ldr	r2, [r3, #0]
   d7710:	07d1      	lsls	r1, r2, #31
   d7712:	bf5c      	itt	pl
   d7714:	2201      	movpl	r2, #1
   d7716:	601a      	strpl	r2, [r3, #0]
   d7718:	4b10      	ldr	r3, [pc, #64]	; (d775c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d771a:	681a      	ldr	r2, [r3, #0]
   d771c:	07d2      	lsls	r2, r2, #31
   d771e:	bf5c      	itt	pl
   d7720:	2201      	movpl	r2, #1
   d7722:	601a      	strpl	r2, [r3, #0]
   d7724:	4b0e      	ldr	r3, [pc, #56]	; (d7760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7726:	681a      	ldr	r2, [r3, #0]
   d7728:	07d0      	lsls	r0, r2, #31
   d772a:	bf5c      	itt	pl
   d772c:	2201      	movpl	r2, #1
   d772e:	601a      	strpl	r2, [r3, #0]
   d7730:	4b0c      	ldr	r3, [pc, #48]	; (d7764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7732:	681a      	ldr	r2, [r3, #0]
   d7734:	07d1      	lsls	r1, r2, #31
   d7736:	bf5c      	itt	pl
   d7738:	2201      	movpl	r2, #1
   d773a:	601a      	strpl	r2, [r3, #0]
   d773c:	4b0a      	ldr	r3, [pc, #40]	; (d7768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d773e:	681a      	ldr	r2, [r3, #0]
   d7740:	07d2      	lsls	r2, r2, #31
   d7742:	bf5c      	itt	pl
   d7744:	2201      	movpl	r2, #1
   d7746:	601a      	strpl	r2, [r3, #0]
   d7748:	4770      	bx	lr
   d774a:	bf00      	nop
   d774c:	2003e76c 	.word	0x2003e76c
   d7750:	2003e768 	.word	0x2003e768
   d7754:	2003e764 	.word	0x2003e764
   d7758:	2003e760 	.word	0x2003e760
   d775c:	2003e75c 	.word	0x2003e75c
   d7760:	2003e758 	.word	0x2003e758
   d7764:	2003e754 	.word	0x2003e754
   d7768:	2003e750 	.word	0x2003e750

000d776c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d776c:	4b24      	ldr	r3, [pc, #144]	; (d7800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d776e:	681a      	ldr	r2, [r3, #0]
   d7770:	07d0      	lsls	r0, r2, #31
   d7772:	bf5c      	itt	pl
   d7774:	2201      	movpl	r2, #1
   d7776:	601a      	strpl	r2, [r3, #0]
   d7778:	4b22      	ldr	r3, [pc, #136]	; (d7804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d777a:	681a      	ldr	r2, [r3, #0]
   d777c:	07d1      	lsls	r1, r2, #31
   d777e:	bf5c      	itt	pl
   d7780:	2201      	movpl	r2, #1
   d7782:	601a      	strpl	r2, [r3, #0]
   d7784:	4b20      	ldr	r3, [pc, #128]	; (d7808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7786:	681a      	ldr	r2, [r3, #0]
   d7788:	07d2      	lsls	r2, r2, #31
   d778a:	bf5c      	itt	pl
   d778c:	2201      	movpl	r2, #1
   d778e:	601a      	strpl	r2, [r3, #0]
   d7790:	4b1e      	ldr	r3, [pc, #120]	; (d780c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7792:	681a      	ldr	r2, [r3, #0]
   d7794:	07d0      	lsls	r0, r2, #31
   d7796:	bf5c      	itt	pl
   d7798:	2201      	movpl	r2, #1
   d779a:	601a      	strpl	r2, [r3, #0]
   d779c:	4b1c      	ldr	r3, [pc, #112]	; (d7810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d779e:	681a      	ldr	r2, [r3, #0]
   d77a0:	07d1      	lsls	r1, r2, #31
   d77a2:	bf5c      	itt	pl
   d77a4:	2201      	movpl	r2, #1
   d77a6:	601a      	strpl	r2, [r3, #0]
   d77a8:	4b1a      	ldr	r3, [pc, #104]	; (d7814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d77aa:	681a      	ldr	r2, [r3, #0]
   d77ac:	07d2      	lsls	r2, r2, #31
   d77ae:	bf5c      	itt	pl
   d77b0:	2201      	movpl	r2, #1
   d77b2:	601a      	strpl	r2, [r3, #0]
   d77b4:	4b18      	ldr	r3, [pc, #96]	; (d7818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d77b6:	681a      	ldr	r2, [r3, #0]
   d77b8:	07d0      	lsls	r0, r2, #31
   d77ba:	bf5c      	itt	pl
   d77bc:	2201      	movpl	r2, #1
   d77be:	601a      	strpl	r2, [r3, #0]
   d77c0:	4b16      	ldr	r3, [pc, #88]	; (d781c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d77c2:	681a      	ldr	r2, [r3, #0]
   d77c4:	07d1      	lsls	r1, r2, #31
   d77c6:	bf5c      	itt	pl
   d77c8:	2201      	movpl	r2, #1
   d77ca:	601a      	strpl	r2, [r3, #0]
   d77cc:	4b14      	ldr	r3, [pc, #80]	; (d7820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d77ce:	681a      	ldr	r2, [r3, #0]
   d77d0:	07d2      	lsls	r2, r2, #31
   d77d2:	bf5c      	itt	pl
   d77d4:	2201      	movpl	r2, #1
   d77d6:	601a      	strpl	r2, [r3, #0]
   d77d8:	4b12      	ldr	r3, [pc, #72]	; (d7824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d77da:	681a      	ldr	r2, [r3, #0]
   d77dc:	07d0      	lsls	r0, r2, #31
   d77de:	bf5c      	itt	pl
   d77e0:	2201      	movpl	r2, #1
   d77e2:	601a      	strpl	r2, [r3, #0]
   d77e4:	4b10      	ldr	r3, [pc, #64]	; (d7828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d77e6:	681a      	ldr	r2, [r3, #0]
   d77e8:	07d1      	lsls	r1, r2, #31
   d77ea:	bf5c      	itt	pl
   d77ec:	2201      	movpl	r2, #1
   d77ee:	601a      	strpl	r2, [r3, #0]
   d77f0:	4b0e      	ldr	r3, [pc, #56]	; (d782c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d2      	lsls	r2, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4770      	bx	lr
   d77fe:	bf00      	nop
   d7800:	2003e79c 	.word	0x2003e79c
   d7804:	2003e798 	.word	0x2003e798
   d7808:	2003e794 	.word	0x2003e794
   d780c:	2003e790 	.word	0x2003e790
   d7810:	2003e78c 	.word	0x2003e78c
   d7814:	2003e788 	.word	0x2003e788
   d7818:	2003e784 	.word	0x2003e784
   d781c:	2003e780 	.word	0x2003e780
   d7820:	2003e77c 	.word	0x2003e77c
   d7824:	2003e778 	.word	0x2003e778
   d7828:	2003e774 	.word	0x2003e774
   d782c:	2003e770 	.word	0x2003e770

000d7830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7830:	4b24      	ldr	r3, [pc, #144]	; (d78c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7832:	681a      	ldr	r2, [r3, #0]
   d7834:	07d0      	lsls	r0, r2, #31
   d7836:	bf5c      	itt	pl
   d7838:	2201      	movpl	r2, #1
   d783a:	601a      	strpl	r2, [r3, #0]
   d783c:	4b22      	ldr	r3, [pc, #136]	; (d78c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d783e:	681a      	ldr	r2, [r3, #0]
   d7840:	07d1      	lsls	r1, r2, #31
   d7842:	bf5c      	itt	pl
   d7844:	2201      	movpl	r2, #1
   d7846:	601a      	strpl	r2, [r3, #0]
   d7848:	4b20      	ldr	r3, [pc, #128]	; (d78cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d784a:	681a      	ldr	r2, [r3, #0]
   d784c:	07d2      	lsls	r2, r2, #31
   d784e:	bf5c      	itt	pl
   d7850:	2201      	movpl	r2, #1
   d7852:	601a      	strpl	r2, [r3, #0]
   d7854:	4b1e      	ldr	r3, [pc, #120]	; (d78d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7856:	681a      	ldr	r2, [r3, #0]
   d7858:	07d0      	lsls	r0, r2, #31
   d785a:	bf5c      	itt	pl
   d785c:	2201      	movpl	r2, #1
   d785e:	601a      	strpl	r2, [r3, #0]
   d7860:	4b1c      	ldr	r3, [pc, #112]	; (d78d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7862:	681a      	ldr	r2, [r3, #0]
   d7864:	07d1      	lsls	r1, r2, #31
   d7866:	bf5c      	itt	pl
   d7868:	2201      	movpl	r2, #1
   d786a:	601a      	strpl	r2, [r3, #0]
   d786c:	4b1a      	ldr	r3, [pc, #104]	; (d78d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d786e:	681a      	ldr	r2, [r3, #0]
   d7870:	07d2      	lsls	r2, r2, #31
   d7872:	bf5c      	itt	pl
   d7874:	2201      	movpl	r2, #1
   d7876:	601a      	strpl	r2, [r3, #0]
   d7878:	4b18      	ldr	r3, [pc, #96]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d787a:	681a      	ldr	r2, [r3, #0]
   d787c:	07d0      	lsls	r0, r2, #31
   d787e:	bf5c      	itt	pl
   d7880:	2201      	movpl	r2, #1
   d7882:	601a      	strpl	r2, [r3, #0]
   d7884:	4b16      	ldr	r3, [pc, #88]	; (d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7886:	681a      	ldr	r2, [r3, #0]
   d7888:	07d1      	lsls	r1, r2, #31
   d788a:	bf5c      	itt	pl
   d788c:	2201      	movpl	r2, #1
   d788e:	601a      	strpl	r2, [r3, #0]
   d7890:	4b14      	ldr	r3, [pc, #80]	; (d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7892:	681a      	ldr	r2, [r3, #0]
   d7894:	07d2      	lsls	r2, r2, #31
   d7896:	bf5c      	itt	pl
   d7898:	2201      	movpl	r2, #1
   d789a:	601a      	strpl	r2, [r3, #0]
   d789c:	4b12      	ldr	r3, [pc, #72]	; (d78e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d789e:	681a      	ldr	r2, [r3, #0]
   d78a0:	07d0      	lsls	r0, r2, #31
   d78a2:	bf5c      	itt	pl
   d78a4:	2201      	movpl	r2, #1
   d78a6:	601a      	strpl	r2, [r3, #0]
   d78a8:	4b10      	ldr	r3, [pc, #64]	; (d78ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d78aa:	681a      	ldr	r2, [r3, #0]
   d78ac:	07d1      	lsls	r1, r2, #31
   d78ae:	bf5c      	itt	pl
   d78b0:	2201      	movpl	r2, #1
   d78b2:	601a      	strpl	r2, [r3, #0]
   d78b4:	4b0e      	ldr	r3, [pc, #56]	; (d78f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d78b6:	681a      	ldr	r2, [r3, #0]
   d78b8:	07d2      	lsls	r2, r2, #31
   d78ba:	bf5c      	itt	pl
   d78bc:	2201      	movpl	r2, #1
   d78be:	601a      	strpl	r2, [r3, #0]
   d78c0:	4770      	bx	lr
   d78c2:	bf00      	nop
   d78c4:	2003e7cc 	.word	0x2003e7cc
   d78c8:	2003e7c8 	.word	0x2003e7c8
   d78cc:	2003e7c4 	.word	0x2003e7c4
   d78d0:	2003e7c0 	.word	0x2003e7c0
   d78d4:	2003e7bc 	.word	0x2003e7bc
   d78d8:	2003e7b8 	.word	0x2003e7b8
   d78dc:	2003e7b4 	.word	0x2003e7b4
   d78e0:	2003e7b0 	.word	0x2003e7b0
   d78e4:	2003e7ac 	.word	0x2003e7ac
   d78e8:	2003e7a8 	.word	0x2003e7a8
   d78ec:	2003e7a4 	.word	0x2003e7a4
   d78f0:	2003e7a0 	.word	0x2003e7a0

000d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d78f4:	4b18      	ldr	r3, [pc, #96]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d78f6:	681a      	ldr	r2, [r3, #0]
   d78f8:	07d1      	lsls	r1, r2, #31
   d78fa:	bf5c      	itt	pl
   d78fc:	2201      	movpl	r2, #1
   d78fe:	601a      	strpl	r2, [r3, #0]
   d7900:	4b16      	ldr	r3, [pc, #88]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7902:	681a      	ldr	r2, [r3, #0]
   d7904:	07d2      	lsls	r2, r2, #31
   d7906:	bf5c      	itt	pl
   d7908:	2201      	movpl	r2, #1
   d790a:	601a      	strpl	r2, [r3, #0]
   d790c:	4b14      	ldr	r3, [pc, #80]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d790e:	681a      	ldr	r2, [r3, #0]
   d7910:	07d0      	lsls	r0, r2, #31
   d7912:	bf5c      	itt	pl
   d7914:	2201      	movpl	r2, #1
   d7916:	601a      	strpl	r2, [r3, #0]
   d7918:	4b12      	ldr	r3, [pc, #72]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d791a:	681a      	ldr	r2, [r3, #0]
   d791c:	07d1      	lsls	r1, r2, #31
   d791e:	bf5c      	itt	pl
   d7920:	2201      	movpl	r2, #1
   d7922:	601a      	strpl	r2, [r3, #0]
   d7924:	4b10      	ldr	r3, [pc, #64]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7926:	681a      	ldr	r2, [r3, #0]
   d7928:	07d2      	lsls	r2, r2, #31
   d792a:	bf5c      	itt	pl
   d792c:	2201      	movpl	r2, #1
   d792e:	601a      	strpl	r2, [r3, #0]
   d7930:	4b0e      	ldr	r3, [pc, #56]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7932:	681a      	ldr	r2, [r3, #0]
   d7934:	07d0      	lsls	r0, r2, #31
   d7936:	bf5c      	itt	pl
   d7938:	2201      	movpl	r2, #1
   d793a:	601a      	strpl	r2, [r3, #0]
   d793c:	4b0c      	ldr	r3, [pc, #48]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d793e:	681a      	ldr	r2, [r3, #0]
   d7940:	07d1      	lsls	r1, r2, #31
   d7942:	bf5c      	itt	pl
   d7944:	2201      	movpl	r2, #1
   d7946:	601a      	strpl	r2, [r3, #0]
   d7948:	4b0a      	ldr	r3, [pc, #40]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d794a:	681a      	ldr	r2, [r3, #0]
   d794c:	07d2      	lsls	r2, r2, #31
   d794e:	bf5c      	itt	pl
   d7950:	2201      	movpl	r2, #1
   d7952:	601a      	strpl	r2, [r3, #0]
   d7954:	4770      	bx	lr
   d7956:	bf00      	nop
   d7958:	2003e7ec 	.word	0x2003e7ec
   d795c:	2003e7e8 	.word	0x2003e7e8
   d7960:	2003e7e4 	.word	0x2003e7e4
   d7964:	2003e7e0 	.word	0x2003e7e0
   d7968:	2003e7dc 	.word	0x2003e7dc
   d796c:	2003e7d8 	.word	0x2003e7d8
   d7970:	2003e7d4 	.word	0x2003e7d4
   d7974:	2003e7d0 	.word	0x2003e7d0

000d7978 <__aeabi_drsub>:
   d7978:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d797c:	e002      	b.n	d7984 <__adddf3>
   d797e:	bf00      	nop

000d7980 <__aeabi_dsub>:
   d7980:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7984 <__adddf3>:
   d7984:	b530      	push	{r4, r5, lr}
   d7986:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d798a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d798e:	ea94 0f05 	teq	r4, r5
   d7992:	bf08      	it	eq
   d7994:	ea90 0f02 	teqeq	r0, r2
   d7998:	bf1f      	itttt	ne
   d799a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d799e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d79a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d79a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d79aa:	f000 80e2 	beq.w	d7b72 <__adddf3+0x1ee>
   d79ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d79b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d79b6:	bfb8      	it	lt
   d79b8:	426d      	neglt	r5, r5
   d79ba:	dd0c      	ble.n	d79d6 <__adddf3+0x52>
   d79bc:	442c      	add	r4, r5
   d79be:	ea80 0202 	eor.w	r2, r0, r2
   d79c2:	ea81 0303 	eor.w	r3, r1, r3
   d79c6:	ea82 0000 	eor.w	r0, r2, r0
   d79ca:	ea83 0101 	eor.w	r1, r3, r1
   d79ce:	ea80 0202 	eor.w	r2, r0, r2
   d79d2:	ea81 0303 	eor.w	r3, r1, r3
   d79d6:	2d36      	cmp	r5, #54	; 0x36
   d79d8:	bf88      	it	hi
   d79da:	bd30      	pophi	{r4, r5, pc}
   d79dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d79e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d79e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d79e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d79ec:	d002      	beq.n	d79f4 <__adddf3+0x70>
   d79ee:	4240      	negs	r0, r0
   d79f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d79f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d79f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d79fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a00:	d002      	beq.n	d7a08 <__adddf3+0x84>
   d7a02:	4252      	negs	r2, r2
   d7a04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a08:	ea94 0f05 	teq	r4, r5
   d7a0c:	f000 80a7 	beq.w	d7b5e <__adddf3+0x1da>
   d7a10:	f1a4 0401 	sub.w	r4, r4, #1
   d7a14:	f1d5 0e20 	rsbs	lr, r5, #32
   d7a18:	db0d      	blt.n	d7a36 <__adddf3+0xb2>
   d7a1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7a1e:	fa22 f205 	lsr.w	r2, r2, r5
   d7a22:	1880      	adds	r0, r0, r2
   d7a24:	f141 0100 	adc.w	r1, r1, #0
   d7a28:	fa03 f20e 	lsl.w	r2, r3, lr
   d7a2c:	1880      	adds	r0, r0, r2
   d7a2e:	fa43 f305 	asr.w	r3, r3, r5
   d7a32:	4159      	adcs	r1, r3
   d7a34:	e00e      	b.n	d7a54 <__adddf3+0xd0>
   d7a36:	f1a5 0520 	sub.w	r5, r5, #32
   d7a3a:	f10e 0e20 	add.w	lr, lr, #32
   d7a3e:	2a01      	cmp	r2, #1
   d7a40:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7a44:	bf28      	it	cs
   d7a46:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7a4a:	fa43 f305 	asr.w	r3, r3, r5
   d7a4e:	18c0      	adds	r0, r0, r3
   d7a50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7a54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a58:	d507      	bpl.n	d7a6a <__adddf3+0xe6>
   d7a5a:	f04f 0e00 	mov.w	lr, #0
   d7a5e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7a62:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7a66:	eb6e 0101 	sbc.w	r1, lr, r1
   d7a6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7a6e:	d31b      	bcc.n	d7aa8 <__adddf3+0x124>
   d7a70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7a74:	d30c      	bcc.n	d7a90 <__adddf3+0x10c>
   d7a76:	0849      	lsrs	r1, r1, #1
   d7a78:	ea5f 0030 	movs.w	r0, r0, rrx
   d7a7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7a80:	f104 0401 	add.w	r4, r4, #1
   d7a84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7a88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7a8c:	f080 809a 	bcs.w	d7bc4 <__adddf3+0x240>
   d7a90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7a94:	bf08      	it	eq
   d7a96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7a9a:	f150 0000 	adcs.w	r0, r0, #0
   d7a9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7aa2:	ea41 0105 	orr.w	r1, r1, r5
   d7aa6:	bd30      	pop	{r4, r5, pc}
   d7aa8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7aac:	4140      	adcs	r0, r0
   d7aae:	eb41 0101 	adc.w	r1, r1, r1
   d7ab2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ab6:	f1a4 0401 	sub.w	r4, r4, #1
   d7aba:	d1e9      	bne.n	d7a90 <__adddf3+0x10c>
   d7abc:	f091 0f00 	teq	r1, #0
   d7ac0:	bf04      	itt	eq
   d7ac2:	4601      	moveq	r1, r0
   d7ac4:	2000      	moveq	r0, #0
   d7ac6:	fab1 f381 	clz	r3, r1
   d7aca:	bf08      	it	eq
   d7acc:	3320      	addeq	r3, #32
   d7ace:	f1a3 030b 	sub.w	r3, r3, #11
   d7ad2:	f1b3 0220 	subs.w	r2, r3, #32
   d7ad6:	da0c      	bge.n	d7af2 <__adddf3+0x16e>
   d7ad8:	320c      	adds	r2, #12
   d7ada:	dd08      	ble.n	d7aee <__adddf3+0x16a>
   d7adc:	f102 0c14 	add.w	ip, r2, #20
   d7ae0:	f1c2 020c 	rsb	r2, r2, #12
   d7ae4:	fa01 f00c 	lsl.w	r0, r1, ip
   d7ae8:	fa21 f102 	lsr.w	r1, r1, r2
   d7aec:	e00c      	b.n	d7b08 <__adddf3+0x184>
   d7aee:	f102 0214 	add.w	r2, r2, #20
   d7af2:	bfd8      	it	le
   d7af4:	f1c2 0c20 	rsble	ip, r2, #32
   d7af8:	fa01 f102 	lsl.w	r1, r1, r2
   d7afc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b00:	bfdc      	itt	le
   d7b02:	ea41 010c 	orrle.w	r1, r1, ip
   d7b06:	4090      	lslle	r0, r2
   d7b08:	1ae4      	subs	r4, r4, r3
   d7b0a:	bfa2      	ittt	ge
   d7b0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b10:	4329      	orrge	r1, r5
   d7b12:	bd30      	popge	{r4, r5, pc}
   d7b14:	ea6f 0404 	mvn.w	r4, r4
   d7b18:	3c1f      	subs	r4, #31
   d7b1a:	da1c      	bge.n	d7b56 <__adddf3+0x1d2>
   d7b1c:	340c      	adds	r4, #12
   d7b1e:	dc0e      	bgt.n	d7b3e <__adddf3+0x1ba>
   d7b20:	f104 0414 	add.w	r4, r4, #20
   d7b24:	f1c4 0220 	rsb	r2, r4, #32
   d7b28:	fa20 f004 	lsr.w	r0, r0, r4
   d7b2c:	fa01 f302 	lsl.w	r3, r1, r2
   d7b30:	ea40 0003 	orr.w	r0, r0, r3
   d7b34:	fa21 f304 	lsr.w	r3, r1, r4
   d7b38:	ea45 0103 	orr.w	r1, r5, r3
   d7b3c:	bd30      	pop	{r4, r5, pc}
   d7b3e:	f1c4 040c 	rsb	r4, r4, #12
   d7b42:	f1c4 0220 	rsb	r2, r4, #32
   d7b46:	fa20 f002 	lsr.w	r0, r0, r2
   d7b4a:	fa01 f304 	lsl.w	r3, r1, r4
   d7b4e:	ea40 0003 	orr.w	r0, r0, r3
   d7b52:	4629      	mov	r1, r5
   d7b54:	bd30      	pop	{r4, r5, pc}
   d7b56:	fa21 f004 	lsr.w	r0, r1, r4
   d7b5a:	4629      	mov	r1, r5
   d7b5c:	bd30      	pop	{r4, r5, pc}
   d7b5e:	f094 0f00 	teq	r4, #0
   d7b62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7b66:	bf06      	itte	eq
   d7b68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7b6c:	3401      	addeq	r4, #1
   d7b6e:	3d01      	subne	r5, #1
   d7b70:	e74e      	b.n	d7a10 <__adddf3+0x8c>
   d7b72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b76:	bf18      	it	ne
   d7b78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b7c:	d029      	beq.n	d7bd2 <__adddf3+0x24e>
   d7b7e:	ea94 0f05 	teq	r4, r5
   d7b82:	bf08      	it	eq
   d7b84:	ea90 0f02 	teqeq	r0, r2
   d7b88:	d005      	beq.n	d7b96 <__adddf3+0x212>
   d7b8a:	ea54 0c00 	orrs.w	ip, r4, r0
   d7b8e:	bf04      	itt	eq
   d7b90:	4619      	moveq	r1, r3
   d7b92:	4610      	moveq	r0, r2
   d7b94:	bd30      	pop	{r4, r5, pc}
   d7b96:	ea91 0f03 	teq	r1, r3
   d7b9a:	bf1e      	ittt	ne
   d7b9c:	2100      	movne	r1, #0
   d7b9e:	2000      	movne	r0, #0
   d7ba0:	bd30      	popne	{r4, r5, pc}
   d7ba2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7ba6:	d105      	bne.n	d7bb4 <__adddf3+0x230>
   d7ba8:	0040      	lsls	r0, r0, #1
   d7baa:	4149      	adcs	r1, r1
   d7bac:	bf28      	it	cs
   d7bae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7bb2:	bd30      	pop	{r4, r5, pc}
   d7bb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7bb8:	bf3c      	itt	cc
   d7bba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7bbe:	bd30      	popcc	{r4, r5, pc}
   d7bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7bc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bcc:	f04f 0000 	mov.w	r0, #0
   d7bd0:	bd30      	pop	{r4, r5, pc}
   d7bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7bd6:	bf1a      	itte	ne
   d7bd8:	4619      	movne	r1, r3
   d7bda:	4610      	movne	r0, r2
   d7bdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7be0:	bf1c      	itt	ne
   d7be2:	460b      	movne	r3, r1
   d7be4:	4602      	movne	r2, r0
   d7be6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7bea:	bf06      	itte	eq
   d7bec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7bf0:	ea91 0f03 	teqeq	r1, r3
   d7bf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7bf8:	bd30      	pop	{r4, r5, pc}
   d7bfa:	bf00      	nop

000d7bfc <__aeabi_ui2d>:
   d7bfc:	f090 0f00 	teq	r0, #0
   d7c00:	bf04      	itt	eq
   d7c02:	2100      	moveq	r1, #0
   d7c04:	4770      	bxeq	lr
   d7c06:	b530      	push	{r4, r5, lr}
   d7c08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c10:	f04f 0500 	mov.w	r5, #0
   d7c14:	f04f 0100 	mov.w	r1, #0
   d7c18:	e750      	b.n	d7abc <__adddf3+0x138>
   d7c1a:	bf00      	nop

000d7c1c <__aeabi_i2d>:
   d7c1c:	f090 0f00 	teq	r0, #0
   d7c20:	bf04      	itt	eq
   d7c22:	2100      	moveq	r1, #0
   d7c24:	4770      	bxeq	lr
   d7c26:	b530      	push	{r4, r5, lr}
   d7c28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7c34:	bf48      	it	mi
   d7c36:	4240      	negmi	r0, r0
   d7c38:	f04f 0100 	mov.w	r1, #0
   d7c3c:	e73e      	b.n	d7abc <__adddf3+0x138>
   d7c3e:	bf00      	nop

000d7c40 <__aeabi_f2d>:
   d7c40:	0042      	lsls	r2, r0, #1
   d7c42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7c46:	ea4f 0131 	mov.w	r1, r1, rrx
   d7c4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7c4e:	bf1f      	itttt	ne
   d7c50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7c54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7c5c:	4770      	bxne	lr
   d7c5e:	f092 0f00 	teq	r2, #0
   d7c62:	bf14      	ite	ne
   d7c64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c68:	4770      	bxeq	lr
   d7c6a:	b530      	push	{r4, r5, lr}
   d7c6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7c70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7c78:	e720      	b.n	d7abc <__adddf3+0x138>
   d7c7a:	bf00      	nop

000d7c7c <__aeabi_ul2d>:
   d7c7c:	ea50 0201 	orrs.w	r2, r0, r1
   d7c80:	bf08      	it	eq
   d7c82:	4770      	bxeq	lr
   d7c84:	b530      	push	{r4, r5, lr}
   d7c86:	f04f 0500 	mov.w	r5, #0
   d7c8a:	e00a      	b.n	d7ca2 <__aeabi_l2d+0x16>

000d7c8c <__aeabi_l2d>:
   d7c8c:	ea50 0201 	orrs.w	r2, r0, r1
   d7c90:	bf08      	it	eq
   d7c92:	4770      	bxeq	lr
   d7c94:	b530      	push	{r4, r5, lr}
   d7c96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7c9a:	d502      	bpl.n	d7ca2 <__aeabi_l2d+0x16>
   d7c9c:	4240      	negs	r0, r0
   d7c9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7ca2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ca6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7caa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7cae:	f43f aedc 	beq.w	d7a6a <__adddf3+0xe6>
   d7cb2:	f04f 0203 	mov.w	r2, #3
   d7cb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cba:	bf18      	it	ne
   d7cbc:	3203      	addne	r2, #3
   d7cbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cc2:	bf18      	it	ne
   d7cc4:	3203      	addne	r2, #3
   d7cc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7cca:	f1c2 0320 	rsb	r3, r2, #32
   d7cce:	fa00 fc03 	lsl.w	ip, r0, r3
   d7cd2:	fa20 f002 	lsr.w	r0, r0, r2
   d7cd6:	fa01 fe03 	lsl.w	lr, r1, r3
   d7cda:	ea40 000e 	orr.w	r0, r0, lr
   d7cde:	fa21 f102 	lsr.w	r1, r1, r2
   d7ce2:	4414      	add	r4, r2
   d7ce4:	e6c1      	b.n	d7a6a <__adddf3+0xe6>
   d7ce6:	bf00      	nop

000d7ce8 <__aeabi_dmul>:
   d7ce8:	b570      	push	{r4, r5, r6, lr}
   d7cea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7cee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7cf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cf6:	bf1d      	ittte	ne
   d7cf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7cfc:	ea94 0f0c 	teqne	r4, ip
   d7d00:	ea95 0f0c 	teqne	r5, ip
   d7d04:	f000 f8de 	bleq	d7ec4 <__aeabi_dmul+0x1dc>
   d7d08:	442c      	add	r4, r5
   d7d0a:	ea81 0603 	eor.w	r6, r1, r3
   d7d0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7d12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7d16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7d1a:	bf18      	it	ne
   d7d1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7d28:	d038      	beq.n	d7d9c <__aeabi_dmul+0xb4>
   d7d2a:	fba0 ce02 	umull	ip, lr, r0, r2
   d7d2e:	f04f 0500 	mov.w	r5, #0
   d7d32:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7d36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7d3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7d3e:	f04f 0600 	mov.w	r6, #0
   d7d42:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7d46:	f09c 0f00 	teq	ip, #0
   d7d4a:	bf18      	it	ne
   d7d4c:	f04e 0e01 	orrne.w	lr, lr, #1
   d7d50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7d54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7d5c:	d204      	bcs.n	d7d68 <__aeabi_dmul+0x80>
   d7d5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7d62:	416d      	adcs	r5, r5
   d7d64:	eb46 0606 	adc.w	r6, r6, r6
   d7d68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7d6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7d70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7d74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7d78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7d7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7d80:	bf88      	it	hi
   d7d82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d86:	d81e      	bhi.n	d7dc6 <__aeabi_dmul+0xde>
   d7d88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7d8c:	bf08      	it	eq
   d7d8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7d92:	f150 0000 	adcs.w	r0, r0, #0
   d7d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d9a:	bd70      	pop	{r4, r5, r6, pc}
   d7d9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7da0:	ea46 0101 	orr.w	r1, r6, r1
   d7da4:	ea40 0002 	orr.w	r0, r0, r2
   d7da8:	ea81 0103 	eor.w	r1, r1, r3
   d7dac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7db0:	bfc2      	ittt	gt
   d7db2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7db6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7dba:	bd70      	popgt	{r4, r5, r6, pc}
   d7dbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7dc0:	f04f 0e00 	mov.w	lr, #0
   d7dc4:	3c01      	subs	r4, #1
   d7dc6:	f300 80ab 	bgt.w	d7f20 <__aeabi_dmul+0x238>
   d7dca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7dce:	bfde      	ittt	le
   d7dd0:	2000      	movle	r0, #0
   d7dd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7dd6:	bd70      	pople	{r4, r5, r6, pc}
   d7dd8:	f1c4 0400 	rsb	r4, r4, #0
   d7ddc:	3c20      	subs	r4, #32
   d7dde:	da35      	bge.n	d7e4c <__aeabi_dmul+0x164>
   d7de0:	340c      	adds	r4, #12
   d7de2:	dc1b      	bgt.n	d7e1c <__aeabi_dmul+0x134>
   d7de4:	f104 0414 	add.w	r4, r4, #20
   d7de8:	f1c4 0520 	rsb	r5, r4, #32
   d7dec:	fa00 f305 	lsl.w	r3, r0, r5
   d7df0:	fa20 f004 	lsr.w	r0, r0, r4
   d7df4:	fa01 f205 	lsl.w	r2, r1, r5
   d7df8:	ea40 0002 	orr.w	r0, r0, r2
   d7dfc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e08:	fa21 f604 	lsr.w	r6, r1, r4
   d7e0c:	eb42 0106 	adc.w	r1, r2, r6
   d7e10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e14:	bf08      	it	eq
   d7e16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e1a:	bd70      	pop	{r4, r5, r6, pc}
   d7e1c:	f1c4 040c 	rsb	r4, r4, #12
   d7e20:	f1c4 0520 	rsb	r5, r4, #32
   d7e24:	fa00 f304 	lsl.w	r3, r0, r4
   d7e28:	fa20 f005 	lsr.w	r0, r0, r5
   d7e2c:	fa01 f204 	lsl.w	r2, r1, r4
   d7e30:	ea40 0002 	orr.w	r0, r0, r2
   d7e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e3c:	f141 0100 	adc.w	r1, r1, #0
   d7e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e44:	bf08      	it	eq
   d7e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e4a:	bd70      	pop	{r4, r5, r6, pc}
   d7e4c:	f1c4 0520 	rsb	r5, r4, #32
   d7e50:	fa00 f205 	lsl.w	r2, r0, r5
   d7e54:	ea4e 0e02 	orr.w	lr, lr, r2
   d7e58:	fa20 f304 	lsr.w	r3, r0, r4
   d7e5c:	fa01 f205 	lsl.w	r2, r1, r5
   d7e60:	ea43 0302 	orr.w	r3, r3, r2
   d7e64:	fa21 f004 	lsr.w	r0, r1, r4
   d7e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e6c:	fa21 f204 	lsr.w	r2, r1, r4
   d7e70:	ea20 0002 	bic.w	r0, r0, r2
   d7e74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e7c:	bf08      	it	eq
   d7e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e82:	bd70      	pop	{r4, r5, r6, pc}
   d7e84:	f094 0f00 	teq	r4, #0
   d7e88:	d10f      	bne.n	d7eaa <__aeabi_dmul+0x1c2>
   d7e8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7e8e:	0040      	lsls	r0, r0, #1
   d7e90:	eb41 0101 	adc.w	r1, r1, r1
   d7e94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7e98:	bf08      	it	eq
   d7e9a:	3c01      	subeq	r4, #1
   d7e9c:	d0f7      	beq.n	d7e8e <__aeabi_dmul+0x1a6>
   d7e9e:	ea41 0106 	orr.w	r1, r1, r6
   d7ea2:	f095 0f00 	teq	r5, #0
   d7ea6:	bf18      	it	ne
   d7ea8:	4770      	bxne	lr
   d7eaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7eae:	0052      	lsls	r2, r2, #1
   d7eb0:	eb43 0303 	adc.w	r3, r3, r3
   d7eb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7eb8:	bf08      	it	eq
   d7eba:	3d01      	subeq	r5, #1
   d7ebc:	d0f7      	beq.n	d7eae <__aeabi_dmul+0x1c6>
   d7ebe:	ea43 0306 	orr.w	r3, r3, r6
   d7ec2:	4770      	bx	lr
   d7ec4:	ea94 0f0c 	teq	r4, ip
   d7ec8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ecc:	bf18      	it	ne
   d7ece:	ea95 0f0c 	teqne	r5, ip
   d7ed2:	d00c      	beq.n	d7eee <__aeabi_dmul+0x206>
   d7ed4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ed8:	bf18      	it	ne
   d7eda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ede:	d1d1      	bne.n	d7e84 <__aeabi_dmul+0x19c>
   d7ee0:	ea81 0103 	eor.w	r1, r1, r3
   d7ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ee8:	f04f 0000 	mov.w	r0, #0
   d7eec:	bd70      	pop	{r4, r5, r6, pc}
   d7eee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ef2:	bf06      	itte	eq
   d7ef4:	4610      	moveq	r0, r2
   d7ef6:	4619      	moveq	r1, r3
   d7ef8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7efc:	d019      	beq.n	d7f32 <__aeabi_dmul+0x24a>
   d7efe:	ea94 0f0c 	teq	r4, ip
   d7f02:	d102      	bne.n	d7f0a <__aeabi_dmul+0x222>
   d7f04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f08:	d113      	bne.n	d7f32 <__aeabi_dmul+0x24a>
   d7f0a:	ea95 0f0c 	teq	r5, ip
   d7f0e:	d105      	bne.n	d7f1c <__aeabi_dmul+0x234>
   d7f10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7f14:	bf1c      	itt	ne
   d7f16:	4610      	movne	r0, r2
   d7f18:	4619      	movne	r1, r3
   d7f1a:	d10a      	bne.n	d7f32 <__aeabi_dmul+0x24a>
   d7f1c:	ea81 0103 	eor.w	r1, r1, r3
   d7f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f2c:	f04f 0000 	mov.w	r0, #0
   d7f30:	bd70      	pop	{r4, r5, r6, pc}
   d7f32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7f3a:	bd70      	pop	{r4, r5, r6, pc}

000d7f3c <__aeabi_ddiv>:
   d7f3c:	b570      	push	{r4, r5, r6, lr}
   d7f3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f4a:	bf1d      	ittte	ne
   d7f4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f50:	ea94 0f0c 	teqne	r4, ip
   d7f54:	ea95 0f0c 	teqne	r5, ip
   d7f58:	f000 f8a7 	bleq	d80aa <__aeabi_ddiv+0x16e>
   d7f5c:	eba4 0405 	sub.w	r4, r4, r5
   d7f60:	ea81 0e03 	eor.w	lr, r1, r3
   d7f64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7f68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f6c:	f000 8088 	beq.w	d8080 <__aeabi_ddiv+0x144>
   d7f70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7f78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7f7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7f80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7f84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7f88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7f8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7f90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7f94:	429d      	cmp	r5, r3
   d7f96:	bf08      	it	eq
   d7f98:	4296      	cmpeq	r6, r2
   d7f9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7f9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7fa2:	d202      	bcs.n	d7faa <__aeabi_ddiv+0x6e>
   d7fa4:	085b      	lsrs	r3, r3, #1
   d7fa6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7faa:	1ab6      	subs	r6, r6, r2
   d7fac:	eb65 0503 	sbc.w	r5, r5, r3
   d7fb0:	085b      	lsrs	r3, r3, #1
   d7fb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7fba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7fbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fc6:	bf22      	ittt	cs
   d7fc8:	1ab6      	subcs	r6, r6, r2
   d7fca:	4675      	movcs	r5, lr
   d7fcc:	ea40 000c 	orrcs.w	r0, r0, ip
   d7fd0:	085b      	lsrs	r3, r3, #1
   d7fd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fde:	bf22      	ittt	cs
   d7fe0:	1ab6      	subcs	r6, r6, r2
   d7fe2:	4675      	movcs	r5, lr
   d7fe4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7fe8:	085b      	lsrs	r3, r3, #1
   d7fea:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fee:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ff6:	bf22      	ittt	cs
   d7ff8:	1ab6      	subcs	r6, r6, r2
   d7ffa:	4675      	movcs	r5, lr
   d7ffc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8000:	085b      	lsrs	r3, r3, #1
   d8002:	ea4f 0232 	mov.w	r2, r2, rrx
   d8006:	ebb6 0e02 	subs.w	lr, r6, r2
   d800a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d800e:	bf22      	ittt	cs
   d8010:	1ab6      	subcs	r6, r6, r2
   d8012:	4675      	movcs	r5, lr
   d8014:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8018:	ea55 0e06 	orrs.w	lr, r5, r6
   d801c:	d018      	beq.n	d8050 <__aeabi_ddiv+0x114>
   d801e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8022:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8026:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d802a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d802e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8032:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8036:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d803a:	d1c0      	bne.n	d7fbe <__aeabi_ddiv+0x82>
   d803c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8040:	d10b      	bne.n	d805a <__aeabi_ddiv+0x11e>
   d8042:	ea41 0100 	orr.w	r1, r1, r0
   d8046:	f04f 0000 	mov.w	r0, #0
   d804a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d804e:	e7b6      	b.n	d7fbe <__aeabi_ddiv+0x82>
   d8050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8054:	bf04      	itt	eq
   d8056:	4301      	orreq	r1, r0
   d8058:	2000      	moveq	r0, #0
   d805a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d805e:	bf88      	it	hi
   d8060:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8064:	f63f aeaf 	bhi.w	d7dc6 <__aeabi_dmul+0xde>
   d8068:	ebb5 0c03 	subs.w	ip, r5, r3
   d806c:	bf04      	itt	eq
   d806e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8072:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8076:	f150 0000 	adcs.w	r0, r0, #0
   d807a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d807e:	bd70      	pop	{r4, r5, r6, pc}
   d8080:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8084:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8088:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d808c:	bfc2      	ittt	gt
   d808e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8092:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8096:	bd70      	popgt	{r4, r5, r6, pc}
   d8098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d809c:	f04f 0e00 	mov.w	lr, #0
   d80a0:	3c01      	subs	r4, #1
   d80a2:	e690      	b.n	d7dc6 <__aeabi_dmul+0xde>
   d80a4:	ea45 0e06 	orr.w	lr, r5, r6
   d80a8:	e68d      	b.n	d7dc6 <__aeabi_dmul+0xde>
   d80aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80ae:	ea94 0f0c 	teq	r4, ip
   d80b2:	bf08      	it	eq
   d80b4:	ea95 0f0c 	teqeq	r5, ip
   d80b8:	f43f af3b 	beq.w	d7f32 <__aeabi_dmul+0x24a>
   d80bc:	ea94 0f0c 	teq	r4, ip
   d80c0:	d10a      	bne.n	d80d8 <__aeabi_ddiv+0x19c>
   d80c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d80c6:	f47f af34 	bne.w	d7f32 <__aeabi_dmul+0x24a>
   d80ca:	ea95 0f0c 	teq	r5, ip
   d80ce:	f47f af25 	bne.w	d7f1c <__aeabi_dmul+0x234>
   d80d2:	4610      	mov	r0, r2
   d80d4:	4619      	mov	r1, r3
   d80d6:	e72c      	b.n	d7f32 <__aeabi_dmul+0x24a>
   d80d8:	ea95 0f0c 	teq	r5, ip
   d80dc:	d106      	bne.n	d80ec <__aeabi_ddiv+0x1b0>
   d80de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d80e2:	f43f aefd 	beq.w	d7ee0 <__aeabi_dmul+0x1f8>
   d80e6:	4610      	mov	r0, r2
   d80e8:	4619      	mov	r1, r3
   d80ea:	e722      	b.n	d7f32 <__aeabi_dmul+0x24a>
   d80ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80f0:	bf18      	it	ne
   d80f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80f6:	f47f aec5 	bne.w	d7e84 <__aeabi_dmul+0x19c>
   d80fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d80fe:	f47f af0d 	bne.w	d7f1c <__aeabi_dmul+0x234>
   d8102:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8106:	f47f aeeb 	bne.w	d7ee0 <__aeabi_dmul+0x1f8>
   d810a:	e712      	b.n	d7f32 <__aeabi_dmul+0x24a>

000d810c <__gedf2>:
   d810c:	f04f 3cff 	mov.w	ip, #4294967295
   d8110:	e006      	b.n	d8120 <__cmpdf2+0x4>
   d8112:	bf00      	nop

000d8114 <__ledf2>:
   d8114:	f04f 0c01 	mov.w	ip, #1
   d8118:	e002      	b.n	d8120 <__cmpdf2+0x4>
   d811a:	bf00      	nop

000d811c <__cmpdf2>:
   d811c:	f04f 0c01 	mov.w	ip, #1
   d8120:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8124:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8128:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d812c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8130:	bf18      	it	ne
   d8132:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8136:	d01b      	beq.n	d8170 <__cmpdf2+0x54>
   d8138:	b001      	add	sp, #4
   d813a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d813e:	bf0c      	ite	eq
   d8140:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8144:	ea91 0f03 	teqne	r1, r3
   d8148:	bf02      	ittt	eq
   d814a:	ea90 0f02 	teqeq	r0, r2
   d814e:	2000      	moveq	r0, #0
   d8150:	4770      	bxeq	lr
   d8152:	f110 0f00 	cmn.w	r0, #0
   d8156:	ea91 0f03 	teq	r1, r3
   d815a:	bf58      	it	pl
   d815c:	4299      	cmppl	r1, r3
   d815e:	bf08      	it	eq
   d8160:	4290      	cmpeq	r0, r2
   d8162:	bf2c      	ite	cs
   d8164:	17d8      	asrcs	r0, r3, #31
   d8166:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d816a:	f040 0001 	orr.w	r0, r0, #1
   d816e:	4770      	bx	lr
   d8170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8178:	d102      	bne.n	d8180 <__cmpdf2+0x64>
   d817a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d817e:	d107      	bne.n	d8190 <__cmpdf2+0x74>
   d8180:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8188:	d1d6      	bne.n	d8138 <__cmpdf2+0x1c>
   d818a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d818e:	d0d3      	beq.n	d8138 <__cmpdf2+0x1c>
   d8190:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8194:	4770      	bx	lr
   d8196:	bf00      	nop

000d8198 <__aeabi_cdrcmple>:
   d8198:	4684      	mov	ip, r0
   d819a:	4610      	mov	r0, r2
   d819c:	4662      	mov	r2, ip
   d819e:	468c      	mov	ip, r1
   d81a0:	4619      	mov	r1, r3
   d81a2:	4663      	mov	r3, ip
   d81a4:	e000      	b.n	d81a8 <__aeabi_cdcmpeq>
   d81a6:	bf00      	nop

000d81a8 <__aeabi_cdcmpeq>:
   d81a8:	b501      	push	{r0, lr}
   d81aa:	f7ff ffb7 	bl	d811c <__cmpdf2>
   d81ae:	2800      	cmp	r0, #0
   d81b0:	bf48      	it	mi
   d81b2:	f110 0f00 	cmnmi.w	r0, #0
   d81b6:	bd01      	pop	{r0, pc}

000d81b8 <__aeabi_dcmpeq>:
   d81b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81bc:	f7ff fff4 	bl	d81a8 <__aeabi_cdcmpeq>
   d81c0:	bf0c      	ite	eq
   d81c2:	2001      	moveq	r0, #1
   d81c4:	2000      	movne	r0, #0
   d81c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d81ca:	bf00      	nop

000d81cc <__aeabi_dcmplt>:
   d81cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81d0:	f7ff ffea 	bl	d81a8 <__aeabi_cdcmpeq>
   d81d4:	bf34      	ite	cc
   d81d6:	2001      	movcc	r0, #1
   d81d8:	2000      	movcs	r0, #0
   d81da:	f85d fb08 	ldr.w	pc, [sp], #8
   d81de:	bf00      	nop

000d81e0 <__aeabi_dcmple>:
   d81e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81e4:	f7ff ffe0 	bl	d81a8 <__aeabi_cdcmpeq>
   d81e8:	bf94      	ite	ls
   d81ea:	2001      	movls	r0, #1
   d81ec:	2000      	movhi	r0, #0
   d81ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d81f2:	bf00      	nop

000d81f4 <__aeabi_dcmpge>:
   d81f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81f8:	f7ff ffce 	bl	d8198 <__aeabi_cdrcmple>
   d81fc:	bf94      	ite	ls
   d81fe:	2001      	movls	r0, #1
   d8200:	2000      	movhi	r0, #0
   d8202:	f85d fb08 	ldr.w	pc, [sp], #8
   d8206:	bf00      	nop

000d8208 <__aeabi_dcmpgt>:
   d8208:	f84d ed08 	str.w	lr, [sp, #-8]!
   d820c:	f7ff ffc4 	bl	d8198 <__aeabi_cdrcmple>
   d8210:	bf34      	ite	cc
   d8212:	2001      	movcc	r0, #1
   d8214:	2000      	movcs	r0, #0
   d8216:	f85d fb08 	ldr.w	pc, [sp], #8
   d821a:	bf00      	nop

000d821c <__aeabi_dcmpun>:
   d821c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8224:	d102      	bne.n	d822c <__aeabi_dcmpun+0x10>
   d8226:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d822a:	d10a      	bne.n	d8242 <__aeabi_dcmpun+0x26>
   d822c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8234:	d102      	bne.n	d823c <__aeabi_dcmpun+0x20>
   d8236:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d823a:	d102      	bne.n	d8242 <__aeabi_dcmpun+0x26>
   d823c:	f04f 0000 	mov.w	r0, #0
   d8240:	4770      	bx	lr
   d8242:	f04f 0001 	mov.w	r0, #1
   d8246:	4770      	bx	lr

000d8248 <__aeabi_d2iz>:
   d8248:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d824c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8250:	d215      	bcs.n	d827e <__aeabi_d2iz+0x36>
   d8252:	d511      	bpl.n	d8278 <__aeabi_d2iz+0x30>
   d8254:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8258:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d825c:	d912      	bls.n	d8284 <__aeabi_d2iz+0x3c>
   d825e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8266:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d826a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d826e:	fa23 f002 	lsr.w	r0, r3, r2
   d8272:	bf18      	it	ne
   d8274:	4240      	negne	r0, r0
   d8276:	4770      	bx	lr
   d8278:	f04f 0000 	mov.w	r0, #0
   d827c:	4770      	bx	lr
   d827e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8282:	d105      	bne.n	d8290 <__aeabi_d2iz+0x48>
   d8284:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8288:	bf08      	it	eq
   d828a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d828e:	4770      	bx	lr
   d8290:	f04f 0000 	mov.w	r0, #0
   d8294:	4770      	bx	lr
   d8296:	bf00      	nop

000d8298 <__aeabi_d2uiz>:
   d8298:	004a      	lsls	r2, r1, #1
   d829a:	d211      	bcs.n	d82c0 <__aeabi_d2uiz+0x28>
   d829c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d82a0:	d211      	bcs.n	d82c6 <__aeabi_d2uiz+0x2e>
   d82a2:	d50d      	bpl.n	d82c0 <__aeabi_d2uiz+0x28>
   d82a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d82a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d82ac:	d40e      	bmi.n	d82cc <__aeabi_d2uiz+0x34>
   d82ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d82b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d82b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d82ba:	fa23 f002 	lsr.w	r0, r3, r2
   d82be:	4770      	bx	lr
   d82c0:	f04f 0000 	mov.w	r0, #0
   d82c4:	4770      	bx	lr
   d82c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d82ca:	d102      	bne.n	d82d2 <__aeabi_d2uiz+0x3a>
   d82cc:	f04f 30ff 	mov.w	r0, #4294967295
   d82d0:	4770      	bx	lr
   d82d2:	f04f 0000 	mov.w	r0, #0
   d82d6:	4770      	bx	lr

000d82d8 <__aeabi_d2f>:
   d82d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d82dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d82e0:	bf24      	itt	cs
   d82e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d82e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d82ea:	d90d      	bls.n	d8308 <__aeabi_d2f+0x30>
   d82ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d82f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d82f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d82f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d82fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8300:	bf08      	it	eq
   d8302:	f020 0001 	biceq.w	r0, r0, #1
   d8306:	4770      	bx	lr
   d8308:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d830c:	d121      	bne.n	d8352 <__aeabi_d2f+0x7a>
   d830e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8312:	bfbc      	itt	lt
   d8314:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8318:	4770      	bxlt	lr
   d831a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d831e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8322:	f1c2 0218 	rsb	r2, r2, #24
   d8326:	f1c2 0c20 	rsb	ip, r2, #32
   d832a:	fa10 f30c 	lsls.w	r3, r0, ip
   d832e:	fa20 f002 	lsr.w	r0, r0, r2
   d8332:	bf18      	it	ne
   d8334:	f040 0001 	orrne.w	r0, r0, #1
   d8338:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d833c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8340:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8344:	ea40 000c 	orr.w	r0, r0, ip
   d8348:	fa23 f302 	lsr.w	r3, r3, r2
   d834c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8350:	e7cc      	b.n	d82ec <__aeabi_d2f+0x14>
   d8352:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8356:	d107      	bne.n	d8368 <__aeabi_d2f+0x90>
   d8358:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d835c:	bf1e      	ittt	ne
   d835e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8362:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8366:	4770      	bxne	lr
   d8368:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d836c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8370:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8374:	4770      	bx	lr
   d8376:	bf00      	nop

000d8378 <__aeabi_uldivmod>:
   d8378:	b953      	cbnz	r3, d8390 <__aeabi_uldivmod+0x18>
   d837a:	b94a      	cbnz	r2, d8390 <__aeabi_uldivmod+0x18>
   d837c:	2900      	cmp	r1, #0
   d837e:	bf08      	it	eq
   d8380:	2800      	cmpeq	r0, #0
   d8382:	bf1c      	itt	ne
   d8384:	f04f 31ff 	movne.w	r1, #4294967295
   d8388:	f04f 30ff 	movne.w	r0, #4294967295
   d838c:	f000 b9a2 	b.w	d86d4 <__aeabi_idiv0>
   d8390:	f1ad 0c08 	sub.w	ip, sp, #8
   d8394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8398:	f000 f82a 	bl	d83f0 <__udivmoddi4>
   d839c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d83a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d83a4:	b004      	add	sp, #16
   d83a6:	4770      	bx	lr

000d83a8 <__aeabi_d2ulz>:
   d83a8:	b5d0      	push	{r4, r6, r7, lr}
   d83aa:	2200      	movs	r2, #0
   d83ac:	4b0e      	ldr	r3, [pc, #56]	; (d83e8 <__aeabi_d2ulz+0x40>)
   d83ae:	4606      	mov	r6, r0
   d83b0:	460f      	mov	r7, r1
   d83b2:	f7ff fc99 	bl	d7ce8 <__aeabi_dmul>
   d83b6:	f7ff ff6f 	bl	d8298 <__aeabi_d2uiz>
   d83ba:	4604      	mov	r4, r0
   d83bc:	f7ff fc1e 	bl	d7bfc <__aeabi_ui2d>
   d83c0:	2200      	movs	r2, #0
   d83c2:	4b0a      	ldr	r3, [pc, #40]	; (d83ec <__aeabi_d2ulz+0x44>)
   d83c4:	f7ff fc90 	bl	d7ce8 <__aeabi_dmul>
   d83c8:	4602      	mov	r2, r0
   d83ca:	460b      	mov	r3, r1
   d83cc:	4630      	mov	r0, r6
   d83ce:	4639      	mov	r1, r7
   d83d0:	f7ff fad6 	bl	d7980 <__aeabi_dsub>
   d83d4:	f7ff ff60 	bl	d8298 <__aeabi_d2uiz>
   d83d8:	4623      	mov	r3, r4
   d83da:	2200      	movs	r2, #0
   d83dc:	ea42 0200 	orr.w	r2, r2, r0
   d83e0:	4610      	mov	r0, r2
   d83e2:	4619      	mov	r1, r3
   d83e4:	bdd0      	pop	{r4, r6, r7, pc}
   d83e6:	bf00      	nop
   d83e8:	3df00000 	.word	0x3df00000
   d83ec:	41f00000 	.word	0x41f00000

000d83f0 <__udivmoddi4>:
   d83f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83f4:	468c      	mov	ip, r1
   d83f6:	460e      	mov	r6, r1
   d83f8:	4604      	mov	r4, r0
   d83fa:	9d08      	ldr	r5, [sp, #32]
   d83fc:	2b00      	cmp	r3, #0
   d83fe:	d150      	bne.n	d84a2 <__udivmoddi4+0xb2>
   d8400:	428a      	cmp	r2, r1
   d8402:	4617      	mov	r7, r2
   d8404:	d96c      	bls.n	d84e0 <__udivmoddi4+0xf0>
   d8406:	fab2 fe82 	clz	lr, r2
   d840a:	f1be 0f00 	cmp.w	lr, #0
   d840e:	d00b      	beq.n	d8428 <__udivmoddi4+0x38>
   d8410:	f1ce 0420 	rsb	r4, lr, #32
   d8414:	fa20 f404 	lsr.w	r4, r0, r4
   d8418:	fa01 f60e 	lsl.w	r6, r1, lr
   d841c:	ea44 0c06 	orr.w	ip, r4, r6
   d8420:	fa02 f70e 	lsl.w	r7, r2, lr
   d8424:	fa00 f40e 	lsl.w	r4, r0, lr
   d8428:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d842c:	0c22      	lsrs	r2, r4, #16
   d842e:	fbbc f0f9 	udiv	r0, ip, r9
   d8432:	fa1f f887 	uxth.w	r8, r7
   d8436:	fb09 c610 	mls	r6, r9, r0, ip
   d843a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d843e:	fb00 f308 	mul.w	r3, r0, r8
   d8442:	42b3      	cmp	r3, r6
   d8444:	d909      	bls.n	d845a <__udivmoddi4+0x6a>
   d8446:	19f6      	adds	r6, r6, r7
   d8448:	f100 32ff 	add.w	r2, r0, #4294967295
   d844c:	f080 8122 	bcs.w	d8694 <__udivmoddi4+0x2a4>
   d8450:	42b3      	cmp	r3, r6
   d8452:	f240 811f 	bls.w	d8694 <__udivmoddi4+0x2a4>
   d8456:	3802      	subs	r0, #2
   d8458:	443e      	add	r6, r7
   d845a:	1af6      	subs	r6, r6, r3
   d845c:	b2a2      	uxth	r2, r4
   d845e:	fbb6 f3f9 	udiv	r3, r6, r9
   d8462:	fb09 6613 	mls	r6, r9, r3, r6
   d8466:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d846a:	fb03 f808 	mul.w	r8, r3, r8
   d846e:	45a0      	cmp	r8, r4
   d8470:	d909      	bls.n	d8486 <__udivmoddi4+0x96>
   d8472:	19e4      	adds	r4, r4, r7
   d8474:	f103 32ff 	add.w	r2, r3, #4294967295
   d8478:	f080 810a 	bcs.w	d8690 <__udivmoddi4+0x2a0>
   d847c:	45a0      	cmp	r8, r4
   d847e:	f240 8107 	bls.w	d8690 <__udivmoddi4+0x2a0>
   d8482:	3b02      	subs	r3, #2
   d8484:	443c      	add	r4, r7
   d8486:	ebc8 0404 	rsb	r4, r8, r4
   d848a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d848e:	2100      	movs	r1, #0
   d8490:	2d00      	cmp	r5, #0
   d8492:	d062      	beq.n	d855a <__udivmoddi4+0x16a>
   d8494:	fa24 f40e 	lsr.w	r4, r4, lr
   d8498:	2300      	movs	r3, #0
   d849a:	602c      	str	r4, [r5, #0]
   d849c:	606b      	str	r3, [r5, #4]
   d849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84a2:	428b      	cmp	r3, r1
   d84a4:	d907      	bls.n	d84b6 <__udivmoddi4+0xc6>
   d84a6:	2d00      	cmp	r5, #0
   d84a8:	d055      	beq.n	d8556 <__udivmoddi4+0x166>
   d84aa:	2100      	movs	r1, #0
   d84ac:	e885 0041 	stmia.w	r5, {r0, r6}
   d84b0:	4608      	mov	r0, r1
   d84b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84b6:	fab3 f183 	clz	r1, r3
   d84ba:	2900      	cmp	r1, #0
   d84bc:	f040 8090 	bne.w	d85e0 <__udivmoddi4+0x1f0>
   d84c0:	42b3      	cmp	r3, r6
   d84c2:	d302      	bcc.n	d84ca <__udivmoddi4+0xda>
   d84c4:	4282      	cmp	r2, r0
   d84c6:	f200 80f8 	bhi.w	d86ba <__udivmoddi4+0x2ca>
   d84ca:	1a84      	subs	r4, r0, r2
   d84cc:	eb66 0603 	sbc.w	r6, r6, r3
   d84d0:	2001      	movs	r0, #1
   d84d2:	46b4      	mov	ip, r6
   d84d4:	2d00      	cmp	r5, #0
   d84d6:	d040      	beq.n	d855a <__udivmoddi4+0x16a>
   d84d8:	e885 1010 	stmia.w	r5, {r4, ip}
   d84dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84e0:	b912      	cbnz	r2, d84e8 <__udivmoddi4+0xf8>
   d84e2:	2701      	movs	r7, #1
   d84e4:	fbb7 f7f2 	udiv	r7, r7, r2
   d84e8:	fab7 fe87 	clz	lr, r7
   d84ec:	f1be 0f00 	cmp.w	lr, #0
   d84f0:	d135      	bne.n	d855e <__udivmoddi4+0x16e>
   d84f2:	1bf3      	subs	r3, r6, r7
   d84f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d84f8:	fa1f fc87 	uxth.w	ip, r7
   d84fc:	2101      	movs	r1, #1
   d84fe:	fbb3 f0f8 	udiv	r0, r3, r8
   d8502:	0c22      	lsrs	r2, r4, #16
   d8504:	fb08 3610 	mls	r6, r8, r0, r3
   d8508:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d850c:	fb0c f300 	mul.w	r3, ip, r0
   d8510:	42b3      	cmp	r3, r6
   d8512:	d907      	bls.n	d8524 <__udivmoddi4+0x134>
   d8514:	19f6      	adds	r6, r6, r7
   d8516:	f100 32ff 	add.w	r2, r0, #4294967295
   d851a:	d202      	bcs.n	d8522 <__udivmoddi4+0x132>
   d851c:	42b3      	cmp	r3, r6
   d851e:	f200 80ce 	bhi.w	d86be <__udivmoddi4+0x2ce>
   d8522:	4610      	mov	r0, r2
   d8524:	1af6      	subs	r6, r6, r3
   d8526:	b2a2      	uxth	r2, r4
   d8528:	fbb6 f3f8 	udiv	r3, r6, r8
   d852c:	fb08 6613 	mls	r6, r8, r3, r6
   d8530:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8534:	fb0c fc03 	mul.w	ip, ip, r3
   d8538:	45a4      	cmp	ip, r4
   d853a:	d907      	bls.n	d854c <__udivmoddi4+0x15c>
   d853c:	19e4      	adds	r4, r4, r7
   d853e:	f103 32ff 	add.w	r2, r3, #4294967295
   d8542:	d202      	bcs.n	d854a <__udivmoddi4+0x15a>
   d8544:	45a4      	cmp	ip, r4
   d8546:	f200 80b5 	bhi.w	d86b4 <__udivmoddi4+0x2c4>
   d854a:	4613      	mov	r3, r2
   d854c:	ebcc 0404 	rsb	r4, ip, r4
   d8550:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8554:	e79c      	b.n	d8490 <__udivmoddi4+0xa0>
   d8556:	4629      	mov	r1, r5
   d8558:	4628      	mov	r0, r5
   d855a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d855e:	f1ce 0120 	rsb	r1, lr, #32
   d8562:	fa06 f30e 	lsl.w	r3, r6, lr
   d8566:	fa07 f70e 	lsl.w	r7, r7, lr
   d856a:	fa20 f901 	lsr.w	r9, r0, r1
   d856e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8572:	40ce      	lsrs	r6, r1
   d8574:	ea49 0903 	orr.w	r9, r9, r3
   d8578:	fbb6 faf8 	udiv	sl, r6, r8
   d857c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d8580:	fb08 661a 	mls	r6, r8, sl, r6
   d8584:	fa1f fc87 	uxth.w	ip, r7
   d8588:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d858c:	fb0a f20c 	mul.w	r2, sl, ip
   d8590:	429a      	cmp	r2, r3
   d8592:	fa00 f40e 	lsl.w	r4, r0, lr
   d8596:	d90a      	bls.n	d85ae <__udivmoddi4+0x1be>
   d8598:	19db      	adds	r3, r3, r7
   d859a:	f10a 31ff 	add.w	r1, sl, #4294967295
   d859e:	f080 8087 	bcs.w	d86b0 <__udivmoddi4+0x2c0>
   d85a2:	429a      	cmp	r2, r3
   d85a4:	f240 8084 	bls.w	d86b0 <__udivmoddi4+0x2c0>
   d85a8:	f1aa 0a02 	sub.w	sl, sl, #2
   d85ac:	443b      	add	r3, r7
   d85ae:	1a9b      	subs	r3, r3, r2
   d85b0:	fa1f f989 	uxth.w	r9, r9
   d85b4:	fbb3 f1f8 	udiv	r1, r3, r8
   d85b8:	fb08 3311 	mls	r3, r8, r1, r3
   d85bc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d85c0:	fb01 f60c 	mul.w	r6, r1, ip
   d85c4:	429e      	cmp	r6, r3
   d85c6:	d907      	bls.n	d85d8 <__udivmoddi4+0x1e8>
   d85c8:	19db      	adds	r3, r3, r7
   d85ca:	f101 32ff 	add.w	r2, r1, #4294967295
   d85ce:	d26b      	bcs.n	d86a8 <__udivmoddi4+0x2b8>
   d85d0:	429e      	cmp	r6, r3
   d85d2:	d969      	bls.n	d86a8 <__udivmoddi4+0x2b8>
   d85d4:	3902      	subs	r1, #2
   d85d6:	443b      	add	r3, r7
   d85d8:	1b9b      	subs	r3, r3, r6
   d85da:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d85de:	e78e      	b.n	d84fe <__udivmoddi4+0x10e>
   d85e0:	f1c1 0e20 	rsb	lr, r1, #32
   d85e4:	fa22 f40e 	lsr.w	r4, r2, lr
   d85e8:	408b      	lsls	r3, r1
   d85ea:	4323      	orrs	r3, r4
   d85ec:	fa20 f70e 	lsr.w	r7, r0, lr
   d85f0:	fa06 f401 	lsl.w	r4, r6, r1
   d85f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d85f8:	fa26 f60e 	lsr.w	r6, r6, lr
   d85fc:	433c      	orrs	r4, r7
   d85fe:	fbb6 f9fc 	udiv	r9, r6, ip
   d8602:	0c27      	lsrs	r7, r4, #16
   d8604:	fb0c 6619 	mls	r6, ip, r9, r6
   d8608:	fa1f f883 	uxth.w	r8, r3
   d860c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8610:	fb09 f708 	mul.w	r7, r9, r8
   d8614:	42b7      	cmp	r7, r6
   d8616:	fa02 f201 	lsl.w	r2, r2, r1
   d861a:	fa00 fa01 	lsl.w	sl, r0, r1
   d861e:	d908      	bls.n	d8632 <__udivmoddi4+0x242>
   d8620:	18f6      	adds	r6, r6, r3
   d8622:	f109 30ff 	add.w	r0, r9, #4294967295
   d8626:	d241      	bcs.n	d86ac <__udivmoddi4+0x2bc>
   d8628:	42b7      	cmp	r7, r6
   d862a:	d93f      	bls.n	d86ac <__udivmoddi4+0x2bc>
   d862c:	f1a9 0902 	sub.w	r9, r9, #2
   d8630:	441e      	add	r6, r3
   d8632:	1bf6      	subs	r6, r6, r7
   d8634:	b2a0      	uxth	r0, r4
   d8636:	fbb6 f4fc 	udiv	r4, r6, ip
   d863a:	fb0c 6614 	mls	r6, ip, r4, r6
   d863e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d8642:	fb04 f808 	mul.w	r8, r4, r8
   d8646:	45b8      	cmp	r8, r7
   d8648:	d907      	bls.n	d865a <__udivmoddi4+0x26a>
   d864a:	18ff      	adds	r7, r7, r3
   d864c:	f104 30ff 	add.w	r0, r4, #4294967295
   d8650:	d228      	bcs.n	d86a4 <__udivmoddi4+0x2b4>
   d8652:	45b8      	cmp	r8, r7
   d8654:	d926      	bls.n	d86a4 <__udivmoddi4+0x2b4>
   d8656:	3c02      	subs	r4, #2
   d8658:	441f      	add	r7, r3
   d865a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d865e:	ebc8 0707 	rsb	r7, r8, r7
   d8662:	fba0 8902 	umull	r8, r9, r0, r2
   d8666:	454f      	cmp	r7, r9
   d8668:	4644      	mov	r4, r8
   d866a:	464e      	mov	r6, r9
   d866c:	d314      	bcc.n	d8698 <__udivmoddi4+0x2a8>
   d866e:	d029      	beq.n	d86c4 <__udivmoddi4+0x2d4>
   d8670:	b365      	cbz	r5, d86cc <__udivmoddi4+0x2dc>
   d8672:	ebba 0304 	subs.w	r3, sl, r4
   d8676:	eb67 0706 	sbc.w	r7, r7, r6
   d867a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d867e:	40cb      	lsrs	r3, r1
   d8680:	40cf      	lsrs	r7, r1
   d8682:	ea4e 0303 	orr.w	r3, lr, r3
   d8686:	e885 0088 	stmia.w	r5, {r3, r7}
   d868a:	2100      	movs	r1, #0
   d868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8690:	4613      	mov	r3, r2
   d8692:	e6f8      	b.n	d8486 <__udivmoddi4+0x96>
   d8694:	4610      	mov	r0, r2
   d8696:	e6e0      	b.n	d845a <__udivmoddi4+0x6a>
   d8698:	ebb8 0402 	subs.w	r4, r8, r2
   d869c:	eb69 0603 	sbc.w	r6, r9, r3
   d86a0:	3801      	subs	r0, #1
   d86a2:	e7e5      	b.n	d8670 <__udivmoddi4+0x280>
   d86a4:	4604      	mov	r4, r0
   d86a6:	e7d8      	b.n	d865a <__udivmoddi4+0x26a>
   d86a8:	4611      	mov	r1, r2
   d86aa:	e795      	b.n	d85d8 <__udivmoddi4+0x1e8>
   d86ac:	4681      	mov	r9, r0
   d86ae:	e7c0      	b.n	d8632 <__udivmoddi4+0x242>
   d86b0:	468a      	mov	sl, r1
   d86b2:	e77c      	b.n	d85ae <__udivmoddi4+0x1be>
   d86b4:	3b02      	subs	r3, #2
   d86b6:	443c      	add	r4, r7
   d86b8:	e748      	b.n	d854c <__udivmoddi4+0x15c>
   d86ba:	4608      	mov	r0, r1
   d86bc:	e70a      	b.n	d84d4 <__udivmoddi4+0xe4>
   d86be:	3802      	subs	r0, #2
   d86c0:	443e      	add	r6, r7
   d86c2:	e72f      	b.n	d8524 <__udivmoddi4+0x134>
   d86c4:	45c2      	cmp	sl, r8
   d86c6:	d3e7      	bcc.n	d8698 <__udivmoddi4+0x2a8>
   d86c8:	463e      	mov	r6, r7
   d86ca:	e7d1      	b.n	d8670 <__udivmoddi4+0x280>
   d86cc:	4629      	mov	r1, r5
   d86ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86d2:	bf00      	nop

000d86d4 <__aeabi_idiv0>:
   d86d4:	4770      	bx	lr
   d86d6:	bf00      	nop

000d86d8 <__cxa_atexit>:
   d86d8:	b510      	push	{r4, lr}
   d86da:	4c05      	ldr	r4, [pc, #20]	; (d86f0 <__cxa_atexit+0x18>)
   d86dc:	4613      	mov	r3, r2
   d86de:	b12c      	cbz	r4, d86ec <__cxa_atexit+0x14>
   d86e0:	460a      	mov	r2, r1
   d86e2:	4601      	mov	r1, r0
   d86e4:	2002      	movs	r0, #2
   d86e6:	f3af 8000 	nop.w
   d86ea:	bd10      	pop	{r4, pc}
   d86ec:	4620      	mov	r0, r4
   d86ee:	bd10      	pop	{r4, pc}
   d86f0:	00000000 	.word	0x00000000

000d86f4 <memcpy>:
   d86f4:	b510      	push	{r4, lr}
   d86f6:	1e43      	subs	r3, r0, #1
   d86f8:	440a      	add	r2, r1
   d86fa:	4291      	cmp	r1, r2
   d86fc:	d004      	beq.n	d8708 <memcpy+0x14>
   d86fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8702:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8706:	e7f8      	b.n	d86fa <memcpy+0x6>
   d8708:	bd10      	pop	{r4, pc}

000d870a <memset>:
   d870a:	4402      	add	r2, r0
   d870c:	4603      	mov	r3, r0
   d870e:	4293      	cmp	r3, r2
   d8710:	d002      	beq.n	d8718 <memset+0xe>
   d8712:	f803 1b01 	strb.w	r1, [r3], #1
   d8716:	e7fa      	b.n	d870e <memset+0x4>
   d8718:	4770      	bx	lr
	...

000d871c <srand>:
   d871c:	b538      	push	{r3, r4, r5, lr}
   d871e:	4b12      	ldr	r3, [pc, #72]	; (d8768 <srand+0x4c>)
   d8720:	681c      	ldr	r4, [r3, #0]
   d8722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8724:	4605      	mov	r5, r0
   d8726:	b9d3      	cbnz	r3, d875e <srand+0x42>
   d8728:	2018      	movs	r0, #24
   d872a:	f7fd fbb3 	bl	d5e94 <malloc>
   d872e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8732:	63a0      	str	r0, [r4, #56]	; 0x38
   d8734:	8003      	strh	r3, [r0, #0]
   d8736:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d873a:	8043      	strh	r3, [r0, #2]
   d873c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8740:	8083      	strh	r3, [r0, #4]
   d8742:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8746:	80c3      	strh	r3, [r0, #6]
   d8748:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d874c:	8103      	strh	r3, [r0, #8]
   d874e:	2305      	movs	r3, #5
   d8750:	8143      	strh	r3, [r0, #10]
   d8752:	230b      	movs	r3, #11
   d8754:	8183      	strh	r3, [r0, #12]
   d8756:	2201      	movs	r2, #1
   d8758:	2300      	movs	r3, #0
   d875a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d875e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8760:	2200      	movs	r2, #0
   d8762:	611d      	str	r5, [r3, #16]
   d8764:	615a      	str	r2, [r3, #20]
   d8766:	bd38      	pop	{r3, r4, r5, pc}
   d8768:	2003dc44 	.word	0x2003dc44

000d876c <strcmp>:
   d876c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8770:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8774:	2a01      	cmp	r2, #1
   d8776:	bf28      	it	cs
   d8778:	429a      	cmpcs	r2, r3
   d877a:	d0f7      	beq.n	d876c <strcmp>
   d877c:	1ad0      	subs	r0, r2, r3
   d877e:	4770      	bx	lr

000d8780 <strcpy>:
   d8780:	4603      	mov	r3, r0
   d8782:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8786:	f803 2b01 	strb.w	r2, [r3], #1
   d878a:	2a00      	cmp	r2, #0
   d878c:	d1f9      	bne.n	d8782 <strcpy+0x2>
   d878e:	4770      	bx	lr

000d8790 <strlen>:
   d8790:	4603      	mov	r3, r0
   d8792:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8796:	2a00      	cmp	r2, #0
   d8798:	d1fb      	bne.n	d8792 <strlen+0x2>
   d879a:	1a18      	subs	r0, r3, r0
   d879c:	3801      	subs	r0, #1
   d879e:	4770      	bx	lr

000d87a0 <dynalib_user>:
   d87a0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d87b0:	0000 0000 4544 4f4d 4f00 4646 4d00 444f     ....DEMO.OFF.MOD
   d87c0:	2045 004c 4f4d 4544 5420 4d00 444f 2045     E L.MODE T.MODE 
   d87d0:	0055 2020 6300 6168 676e 4d65 5451 0054     U.  .changeMQTT.
   d87e0:	6863 6e61 6567 654e 7774 726f 006b 754c     changeNetwork.Lu
   d87f0:	696d 616e 6972 7361 4300 6e6f 6365 6174     minarias.Conecta
   d8800:	646e 206f 6f63 206e 6573 7672 7265 4d20     ndo con server M
   d8810:	5451 0054 6e61 7479 6968 676e 6100 6772     QTT.anything.arg
   d8820:	6e6f 6c43 6569 746e 6300 6168 676e 4d65     onClient.changeM
   d8830:	646f 0065 002f 754c 696d 616e 6972 0061     ode./.Luminaria.
   d8840:	6f43 656e 7463 6e61 6f64 6320 6e6f 7320     Conectando con s
   d8850:	7265 6576 2072 514d 5454 4320 6e6f 6966     erver MQTT Confi
   d8860:	0067 6f43 6e6e 7865 6f69 206e 514d 5454     g.Connexion MQTT
   d8870:	4320 4e4f 4946 2047 7865 7469 736f 0061      CONFIG exitosa.
   d8880:	6f43 6e6e 7865 6f69 206e 514d 5454 6520     Connexion MQTT e
   d8890:	6978 6f74 6173 4300 6e6f 6365 6174 646e     xitosa.Conectand
   d88a0:	206f 6f63 206e 6573 736e 726f 7365 4920     o con sensores I
   d88b0:	414e 3132 2e39 2e2e 0021 694d 6964 6e65     NA219...!.Midien
   d88c0:	6f64 5620 4c4f 4154 454a 7920 4320 524f     do VOLTAJE y COR
   d88d0:	4952 4e45 4554 6320 6e6f 4920 414e 3132     RIENTE con INA21
   d88e0:	2039 2e2e 002e 6c65 6569 6563 3172 3039     9 ....eliecer190
   d88f0:	0038 5241 5554 4f52 5620 4c45 5a41 5551     8.ARTURO VELAZQU
   d8900:	5a45 6e00 7765 6144 6174 5200 5353 3a49     EZ.newData.RSSI:
   d8910:	0020 3032 2e39 3831 2e32 3132 2e38 3731      .209.182.218.17
   d8920:	0035 3931 2e32 3631 2e38 2e31 0036 0400     5.192.168.1.6...
   d8930:	514d 5454 0004 4d06 4951 6473 0370 0000     MQTT...MQIsdp...
   d8940:	24b8 0000 1194 0000 0258 0000 06a4 0000     .$......X.......
   d8950:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8960:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8970:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8980:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8990:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d89a0:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d89b0:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d89c0:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d89d0:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d89e0:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d89f0:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a00:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8a10:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d8a20:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8a30:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8a40:	0258 0000 0672 0000 0258 0000 24ea 0000     X...r...X....$..
   d8a50:	11c6 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8a60:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a70:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a80:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a90:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8aa0:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8ab0:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8ac0:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8ad0:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8ae0:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8af0:	0672 0000 028a 0000 0226 0000 0226 0000     r.......&...&...
   d8b00:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8b10:	0226 0000 0226 0000 06a4 0000 0258 0000     &...&.......X...
   d8b20:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8b30:	0226 0000 0258 0000 06a4 0000 0226 0000     &...X.......&...
   d8b40:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8b50:	0672 0000 0258 0000 24ea 0000 1194 0000     r...X....$......
   d8b60:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8b70:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8b80:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8b90:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8ba0:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8bb0:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8bc0:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8bd0:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8be0:	0258 0000 0672 0000 028a 0000 0226 0000     X...r.......&...
   d8bf0:	0226 0000 0258 0000 0226 0000 06a4 0000     &...X...&.......
   d8c00:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c10:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c20:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8c30:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8c40:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8c50:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8c60:	0258 0000 2580 0000 1194 0000 0258 0000     X....%......X...
   d8c70:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8c80:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8c90:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ca0:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8cb0:	0258 0000 0226 0000 06a4 0000 0258 0000     X...&.......X...
   d8cc0:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8cd0:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8ce0:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8cf0:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8d00:	0226 0000 0226 0000 0258 0000 0226 0000     &...&...X...&...
   d8d10:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8d20:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8d30:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8d40:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8d50:	0226 0000 0258 0000 06a4 0000 0258 0000     &...X.......X...
   d8d60:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8d70:	24ea 0000 1194 0000 0258 0000 0672 0000     .$......X...r...
   d8d80:	028a 0000 0226 0000 0226 0000 0258 0000     ....&...&...X...
   d8d90:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8da0:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8db0:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8dc0:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8dd0:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8de0:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8df0:	0258 0000 06a4 0000 0226 0000 0258 0000     X.......&...X...
   d8e00:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8e10:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8e20:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8e30:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8e40:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8e50:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8e60:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d8e70:	0226 0000 06a4 0000 0258 0000 254e 0000     &.......X...N%..
   d8e80:	1194 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8e90:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ea0:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8eb0:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8ec0:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ed0:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8ee0:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8ef0:	0672 0000 0258 0000 06a4 0000 0258 0000     r...X.......X...
   d8f00:	0672 0000 028a 0000 0672 0000 0258 0000     r.......r...X...
   d8f10:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8f20:	0258 0000 0226 0000 0226 0000 0258 0000     X...&...&...X...
   d8f30:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8f40:	0226 0000 028a 0000 0226 0000 0226 0000     &.......&...&...
   d8f50:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8f60:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8f70:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8f80:	06a4 0000 0258 0000 4f4d 4544 4d20 7b00     ....X...MODE M.{
   d8f90:	2200 6469 3a22 2200 3065 6630 6563 3836     ."id":."e00fce68
   d8fa0:	6164 6635 3564 6463 3930 3864 3032 3837     da5fd5cd09d82078
   d8fb0:	0022 002c 6e22 6d61 2265 003a 4222 6269     ".,."name":."Bib
   d8fc0:	696c 746f 6365 2261 2200 6f6d 6564 3a22     lioteca"."mode":
   d8fd0:	2200 6164 6174 3a22 2200 656c 2264 003a     ."data":."led":.
   d8fe0:	7622 6c6f 6174 6567 3a22 2200 7563 7272     "voltage":."curr
   d8ff0:	6e65 2274 003a 007d 7022 2276 003a 6222     ent":.}."pv":."b
   d9000:	7461 6574 7972 3a22 0000 0000               attery":....

000d900c <_ZTVN5spark13EthernetClassE>:
	...
   d9014:	5f33 000d 5f29 000d 5f1f 000d 5f15 000d     3_..)_..._..._..
   d9024:	5f09 000d 5efd 000d 5ef1 000d 5ee9 000d     ._...^...^...^..
   d9034:	5edf 000d 5ed5 000d 744d 000d               .^...^..Mt..

000d9040 <_ZTV8SPIClass>:
	...
   d9048:	5f51 000d 5f53 000d 616e 006e 766f 0066     Q_..S_..nan.ovf.
   d9058:	6e69 0066 6e6c 6600 006e 6f63 6564 6400     inf.ln.fn.code.d
   d9068:	7465 6961 006c 0a0d 2500 3130 7530 0020     etail....%010u .
   d9078:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
   d9088:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
   d9098:	3d20 0020 6162 6475 5300 7265 6169 006c      = .baud.Serial.
   d90a8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d90b8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d90c8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d90d8:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d90e8:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d90f8:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d9108:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
   d9118:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d9128:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d9138:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   d9148:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   d9158:	6373 6974 656d 0000                         sctime..

000d9160 <_ZTV9IPAddress>:
	...
   d9168:	672d 000d 671d 000d 671f 000d               -g...g...g..

000d9174 <_ZTV9USBSerial>:
	...
   d917c:	6845 000d 6895 000d 68a3 000d 632d 000d     Eh...h...h..-c..
   d918c:	6881 000d 6847 000d 685d 000d 688f 000d     .h..Gh..]h...h..
   d919c:	6873 000d 6841 000d                         sh..Ah..

000d91a4 <_ZTV11USARTSerial>:
	...
   d91ac:	6951 000d 69a1 000d 69af 000d 632d 000d     Qi...i...i..-c..
   d91bc:	6965 000d 6987 000d 6973 000d 699b 000d     ei...i..si...i..
   d91cc:	6953 000d 6957 000d                         Si..Wi..

000d91d4 <_ZTV7TwoWire>:
	...
   d91dc:	6a55 000d 6a9f 000d 6a77 000d 6a57 000d     Uj...j..wj..Wj..
   d91ec:	6a7f 000d 6a87 000d 6a8f 000d 6a97 000d     .j...j...j...j..

000d91fc <_ZTVN5spark9MeshClassE>:
	...
   d9204:	6b71 000d 6b67 000d 6b5d 000d 6b53 000d     qk..gk..]k..Sk..
   d9214:	6b47 000d 6b3b 000d 6b2f 000d 6b27 000d     Gk..;k../k..'k..
   d9224:	6b1d 000d 6b13 000d 744d 000d               .k...k..Mt..

000d9230 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9238:	6cfd 000d 6d03 000d 71eb 000d 6d11 000d     .l...m...q...m..
   d9248:	6cff 000d                                   .l..

000d924c <_ZTV9TCPClient>:
	...
   d9254:	4749 000d 477d 000d 6c75 000d 6c8f 000d     IG..}G..ul...l..
   d9264:	7091 000d 6ed3 000d 6ea5 000d 6cb9 000d     .p...n...n...l..
   d9274:	6f69 000d 6d15 000d 6f07 000d 7063 000d     io...m...o..cp..
   d9284:	6cbb 000d 6cf3 000d 6ca1 000d 6e05 000d     .l...l...l...n..
   d9294:	6e85 000d 6977 6972 676e 7200 6365 2076     .n..wiring.recv 
   d92a4:	7265 6f72 2072 203d 6425 0000               error = %d..

000d92b0 <_ZTVN5spark9WiFiClassE>:
	...
   d92b8:	72b7 000d 72ad 000d 72a3 000d 417d 000d     .r...r...r..}A..
   d92c8:	4187 000d 7297 000d 728b 000d 7283 000d     .A...r...r...r..
   d92d8:	7279 000d 726f 000d 744d 000d               yr..or..Mt..

000d92e4 <_ZTV10WiFiSignal>:
	...
   d92ec:	7203 000d 7261 000d 7205 000d 72f5 000d     .r..ar...r...r..
   d92fc:	7209 000d 72c1 000d 7235 000d               .r...r..5r..

000d9308 <_ZTVN5spark12NetworkClassE>:
	...
   d9310:	73e5 000d 73ef 000d 73f9 000d 7403 000d     .s...s...s...t..
   d9320:	740d 000d 7419 000d 7425 000d 7431 000d     .t...t..%t..1t..
   d9330:	7439 000d 7443 000d 744d 000d               9t..Ct..Mt..

000d933c <__sf_fake_stdin>:
	...

000d935c <__sf_fake_stdout>:
	...

000d937c <__sf_fake_stderr>:
	...
   d939c:	0043                                        C.

000d939e <link_const_variable_data_end>:
	...

000d93a0 <link_constructors_location>:
   d93a0:	000d46a9 	.word	0x000d46a9
   d93a4:	000d4fa3 	.word	0x000d4fa3
   d93a8:	000d5801 	.word	0x000d5801
   d93ac:	000d5997 	.word	0x000d5997
   d93b0:	000d5f3d 	.word	0x000d5f3d
   d93b4:	000d5f91 	.word	0x000d5f91
   d93b8:	000d631d 	.word	0x000d631d
   d93bc:	000d65e5 	.word	0x000d65e5
   d93c0:	000d65f5 	.word	0x000d65f5
   d93c4:	000d662d 	.word	0x000d662d
   d93c8:	000d6c25 	.word	0x000d6c25
   d93cc:	000d73d1 	.word	0x000d73d1
   d93d0:	000d7519 	.word	0x000d7519
   d93d4:	000d7655 	.word	0x000d7655
   d93d8:	000d76e9 	.word	0x000d76e9
   d93dc:	000d776d 	.word	0x000d776d
   d93e0:	000d7831 	.word	0x000d7831
   d93e4:	000d78f5 	.word	0x000d78f5

000d93e8 <link_constructors_end>:
	...
