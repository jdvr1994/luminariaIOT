
d:/PERSONAL/UNIVERSIDAD/MonitoriaIOT2020/ScriptArgon/luminariaIOT/target/1.4.4/argon/luminariaIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053e0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9400  000d9400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  0001949c  2**0
                  CONTENTS
  5 .data         00000068  2003dbe0  000d9408  0000dbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ba8  2003dc48  2003dc48  0001dc48  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9470  000d9470  00019470  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9498  000d9498  00019498  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f2e94  00000000  00000000  0001949c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013c41  00000000  00000000  0010c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00022ef6  00000000  00000000  0011ff71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002cb8  00000000  00000000  00142e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004e70  00000000  00000000  00145b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a102  00000000  00000000  0014a98f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00031739  00000000  00000000  00184a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010344c  00000000  00000000  001b61ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e03c  00000000  00000000  002b9618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb63 	bl	d86fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb68 	bl	d8712 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dbe0 	.word	0x2003dbe0
   d404c:	000d9408 	.word	0x000d9408
   d4050:	2003dc48 	.word	0x2003dc48
   d4054:	2003dc48 	.word	0x2003dc48
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fb47 	bl	d66f0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d93f4 	.word	0x000d93f4
   d4084:	000d93a8 	.word	0x000d93a8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba22 	b.w	d44d0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa89 	bl	d45a4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 baf9 	b.w	d668c <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 beff 	b.w	d5e9c <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f001 befd 	b.w	d5e9c <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f001 bf03 	b.w	d5eac <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f001 bf01 	b.w	d5eac <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_GLOBAL__sub_I__ZN3LSCC2Ei>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40ba:	f001 bc83 	b.w	d59c4 <HAL_Pin_Map>
	...

000d40c0 <_Z8callbackPcPhj>:
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char p[length + 1];
   d40c2:	f102 0308 	add.w	r3, r2, #8
   d40c6:	f023 0307 	bic.w	r3, r3, #7
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40ca:	af00      	add	r7, sp, #0
    char p[length + 1];
   d40cc:	ebad 0d03 	sub.w	sp, sp, r3
float cAverage[3];

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40d0:	4614      	mov	r4, r2
   d40d2:	4606      	mov	r6, r0
    char p[length + 1];
    memcpy(p, payload, length);
   d40d4:	4668      	mov	r0, sp
   d40d6:	f004 fb11 	bl	d86fc <memcpy>
    p[length] = NULL;
   d40da:	2300      	movs	r3, #0

    if (!strcmp(p, "DEMO"))
   d40dc:	491e      	ldr	r1, [pc, #120]	; (d4158 <_Z8callbackPcPhj+0x98>)
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
   d40de:	f80d 3004 	strb.w	r3, [sp, r4]

    if (!strcmp(p, "DEMO"))
   d40e2:	4668      	mov	r0, sp
   d40e4:	f004 fb46 	bl	d8774 <strcmp>

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
   d40e8:	466d      	mov	r5, sp
    memcpy(p, payload, length);
    p[length] = NULL;

    if (!strcmp(p, "DEMO"))
   d40ea:	4601      	mov	r1, r0
   d40ec:	b1e0      	cbz	r0, d4128 <_Z8callbackPcPhj+0x68>
        lightController.sendCommand(0); //  Send DEMO command
    else if (!strcmp(p, "OFF"))
   d40ee:	491b      	ldr	r1, [pc, #108]	; (d415c <_Z8callbackPcPhj+0x9c>)
   d40f0:	4668      	mov	r0, sp
   d40f2:	f004 fb3f 	bl	d8774 <strcmp>
   d40f6:	b908      	cbnz	r0, d40fc <_Z8callbackPcPhj+0x3c>
        lightController.sendCommand(1);  //  Send OFF command
   d40f8:	2101      	movs	r1, #1
   d40fa:	e015      	b.n	d4128 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE L"))
   d40fc:	4918      	ldr	r1, [pc, #96]	; (d4160 <_Z8callbackPcPhj+0xa0>)
   d40fe:	4668      	mov	r0, sp
   d4100:	f004 fb38 	bl	d8774 <strcmp>
   d4104:	b908      	cbnz	r0, d410a <_Z8callbackPcPhj+0x4a>
        lightController.sendCommand(2);  // Send L command
   d4106:	2102      	movs	r1, #2
   d4108:	e00e      	b.n	d4128 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE T"))
   d410a:	4916      	ldr	r1, [pc, #88]	; (d4164 <_Z8callbackPcPhj+0xa4>)
   d410c:	4668      	mov	r0, sp
   d410e:	f004 fb31 	bl	d8774 <strcmp>
   d4112:	b908      	cbnz	r0, d4118 <_Z8callbackPcPhj+0x58>
        lightController.sendCommand(3);  // Send T command
   d4114:	2103      	movs	r1, #3
   d4116:	e007      	b.n	d4128 <_Z8callbackPcPhj+0x68>
    else if (!strcmp(p, "MODE U"))
   d4118:	4913      	ldr	r1, [pc, #76]	; (d4168 <_Z8callbackPcPhj+0xa8>)
   d411a:	4668      	mov	r0, sp
   d411c:	f004 fb2a 	bl	d8774 <strcmp>
   d4120:	b908      	cbnz	r0, d4126 <_Z8callbackPcPhj+0x66>
        lightController.sendCommand(4);  // Send U command
   d4122:	2104      	movs	r1, #4
   d4124:	e000      	b.n	d4128 <_Z8callbackPcPhj+0x68>
    else
        lightController.sendCommand(5);  // Send M command
   d4126:	2105      	movs	r1, #5
   d4128:	4810      	ldr	r0, [pc, #64]	; (d416c <_Z8callbackPcPhj+0xac>)
   d412a:	f001 f915 	bl	d5358 <_ZN8LightIOT11sendCommandEh>
    
        
    Serial.print(topic);Serial.print("  ");
   d412e:	f002 fbed 	bl	d690c <_Z16_fetch_usbserialv>
   d4132:	4631      	mov	r1, r6
   d4134:	f002 f924 	bl	d6380 <_ZN5Print5printEPKc>
   d4138:	f002 fbe8 	bl	d690c <_Z16_fetch_usbserialv>
   d413c:	490c      	ldr	r1, [pc, #48]	; (d4170 <_Z8callbackPcPhj+0xb0>)
   d413e:	f002 f91f 	bl	d6380 <_ZN5Print5printEPKc>
    Serial.println(p);
   d4142:	f002 fbe3 	bl	d690c <_Z16_fetch_usbserialv>
   d4146:	4629      	mov	r1, r5
   d4148:	f002 f92d 	bl	d63a6 <_ZN5Print7printlnEPKc>
    delay(100);
   d414c:	2064      	movs	r0, #100	; 0x64
   d414e:	f002 fa5f 	bl	d6610 <delay>
}
   d4152:	46bd      	mov	sp, r7
   d4154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4156:	bf00      	nop
   d4158:	000d87bc 	.word	0x000d87bc
   d415c:	000d87c1 	.word	0x000d87c1
   d4160:	000d87c5 	.word	0x000d87c5
   d4164:	000d87cc 	.word	0x000d87cc
   d4168:	000d87d3 	.word	0x000d87d3
   d416c:	2003dcbc 	.word	0x2003dcbc
   d4170:	000d87da 	.word	0x000d87da

000d4174 <_ZN8LightIOTD1Ev>:
    #define INA219_BATTERY                         (0x44)
    #define INA219_PANEL                         (0x41)
    #define INA219_LED                         (0x40)

// This is your main class that users will import into their application
class LightIOT
   d4174:	b510      	push	{r4, lr}
   d4176:	4604      	mov	r4, r0
   d4178:	f500 60cb 	add.w	r0, r0, #1624	; 0x658
   d417c:	f001 ffcc 	bl	d6118 <_ZN6StringD1Ev>
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}

000d4184 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4184:	2200      	movs	r2, #0
   d4186:	4611      	mov	r1, r2
   d4188:	6840      	ldr	r0, [r0, #4]
   d418a:	f001 be27 	b.w	d5ddc <network_ready>

000d418e <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d418e:	2300      	movs	r3, #0
   d4190:	461a      	mov	r2, r3
   d4192:	4619      	mov	r1, r3
   d4194:	6840      	ldr	r0, [r0, #4]
   d4196:	f001 be29 	b.w	d5dec <network_on>

000d419a <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>:

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
   d419a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d419e:	4681      	mov	r9, r0
   d41a0:	b094      	sub	sp, #80	; 0x50
   d41a2:	4614      	mov	r4, r2
   d41a4:	469a      	mov	sl, r3
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d41a6:	460d      	mov	r5, r1
   d41a8:	b121      	cbz	r1, d41b4 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1a>
   d41aa:	4608      	mov	r0, r1
   d41ac:	f004 faf4 	bl	d8798 <strlen>
   d41b0:	4607      	mov	r7, r0
   d41b2:	e000      	b.n	d41b6 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1c>
   d41b4:	460f      	mov	r7, r1
   d41b6:	b124      	cbz	r4, d41c2 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x28>
   d41b8:	4620      	mov	r0, r4
   d41ba:	f004 faed 	bl	d8798 <strlen>
   d41be:	4606      	mov	r6, r0
   d41c0:	e000      	b.n	d41c4 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x2a>
   d41c2:	4626      	mov	r6, r4

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d41c4:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d41c8:	4642      	mov	r2, r8
   d41ca:	2100      	movs	r1, #0
   d41cc:	a801      	add	r0, sp, #4
   d41ce:	f004 faa0 	bl	d8712 <memset>
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
   d41d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d41d4:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41d8:	2300      	movs	r3, #0
   d41da:	aa01      	add	r2, sp, #4
   d41dc:	4619      	mov	r1, r3
   d41de:	f8d9 0004 	ldr.w	r0, [r9, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d41e2:	f8cd 8004 	str.w	r8, [sp, #4]
        creds.ssid = ssid;
   d41e6:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
   d41e8:	9703      	str	r7, [sp, #12]
        creds.password = password;
   d41ea:	9404      	str	r4, [sp, #16]
        creds.password_len = passwordLen;
   d41ec:	9605      	str	r6, [sp, #20]
        creds.security = WLanSecurityType(security);
   d41ee:	f88d a018 	strb.w	sl, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41f2:	f001 fe1b 	bl	d5e2c <network_set_credentials>
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }
   d41f6:	fab0 f080 	clz	r0, r0
   d41fa:	0940      	lsrs	r0, r0, #5
   d41fc:	b014      	add	sp, #80	; 0x50
   d41fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4202 <_ZN5spark9WiFiClass16clearCredentialsEv>:
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4202:	2300      	movs	r3, #0
   d4204:	461a      	mov	r2, r3
   d4206:	4619      	mov	r1, r3
   d4208:	6840      	ldr	r0, [r0, #4]
   d420a:	f001 be17 	b.w	d5e3c <network_clear_credentials>
	...

000d4210 <_Z14callbackConfigPcPhj>:

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char p[length + 1];
   d4214:	f102 0308 	add.w	r3, r2, #8
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4218:	b08a      	sub	sp, #40	; 0x28
    char p[length + 1];
   d421a:	f023 0307 	bic.w	r3, r3, #7
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d421e:	af02      	add	r7, sp, #8
    char p[length + 1];
   d4220:	ebad 0d03 	sub.w	sp, sp, r3
   d4224:	ae02      	add	r6, sp, #8
}

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4226:	4680      	mov	r8, r0
   d4228:	4614      	mov	r4, r2
    char p[length + 1];
    memcpy(p, payload, length);
   d422a:	4630      	mov	r0, r6
   d422c:	f004 fa66 	bl	d86fc <memcpy>
    p[length] = NULL;
   d4230:	2300      	movs	r3, #0

    
    if(strcmp(topic, "changeMQTT")==0){
   d4232:	492e      	ldr	r1, [pc, #184]	; (d42ec <_Z14callbackConfigPcPhj+0xdc>)
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
   d4234:	5533      	strb	r3, [r6, r4]

    
    if(strcmp(topic, "changeMQTT")==0){
   d4236:	4640      	mov	r0, r8
   d4238:	f004 fa9c 	bl	d8774 <strcmp>
   d423c:	b928      	cbnz	r0, d424a <_Z14callbackConfigPcPhj+0x3a>
        client.setBroker(p, 1883);
   d423e:	f240 725b 	movw	r2, #1883	; 0x75b
   d4242:	4631      	mov	r1, r6
   d4244:	482a      	ldr	r0, [pc, #168]	; (d42f0 <_Z14callbackConfigPcPhj+0xe0>)
   d4246:	f000 fbbf 	bl	d49c8 <_ZN4MQTT9setBrokerEPct>
    }

    if(strcmp(topic, "changeNetwork")==0){
   d424a:	492a      	ldr	r1, [pc, #168]	; (d42f4 <_Z14callbackConfigPcPhj+0xe4>)
   d424c:	4640      	mov	r0, r8
   d424e:	f004 fa91 	bl	d8774 <strcmp>
   d4252:	4604      	mov	r4, r0
   d4254:	bba0      	cbnz	r0, d42c0 <_Z14callbackConfigPcPhj+0xb0>
        String credentials[2];
   d4256:	4928      	ldr	r1, [pc, #160]	; (d42f8 <_Z14callbackConfigPcPhj+0xe8>)
   d4258:	4d28      	ldr	r5, [pc, #160]	; (d42fc <_Z14callbackConfigPcPhj+0xec>)
   d425a:	4638      	mov	r0, r7
   d425c:	f001 ffa3 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4260:	4925      	ldr	r1, [pc, #148]	; (d42f8 <_Z14callbackConfigPcPhj+0xe8>)
   d4262:	f107 0010 	add.w	r0, r7, #16
   d4266:	f001 ff9e 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
        lightController.getCredentials(credentials,p);
   d426a:	4632      	mov	r2, r6
   d426c:	4639      	mov	r1, r7
   d426e:	4824      	ldr	r0, [pc, #144]	; (d4300 <_Z14callbackConfigPcPhj+0xf0>)
   d4270:	f000 ffcc 	bl	d520c <_ZN8LightIOT14getCredentialsEP6StringPc>
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4274:	4622      	mov	r2, r4
   d4276:	2102      	movs	r1, #2
   d4278:	6868      	ldr	r0, [r5, #4]
   d427a:	f001 fda7 	bl	d5dcc <network_disconnect>

        WiFi.disconnect();

        WiFi.clearCredentials();
   d427e:	4628      	mov	r0, r5
   d4280:	f7ff ffbf 	bl	d4202 <_ZN5spark9WiFiClass16clearCredentialsEv>
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
   d4284:	4623      	mov	r3, r4
   d4286:	4622      	mov	r2, r4
   d4288:	491e      	ldr	r1, [pc, #120]	; (d4304 <_Z14callbackConfigPcPhj+0xf4>)
   d428a:	9400      	str	r4, [sp, #0]
   d428c:	4628      	mov	r0, r5
   d428e:	f7ff ff84 	bl	d419a <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    }

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
   d4292:	2303      	movs	r3, #3
   d4294:	693a      	ldr	r2, [r7, #16]
   d4296:	6839      	ldr	r1, [r7, #0]
   d4298:	9400      	str	r4, [sp, #0]
   d429a:	4628      	mov	r0, r5
   d429c:	f7ff ff7d 	bl	d419a <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
        WiFi.setCredentials("Luminarias");
        WiFi.setCredentials(credentials[0],credentials[1]);
        //Activamos wifi e intentamos conexion
        WiFi.on();
   d42a0:	4628      	mov	r0, r5
   d42a2:	f7ff ff74 	bl	d418e <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d42a6:	4623      	mov	r3, r4
   d42a8:	4622      	mov	r2, r4
   d42aa:	4621      	mov	r1, r4
   d42ac:	6868      	ldr	r0, [r5, #4]
   d42ae:	f001 fd7d 	bl	d5dac <network_connect>
    if(strcmp(topic, "changeMQTT")==0){
        client.setBroker(p, 1883);
    }

    if(strcmp(topic, "changeNetwork")==0){
        String credentials[2];
   d42b2:	f107 0010 	add.w	r0, r7, #16
   d42b6:	f001 ff2f 	bl	d6118 <_ZN6StringD1Ev>
   d42ba:	4638      	mov	r0, r7
   d42bc:	f001 ff2c 	bl	d6118 <_ZN6StringD1Ev>
        //Activamos wifi e intentamos conexion
        WiFi.on();
        WiFi.connect();
    }

    Serial.print(topic);Serial.print("  ");
   d42c0:	f002 fb24 	bl	d690c <_Z16_fetch_usbserialv>
   d42c4:	4641      	mov	r1, r8
   d42c6:	f002 f85b 	bl	d6380 <_ZN5Print5printEPKc>
   d42ca:	f002 fb1f 	bl	d690c <_Z16_fetch_usbserialv>
   d42ce:	490e      	ldr	r1, [pc, #56]	; (d4308 <_Z14callbackConfigPcPhj+0xf8>)
   d42d0:	f002 f856 	bl	d6380 <_ZN5Print5printEPKc>
    Serial.println(p);
   d42d4:	f002 fb1a 	bl	d690c <_Z16_fetch_usbserialv>
   d42d8:	4631      	mov	r1, r6
   d42da:	f002 f864 	bl	d63a6 <_ZN5Print7printlnEPKc>
    delay(100);
   d42de:	2064      	movs	r0, #100	; 0x64
   d42e0:	f002 f996 	bl	d6610 <delay>
}
   d42e4:	3720      	adds	r7, #32
   d42e6:	46bd      	mov	sp, r7
   d42e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42ec:	000d87dd 	.word	0x000d87dd
   d42f0:	2003dc58 	.word	0x2003dc58
   d42f4:	000d87e8 	.word	0x000d87e8
   d42f8:	000d9108 	.word	0x000d9108
   d42fc:	2003e704 	.word	0x2003e704
   d4300:	2003dcbc 	.word	0x2003dcbc
   d4304:	000d87f6 	.word	0x000d87f6
   d4308:	000d87da 	.word	0x000d87da

000d430c <_Z17connectMqttServerv>:

//=============================================================
//=================== MAIN MQTT CONNECTION ====================
//=============================================================

bool connectMqttServer(){
   d430c:	b510      	push	{r4, lr}
   d430e:	b098      	sub	sp, #96	; 0x60
    bool state = false;
    Serial.println("Conectando con server MQTT");
   d4310:	f002 fafc 	bl	d690c <_Z16_fetch_usbserialv>
   d4314:	4941      	ldr	r1, [pc, #260]	; (d441c <_Z17connectMqttServerv+0x110>)
   d4316:	f002 f846 	bl	d63a6 <_ZN5Print7printlnEPKc>
    // connect to the server
    Serial.println(System.deviceID());
   d431a:	f002 faf7 	bl	d690c <_Z16_fetch_usbserialv>
   d431e:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4320:	a814      	add	r0, sp, #80	; 0x50
   d4322:	f001 fdab 	bl	d5e7c <spark_deviceID>
   d4326:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4328:	4620      	mov	r0, r4
   d432a:	f002 f83c 	bl	d63a6 <_ZN5Print7printlnEPKc>
   d432e:	a814      	add	r0, sp, #80	; 0x50
   d4330:	f001 fef2 	bl	d6118 <_ZN6StringD1Ev>
   d4334:	a814      	add	r0, sp, #80	; 0x50
   d4336:	f001 fda1 	bl	d5e7c <spark_deviceID>
    client.connect("argonClient",System.deviceID(), "anything");
   d433a:	4b39      	ldr	r3, [pc, #228]	; (d4420 <_Z17connectMqttServerv+0x114>)
   d433c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d433e:	4939      	ldr	r1, [pc, #228]	; (d4424 <_Z17connectMqttServerv+0x118>)
   d4340:	4839      	ldr	r0, [pc, #228]	; (d4428 <_Z17connectMqttServerv+0x11c>)
   d4342:	f000 fc2b 	bl	d4b9c <_ZN4MQTT7connectEPKcS1_S1_>
   d4346:	a814      	add	r0, sp, #80	; 0x50
   d4348:	f001 fee6 	bl	d6118 <_ZN6StringD1Ev>
    
    String baseTopic = "changeMode";
   d434c:	4937      	ldr	r1, [pc, #220]	; (d442c <_Z17connectMqttServerv+0x120>)
   d434e:	4668      	mov	r0, sp
   d4350:	f001 ff29 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4354:	4669      	mov	r1, sp
   d4356:	a810      	add	r0, sp, #64	; 0x40
   d4358:	f001 ff47 	bl	d61ea <_ZN6StringC1ERKS_>
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d435c:	4934      	ldr	r1, [pc, #208]	; (d4430 <_Z17connectMqttServerv+0x124>)
   d435e:	a810      	add	r0, sp, #64	; 0x40
   d4360:	f001 ffbc 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d4364:	4604      	mov	r4, r0
   d4366:	a814      	add	r0, sp, #80	; 0x50
   d4368:	f001 fd88 	bl	d5e7c <spark_deviceID>
   d436c:	a914      	add	r1, sp, #80	; 0x50
   d436e:	4620      	mov	r0, r4
   d4370:	f001 ffa8 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d4374:	4601      	mov	r1, r0
   d4376:	a804      	add	r0, sp, #16
   d4378:	f001 ff37 	bl	d61ea <_ZN6StringC1ERKS_>
   d437c:	a814      	add	r0, sp, #80	; 0x50
   d437e:	f001 fecb 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4382:	a810      	add	r0, sp, #64	; 0x40
   d4384:	f001 fec8 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4388:	4669      	mov	r1, sp
   d438a:	a80c      	add	r0, sp, #48	; 0x30
   d438c:	f001 ff2d 	bl	d61ea <_ZN6StringC1ERKS_>
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d4390:	4927      	ldr	r1, [pc, #156]	; (d4430 <_Z17connectMqttServerv+0x124>)
   d4392:	a80c      	add	r0, sp, #48	; 0x30
   d4394:	f001 ffa2 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d4398:	4926      	ldr	r1, [pc, #152]	; (d4434 <_Z17connectMqttServerv+0x128>)
   d439a:	4604      	mov	r4, r0
   d439c:	a810      	add	r0, sp, #64	; 0x40
   d439e:	f001 ff02 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d43a2:	a910      	add	r1, sp, #64	; 0x40
   d43a4:	4620      	mov	r0, r4
   d43a6:	f001 ff8d 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d43aa:	220a      	movs	r2, #10
   d43ac:	4604      	mov	r4, r0
   d43ae:	2108      	movs	r1, #8
   d43b0:	a814      	add	r0, sp, #80	; 0x50
   d43b2:	f001 ff36 	bl	d6222 <_ZN6StringC1Eih>
   d43b6:	a914      	add	r1, sp, #80	; 0x50
   d43b8:	4620      	mov	r0, r4
   d43ba:	f001 ff83 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d43be:	4601      	mov	r1, r0
   d43c0:	a808      	add	r0, sp, #32
   d43c2:	f001 ff12 	bl	d61ea <_ZN6StringC1ERKS_>
   d43c6:	a814      	add	r0, sp, #80	; 0x50
   d43c8:	f001 fea6 	bl	d6118 <_ZN6StringD1Ev>
   d43cc:	a810      	add	r0, sp, #64	; 0x40
   d43ce:	f001 fea3 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43d2:	a80c      	add	r0, sp, #48	; 0x30
   d43d4:	f001 fea0 	bl	d6118 <_ZN6StringD1Ev>

    // publish/subscribe
    if (client.isConnected()) {
   d43d8:	4813      	ldr	r0, [pc, #76]	; (d4428 <_Z17connectMqttServerv+0x11c>)
   d43da:	f000 fae7 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d43de:	b180      	cbz	r0, d4402 <_Z17connectMqttServerv+0xf6>
        client.subscribe(baseTopic, MQTT::QOS2);
   d43e0:	2202      	movs	r2, #2
   d43e2:	9900      	ldr	r1, [sp, #0]
   d43e4:	4810      	ldr	r0, [pc, #64]	; (d4428 <_Z17connectMqttServerv+0x11c>)
   d43e6:	f000 fda5 	bl	d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceID, MQTT::QOS2);
   d43ea:	2202      	movs	r2, #2
   d43ec:	9904      	ldr	r1, [sp, #16]
   d43ee:	480e      	ldr	r0, [pc, #56]	; (d4428 <_Z17connectMqttServerv+0x11c>)
   d43f0:	f000 fda0 	bl	d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceName, MQTT::QOS2);
   d43f4:	2202      	movs	r2, #2
   d43f6:	9908      	ldr	r1, [sp, #32]
   d43f8:	480b      	ldr	r0, [pc, #44]	; (d4428 <_Z17connectMqttServerv+0x11c>)
   d43fa:	f000 fd9b 	bl	d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        state = true;
   d43fe:	2401      	movs	r4, #1
   d4400:	e000      	b.n	d4404 <_Z17connectMqttServerv+0xf8>
//=============================================================
//=================== MAIN MQTT CONNECTION ====================
//=============================================================

bool connectMqttServer(){
    bool state = false;
   d4402:	4604      	mov	r4, r0
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d4404:	a808      	add	r0, sp, #32
   d4406:	f001 fe87 	bl	d6118 <_ZN6StringD1Ev>
    // connect to the server
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d440a:	a804      	add	r0, sp, #16
   d440c:	f001 fe84 	bl	d6118 <_ZN6StringD1Ev>
    Serial.println("Conectando con server MQTT");
    // connect to the server
    Serial.println(System.deviceID());
    client.connect("argonClient",System.deviceID(), "anything");
    
    String baseTopic = "changeMode";
   d4410:	4668      	mov	r0, sp
   d4412:	f001 fe81 	bl	d6118 <_ZN6StringD1Ev>
        client.subscribe(topicDeviceName, MQTT::QOS2);
        state = true;
    }

    return state;
}
   d4416:	4620      	mov	r0, r4
   d4418:	b018      	add	sp, #96	; 0x60
   d441a:	bd10      	pop	{r4, pc}
   d441c:	000d8801 	.word	0x000d8801
   d4420:	000d881c 	.word	0x000d881c
   d4424:	000d8825 	.word	0x000d8825
   d4428:	2003dc58 	.word	0x2003dc58
   d442c:	000d8831 	.word	0x000d8831
   d4430:	000d883c 	.word	0x000d883c
   d4434:	000d883e 	.word	0x000d883e

000d4438 <_Z17connectMqttConfigv>:

//=============================================================
//=================== CONFIG MQTT CONNECTION ==================
//=============================================================
bool connectMqttConfig(){
   d4438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool state = false;
    Serial.println("Conectando con server MQTT Config");
   d443a:	f002 fa67 	bl	d690c <_Z16_fetch_usbserialv>
   d443e:	4910      	ldr	r1, [pc, #64]	; (d4480 <_Z17connectMqttConfigv+0x48>)
   d4440:	f001 ffb1 	bl	d63a6 <_ZN5Print7printlnEPKc>
   d4444:	4668      	mov	r0, sp
   d4446:	f001 fd19 	bl	d5e7c <spark_deviceID>
    // connect to the server
    clientConfig.connect("argonClient",System.deviceID(), "anything");
   d444a:	4b0e      	ldr	r3, [pc, #56]	; (d4484 <_Z17connectMqttConfigv+0x4c>)
   d444c:	9a00      	ldr	r2, [sp, #0]
   d444e:	490e      	ldr	r1, [pc, #56]	; (d4488 <_Z17connectMqttConfigv+0x50>)
   d4450:	480e      	ldr	r0, [pc, #56]	; (d448c <_Z17connectMqttConfigv+0x54>)
   d4452:	f000 fba3 	bl	d4b9c <_ZN4MQTT7connectEPKcS1_S1_>
   d4456:	4668      	mov	r0, sp
   d4458:	f001 fe5e 	bl	d6118 <_ZN6StringD1Ev>

    // publish/subscribe
    if (clientConfig.isConnected()) {
   d445c:	480b      	ldr	r0, [pc, #44]	; (d448c <_Z17connectMqttConfigv+0x54>)
   d445e:	f000 faa5 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4462:	b150      	cbz	r0, d447a <_Z17connectMqttConfigv+0x42>
        clientConfig.subscribe("changeNetwork", MQTT::QOS2);
   d4464:	2202      	movs	r2, #2
   d4466:	490a      	ldr	r1, [pc, #40]	; (d4490 <_Z17connectMqttConfigv+0x58>)
   d4468:	4808      	ldr	r0, [pc, #32]	; (d448c <_Z17connectMqttConfigv+0x54>)
   d446a:	f000 fd63 	bl	d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
   d446e:	2202      	movs	r2, #2
   d4470:	4908      	ldr	r1, [pc, #32]	; (d4494 <_Z17connectMqttConfigv+0x5c>)
   d4472:	4806      	ldr	r0, [pc, #24]	; (d448c <_Z17connectMqttConfigv+0x54>)
   d4474:	f000 fd5e 	bl	d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
   d4478:	2001      	movs	r0, #1
        state = true;
    }

    return state;
   d447a:	b005      	add	sp, #20
   d447c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4480:	000d8848 	.word	0x000d8848
   d4484:	000d881c 	.word	0x000d881c
   d4488:	000d8825 	.word	0x000d8825
   d448c:	2003e340 	.word	0x2003e340
   d4490:	000d87e8 	.word	0x000d87e8
   d4494:	000d87dd 	.word	0x000d87dd

000d4498 <_Z20rutineConnectionMQTTv>:
}

//=============================================================
//==================== CONECCTION RUTINE ======================
//=============================================================
void rutineConnectionMQTT(){
   d4498:	b508      	push	{r3, lr}
    newConnectionAttempt :
    if(!connectMqttServer()) {
   d449a:	f7ff ff37 	bl	d430c <_Z17connectMqttServerv>
   d449e:	b938      	cbnz	r0, d44b0 <_Z20rutineConnectionMQTTv+0x18>
        if(!connectMqttConfig()){
   d44a0:	f7ff ffca 	bl	d4438 <_Z17connectMqttConfigv>
   d44a4:	2800      	cmp	r0, #0
   d44a6:	d0f8      	beq.n	d449a <_Z20rutineConnectionMQTTv+0x2>
            goto newConnectionAttempt;
        }else Serial.println("Connexion MQTT CONFIG exitosa");
   d44a8:	f002 fa30 	bl	d690c <_Z16_fetch_usbserialv>
   d44ac:	4906      	ldr	r1, [pc, #24]	; (d44c8 <_Z20rutineConnectionMQTTv+0x30>)
   d44ae:	e002      	b.n	d44b6 <_Z20rutineConnectionMQTTv+0x1e>
    }else Serial.println("Connexion MQTT exitosa");
   d44b0:	f002 fa2c 	bl	d690c <_Z16_fetch_usbserialv>
   d44b4:	4905      	ldr	r1, [pc, #20]	; (d44cc <_Z20rutineConnectionMQTTv+0x34>)
   d44b6:	f001 ff76 	bl	d63a6 <_ZN5Print7printlnEPKc>
    delay(1000);
   d44ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d44be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(!connectMqttServer()) {
        if(!connectMqttConfig()){
            goto newConnectionAttempt;
        }else Serial.println("Connexion MQTT CONFIG exitosa");
    }else Serial.println("Connexion MQTT exitosa");
    delay(1000);
   d44c2:	f002 b8a5 	b.w	d6610 <delay>
   d44c6:	bf00      	nop
   d44c8:	000d886a 	.word	0x000d886a
   d44cc:	000d8888 	.word	0x000d8888

000d44d0 <setup>:
}

//=============================================================
//======================= VOID SETUP ==========================
//=============================================================
void setup() {    
   d44d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    pinMode(D7,OUTPUT);
   d44d2:	2101      	movs	r1, #1
   d44d4:	2007      	movs	r0, #7
   d44d6:	f003 f851 	bl	d757c <pinMode>
    Serial.begin(115200);
   d44da:	f002 fa17 	bl	d690c <_Z16_fetch_usbserialv>
   d44de:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44e2:	f002 fa07 	bl	d68f4 <_ZN9USBSerial5beginEl>

    Serial.println("Conectando con sensores INA219...!");
   d44e6:	f002 fa11 	bl	d690c <_Z16_fetch_usbserialv>
   d44ea:	4927      	ldr	r1, [pc, #156]	; (d4588 <setup+0xb8>)
    lightController.begin();
    Serial.println("Midiendo VOLTAJE y CORRIENTE con INA219 ...");

    WiFi.clearCredentials();
   d44ec:	4c27      	ldr	r4, [pc, #156]	; (d458c <setup+0xbc>)
//=============================================================
void setup() {    
    pinMode(D7,OUTPUT);
    Serial.begin(115200);

    Serial.println("Conectando con sensores INA219...!");
   d44ee:	f001 ff5a 	bl	d63a6 <_ZN5Print7printlnEPKc>
    lightController.begin();
   d44f2:	4827      	ldr	r0, [pc, #156]	; (d4590 <setup+0xc0>)
   d44f4:	f000 fe78 	bl	d51e8 <_ZN8LightIOT5beginEv>
    Serial.println("Midiendo VOLTAJE y CORRIENTE con INA219 ...");
   d44f8:	f002 fa08 	bl	d690c <_Z16_fetch_usbserialv>
   d44fc:	4925      	ldr	r1, [pc, #148]	; (d4594 <setup+0xc4>)
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
   d44fe:	2500      	movs	r5, #0
   d4500:	f001 ff51 	bl	d63a6 <_ZN5Print7printlnEPKc>

    WiFi.clearCredentials();
   d4504:	4620      	mov	r0, r4
   d4506:	f7ff fe7c 	bl	d4202 <_ZN5spark9WiFiClass16clearCredentialsEv>
   d450a:	462b      	mov	r3, r5
   d450c:	462a      	mov	r2, r5
   d450e:	4922      	ldr	r1, [pc, #136]	; (d4598 <setup+0xc8>)
   d4510:	9500      	str	r5, [sp, #0]
   d4512:	4620      	mov	r0, r4
   d4514:	f7ff fe41 	bl	d419a <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    }

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
   d4518:	2303      	movs	r3, #3
   d451a:	4a20      	ldr	r2, [pc, #128]	; (d459c <setup+0xcc>)
   d451c:	4920      	ldr	r1, [pc, #128]	; (d45a0 <setup+0xd0>)
   d451e:	9500      	str	r5, [sp, #0]
   d4520:	4620      	mov	r0, r4
   d4522:	f7ff fe3a 	bl	d419a <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    WiFi.setCredentials("Luminarias");
    WiFi.setCredentials("ARTURO VELAZQUEZ","eliecer1908");

    //Activamos wifi e intentamos conexion
        WiFi.on();
   d4526:	4620      	mov	r0, r4
   d4528:	f7ff fe31 	bl	d418e <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d452c:	462b      	mov	r3, r5
   d452e:	462a      	mov	r2, r5
   d4530:	4629      	mov	r1, r5
   d4532:	6860      	ldr	r0, [r4, #4]
   d4534:	f001 fc3a 	bl	d5dac <network_connect>
        WiFi.connect();
        waitUntil(WiFi.ready); 
   d4538:	4c14      	ldr	r4, [pc, #80]	; (d458c <setup+0xbc>)
   d453a:	4620      	mov	r0, r4
   d453c:	f7ff fe22 	bl	d4184 <_ZN5spark9WiFiClass5readyEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4540:	b1e0      	cbz	r0, d457c <setup+0xac>
   d4542:	4620      	mov	r0, r4
   d4544:	f7ff fe1e 	bl	d4184 <_ZN5spark9WiFiClass5readyEv>
    
    Serial.println(WiFi.SSID());
   d4548:	f002 f9e0 	bl	d690c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d454c:	2200      	movs	r2, #0
   d454e:	4611      	mov	r1, r2
   d4550:	4605      	mov	r5, r0
   d4552:	6860      	ldr	r0, [r4, #4]
   d4554:	f001 fc22 	bl	d5d9c <network_config>
   d4558:	f100 015d 	add.w	r1, r0, #93	; 0x5d
   d455c:	4628      	mov	r0, r5
   d455e:	f001 ff22 	bl	d63a6 <_ZN5Print7printlnEPKc>
    digitalWrite(D7,HIGH);
   d4562:	2007      	movs	r0, #7
   d4564:	2101      	movs	r1, #1
   d4566:	f003 f81a 	bl	d759e <digitalWrite>

    if(WiFi.ready()) rutineConnectionMQTT();
   d456a:	4620      	mov	r0, r4
   d456c:	f7ff fe0a 	bl	d4184 <_ZN5spark9WiFiClass5readyEv>
   d4570:	b138      	cbz	r0, d4582 <setup+0xb2>
}
   d4572:	b003      	add	sp, #12
   d4574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        waitUntil(WiFi.ready); 
    
    Serial.println(WiFi.SSID());
    digitalWrite(D7,HIGH);

    if(WiFi.ready()) rutineConnectionMQTT();
   d4578:	f7ff bf8e 	b.w	d4498 <_Z20rutineConnectionMQTTv>
            spark_process();
   d457c:	f001 fc76 	bl	d5e6c <spark_process>
   d4580:	e7da      	b.n	d4538 <setup+0x68>
}
   d4582:	b003      	add	sp, #12
   d4584:	bd30      	pop	{r4, r5, pc}
   d4586:	bf00      	nop
   d4588:	000d889f 	.word	0x000d889f
   d458c:	2003e704 	.word	0x2003e704
   d4590:	2003dcbc 	.word	0x2003dcbc
   d4594:	000d88c2 	.word	0x000d88c2
   d4598:	000d87f6 	.word	0x000d87f6
   d459c:	000d88ee 	.word	0x000d88ee
   d45a0:	000d88fa 	.word	0x000d88fa

000d45a4 <loop>:


//=============================================================
//======================== VOID LOOP ==========================
//=============================================================
void loop() {
   d45a4:	b570      	push	{r4, r5, r6, lr}

    // MQTT SERVER CONNECTION
    if(client.isConnected())   client.loop();
   d45a6:	4839      	ldr	r0, [pc, #228]	; (d468c <loop+0xe8>)


//=============================================================
//======================== VOID LOOP ==========================
//=============================================================
void loop() {
   d45a8:	b08e      	sub	sp, #56	; 0x38

    // MQTT SERVER CONNECTION
    if(client.isConnected())   client.loop();
   d45aa:	f000 f9ff 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d45ae:	b108      	cbz	r0, d45b4 <loop+0x10>
   d45b0:	4836      	ldr	r0, [pc, #216]	; (d468c <loop+0xe8>)
   d45b2:	e004      	b.n	d45be <loop+0x1a>
    else if(clientConfig.isConnected())   clientConfig.loop();
   d45b4:	4836      	ldr	r0, [pc, #216]	; (d4690 <loop+0xec>)
   d45b6:	f000 f9f9 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d45ba:	b118      	cbz	r0, d45c4 <loop+0x20>
   d45bc:	4834      	ldr	r0, [pc, #208]	; (d4690 <loop+0xec>)
   d45be:	f000 fbb3 	bl	d4d28 <_ZN4MQTT4loopEv>
   d45c2:	e005      	b.n	d45d0 <loop+0x2c>
    else if(WiFi.ready()) rutineConnectionMQTT();
   d45c4:	4833      	ldr	r0, [pc, #204]	; (d4694 <loop+0xf0>)
   d45c6:	f7ff fddd 	bl	d4184 <_ZN5spark9WiFiClass5readyEv>
   d45ca:	b108      	cbz	r0, d45d0 <loop+0x2c>
   d45cc:	f7ff ff64 	bl	d4498 <_Z20rutineConnectionMQTTv>
    
    lightController.measuring(vAverage,cAverage);
   d45d0:	4d31      	ldr	r5, [pc, #196]	; (d4698 <loop+0xf4>)
   d45d2:	4c32      	ldr	r4, [pc, #200]	; (d469c <loop+0xf8>)
   d45d4:	4832      	ldr	r0, [pc, #200]	; (d46a0 <loop+0xfc>)
   d45d6:	462a      	mov	r2, r5
   d45d8:	4621      	mov	r1, r4
   d45da:	f000 feeb 	bl	d53b4 <_ZN8LightIOT9measuringEPfS0_>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45de:	f001 fa59 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>

    // MQTT PUBLISH DATA
    unsigned int t = millis();
    if(t > last_t + interval) {
   d45e2:	4a30      	ldr	r2, [pc, #192]	; (d46a4 <loop+0x100>)
   d45e4:	6813      	ldr	r3, [r2, #0]
   d45e6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   d45ea:	3308      	adds	r3, #8
   d45ec:	4283      	cmp	r3, r0
   d45ee:	d24b      	bcs.n	d4688 <loop+0xe4>
    	last_t = t;

        lightController.getAverage(vAverage,cAverage);
   d45f0:	4621      	mov	r1, r4
    lightController.measuring(vAverage,cAverage);

    // MQTT PUBLISH DATA
    unsigned int t = millis();
    if(t > last_t + interval) {
    	last_t = t;
   d45f2:	6010      	str	r0, [r2, #0]

        lightController.getAverage(vAverage,cAverage);
   d45f4:	462a      	mov	r2, r5
   d45f6:	482a      	ldr	r0, [pc, #168]	; (d46a0 <loop+0xfc>)
   d45f8:	f000 ff42 	bl	d5480 <_ZN8LightIOT10getAverageEPfS0_>
        lightController.resetModeForError(vAverage[0],cAverage[0]);
   d45fc:	edd5 0a00 	vldr	s1, [r5]
   d4600:	ed94 0a00 	vldr	s0, [r4]
   d4604:	4826      	ldr	r0, [pc, #152]	; (d46a0 <loop+0xfc>)
   d4606:	f001 f981 	bl	d590c <_ZN8LightIOT17resetModeForErrorEff>
        Serial.println(vAverage[0]);
   d460a:	f002 f97f 	bl	d690c <_Z16_fetch_usbserialv>
   d460e:	4606      	mov	r6, r0
   d4610:	6820      	ldr	r0, [r4, #0]
   d4612:	f003 fb19 	bl	d7c48 <__aeabi_f2d>
   d4616:	ec41 0b10 	vmov	d0, r0, r1
   d461a:	2102      	movs	r1, #2
   d461c:	4630      	mov	r0, r6
   d461e:	f001 ffd9 	bl	d65d4 <_ZN5Print7printlnEdi>
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d4622:	462b      	mov	r3, r5
   d4624:	4622      	mov	r2, r4
   d4626:	491e      	ldr	r1, [pc, #120]	; (d46a0 <loop+0xfc>)
   d4628:	a801      	add	r0, sp, #4
   d462a:	f000 ff7d 	bl	d5528 <_ZN8LightIOT13sensorsToJSONEPfS0_>
        lightController.resetAverage(vAverage,cAverage);
   d462e:	481c      	ldr	r0, [pc, #112]	; (d46a0 <loop+0xfc>)
   d4630:	462a      	mov	r2, r5
   d4632:	4621      	mov	r1, r4
   d4634:	f000 ff6d 	bl	d5512 <_ZN8LightIOT12resetAverageEPfS0_>

    	if (client.isConnected()) {
   d4638:	4814      	ldr	r0, [pc, #80]	; (d468c <loop+0xe8>)
   d463a:	f000 f9b7 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d463e:	b300      	cbz	r0, d4682 <loop+0xde>
            client.publish("newData",dataJson);
   d4640:	9a01      	ldr	r2, [sp, #4]
   d4642:	4919      	ldr	r1, [pc, #100]	; (d46a8 <loop+0x104>)
   d4644:	4811      	ldr	r0, [pc, #68]	; (d468c <loop+0xe8>)
   d4646:	f000 fb28 	bl	d4c9a <_ZN4MQTT7publishEPKcS1_>
            digitalWrite(D7,!digitalRead(D7)); 
   d464a:	2007      	movs	r0, #7
   d464c:	f002 ffc0 	bl	d75d0 <digitalRead>
   d4650:	fab0 f180 	clz	r1, r0
   d4654:	0949      	lsrs	r1, r1, #5
   d4656:	2007      	movs	r0, #7
   d4658:	f002 ffa1 	bl	d759e <digitalWrite>

            //Power Signal 
            int rssi = WiFi.RSSI();
   d465c:	490d      	ldr	r1, [pc, #52]	; (d4694 <loop+0xf0>)
   d465e:	a805      	add	r0, sp, #20
   d4660:	f002 fe88 	bl	d7374 <_ZN5spark9WiFiClass4RSSIEv>
   d4664:	a805      	add	r0, sp, #20
   d4666:	f002 fe63 	bl	d7330 <_ZNK10WiFiSignalcvaEv>
   d466a:	4604      	mov	r4, r0
            Serial.print("RSSI: ");Serial.println(rssi);
   d466c:	f002 f94e 	bl	d690c <_Z16_fetch_usbserialv>
   d4670:	490e      	ldr	r1, [pc, #56]	; (d46ac <loop+0x108>)
   d4672:	f001 fe85 	bl	d6380 <_ZN5Print5printEPKc>
   d4676:	f002 f949 	bl	d690c <_Z16_fetch_usbserialv>
   d467a:	220a      	movs	r2, #10
   d467c:	4621      	mov	r1, r4
   d467e:	f001 feed 	bl	d645c <_ZN5Print7printlnEii>
    	last_t = t;

        lightController.getAverage(vAverage,cAverage);
        lightController.resetModeForError(vAverage[0],cAverage[0]);
        Serial.println(vAverage[0]);
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d4682:	a801      	add	r0, sp, #4
   d4684:	f001 fd48 	bl	d6118 <_ZN6StringD1Ev>
            //Power Signal 
            int rssi = WiFi.RSSI();
            Serial.print("RSSI: ");Serial.println(rssi);
        }
    }
}
   d4688:	b00e      	add	sp, #56	; 0x38
   d468a:	bd70      	pop	{r4, r5, r6, pc}
   d468c:	2003dc58 	.word	0x2003dc58
   d4690:	2003e340 	.word	0x2003e340
   d4694:	2003e704 	.word	0x2003e704
   d4698:	2003dc4c 	.word	0x2003dc4c
   d469c:	2003e334 	.word	0x2003e334
   d46a0:	2003dcbc 	.word	0x2003dcbc
   d46a4:	2003dcb8 	.word	0x2003dcb8
   d46a8:	000d890b 	.word	0x000d890b
   d46ac:	000d8913 	.word	0x000d8913

000d46b0 <_GLOBAL__sub_I_SystemMode>:
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
        state = true;
    }

    return state;
   d46b0:	b570      	push	{r4, r5, r6, lr}
   d46b2:	f001 f987 	bl	d59c4 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46b6:	4b1b      	ldr	r3, [pc, #108]	; (d4724 <_GLOBAL__sub_I_SystemMode+0x74>)
#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

LightIOT lightController(LIGHT_NUMBER);
   d46b8:	4d1b      	ldr	r5, [pc, #108]	; (d4728 <_GLOBAL__sub_I_SystemMode+0x78>)
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46ba:	4e1c      	ldr	r6, [pc, #112]	; (d472c <_GLOBAL__sub_I_SystemMode+0x7c>)
   d46bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46c0:	2400      	movs	r4, #0
   d46c2:	701c      	strb	r4, [r3, #0]
   d46c4:	805c      	strh	r4, [r3, #2]
   d46c6:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46c8:	2002      	movs	r0, #2
   d46ca:	f001 fb3b 	bl	d5d44 <set_system_mode>
#include <MQTT.h>

#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d46ce:	4621      	mov	r1, r4
   d46d0:	2001      	movs	r0, #1
   d46d2:	f001 fb47 	bl	d5d64 <system_thread_set_state>

LightIOT lightController(LIGHT_NUMBER);
   d46d6:	4c16      	ldr	r4, [pc, #88]	; (d4730 <_GLOBAL__sub_I_SystemMode+0x80>)
   d46d8:	2108      	movs	r1, #8
   d46da:	4628      	mov	r0, r5
   d46dc:	f000 fd1e 	bl	d511c <_ZN8LightIOTC1Ei>
   d46e0:	4628      	mov	r0, r5
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46e2:	4d14      	ldr	r5, [pc, #80]	; (d4734 <_GLOBAL__sub_I_SystemMode+0x84>)
#define LIGHT_NUMBER 8

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

LightIOT lightController(LIGHT_NUMBER);
   d46e4:	4914      	ldr	r1, [pc, #80]	; (d4738 <_GLOBAL__sub_I_SystemMode+0x88>)
   d46e6:	4622      	mov	r2, r4
   d46e8:	f002 fffa 	bl	d76e0 <__aeabi_atexit>
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46ec:	4b13      	ldr	r3, [pc, #76]	; (d473c <_GLOBAL__sub_I_SystemMode+0x8c>)
   d46ee:	4914      	ldr	r1, [pc, #80]	; (d4740 <_GLOBAL__sub_I_SystemMode+0x90>)
   d46f0:	f240 725b 	movw	r2, #1883	; 0x75b
   d46f4:	4628      	mov	r0, r5
   d46f6:	f000 f871 	bl	d47dc <_ZN4MQTTC1EPctPFvS0_PhjE>
   d46fa:	4628      	mov	r0, r5
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.0.6", 1883, callbackConfig);
   d46fc:	4d11      	ldr	r5, [pc, #68]	; (d4744 <_GLOBAL__sub_I_SystemMode+0x94>)
LightIOT lightController(LIGHT_NUMBER);
//=============================================================
//================== MQTT VARIABLES ===========================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
   d46fe:	4622      	mov	r2, r4
   d4700:	4631      	mov	r1, r6
   d4702:	f002 ffed 	bl	d76e0 <__aeabi_atexit>
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.0.6", 1883, callbackConfig);
   d4706:	f240 725b 	movw	r2, #1883	; 0x75b
   d470a:	490f      	ldr	r1, [pc, #60]	; (d4748 <_GLOBAL__sub_I_SystemMode+0x98>)
   d470c:	4b0f      	ldr	r3, [pc, #60]	; (d474c <_GLOBAL__sub_I_SystemMode+0x9c>)
   d470e:	4628      	mov	r0, r5
   d4710:	f000 f864 	bl	d47dc <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4714:	4622      	mov	r2, r4
   d4716:	4631      	mov	r1, r6
   d4718:	4628      	mov	r0, r5
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
        state = true;
    }

    return state;
   d471a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void callback(char* topic, byte* payload, unsigned int length);
MQTT client("209.182.218.175", 1883, callback);
//MQTT client("192.68.185.27", 1883, callback);

void callbackConfig(char* topic, byte* payload, unsigned int length);
MQTT clientConfig("192.168.0.6", 1883, callbackConfig);
   d471e:	f002 bfdf 	b.w	d76e0 <__aeabi_atexit>
   d4722:	bf00      	nop
   d4724:	2003dcb0 	.word	0x2003dcb0
   d4728:	2003dcbc 	.word	0x2003dcbc
   d472c:	000d4f81 	.word	0x000d4f81
   d4730:	2003dc48 	.word	0x2003dc48
   d4734:	2003dc58 	.word	0x2003dc58
   d4738:	000d4175 	.word	0x000d4175
   d473c:	000d40c1 	.word	0x000d40c1
   d4740:	000d891a 	.word	0x000d891a
   d4744:	2003e340 	.word	0x2003e340
   d4748:	000d892a 	.word	0x000d892a
   d474c:	000d4211 	.word	0x000d4211

000d4750 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4750:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4752:	6984      	ldr	r4, [r0, #24]
   d4754:	4b0a      	ldr	r3, [pc, #40]	; (d4780 <_ZN9TCPClientD1Ev+0x30>)
   d4756:	6003      	str	r3, [r0, #0]
   d4758:	4605      	mov	r5, r0
   d475a:	b17c      	cbz	r4, d477c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d475c:	6863      	ldr	r3, [r4, #4]
   d475e:	3b01      	subs	r3, #1
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	b95b      	cbnz	r3, d477c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4764:	6823      	ldr	r3, [r4, #0]
   d4766:	4620      	mov	r0, r4
   d4768:	689b      	ldr	r3, [r3, #8]
   d476a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d476c:	68a3      	ldr	r3, [r4, #8]
   d476e:	3b01      	subs	r3, #1
   d4770:	60a3      	str	r3, [r4, #8]
   d4772:	b91b      	cbnz	r3, d477c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4774:	6823      	ldr	r3, [r4, #0]
   d4776:	4620      	mov	r0, r4
   d4778:	68db      	ldr	r3, [r3, #12]
   d477a:	4798      	blx	r3
   d477c:	4628      	mov	r0, r5
   d477e:	bd38      	pop	{r3, r4, r5, pc}
   d4780:	000d925c 	.word	0x000d925c

000d4784 <_ZN9TCPClientD0Ev>:
   d4784:	b510      	push	{r4, lr}
   d4786:	4604      	mov	r4, r0
   d4788:	f7ff ffe2 	bl	d4750 <_ZN9TCPClientD1Ev>
   d478c:	4620      	mov	r0, r4
   d478e:	211c      	movs	r1, #28
   d4790:	f002 ffab 	bl	d76ea <_ZdlPvj>
   d4794:	4620      	mov	r0, r4
   d4796:	bd10      	pop	{r4, pc}

000d4798 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4798:	b538      	push	{r3, r4, r5, lr}
   d479a:	461d      	mov	r5, r3
    this->callback = callback;
   d479c:	9b05      	ldr	r3, [sp, #20]
   d479e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d47a0:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d47a2:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d47a4:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d47a6:	b102      	cbz	r2, d47aa <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d47a8:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d47aa:	b119      	cbz	r1, d47b4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d47ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47b0:	f001 fd26 	bl	d6200 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d47b4:	9b04      	ldr	r3, [sp, #16]
   d47b6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47b8:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d47ba:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d47bc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d47c0:	2bff      	cmp	r3, #255	; 0xff
   d47c2:	bfb8      	it	lt
   d47c4:	23ff      	movlt	r3, #255	; 0xff
   d47c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d47ca:	b108      	cbz	r0, d47d0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d47cc:	f7ff fc6b 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d47d0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d47d4:	f7ff fc63 	bl	d409e <_Znaj>
   d47d8:	61e0      	str	r0, [r4, #28]
   d47da:	bd38      	pop	{r3, r4, r5, pc}

000d47dc <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d47dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d47e0:	4604      	mov	r4, r0
   d47e2:	2500      	movs	r5, #0
   d47e4:	4617      	mov	r7, r2
   d47e6:	4698      	mov	r8, r3
   d47e8:	460e      	mov	r6, r1
   d47ea:	f002 fcf1 	bl	d71d0 <_ZN9TCPClientC1Ev>
   d47ee:	61e5      	str	r5, [r4, #28]
   d47f0:	490a      	ldr	r1, [pc, #40]	; (d481c <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d47f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47f6:	f001 fcd6 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d47fa:	23ff      	movs	r3, #255	; 0xff
   d47fc:	9302      	str	r3, [sp, #8]
   d47fe:	230f      	movs	r3, #15
   d4800:	9300      	str	r3, [sp, #0]
   d4802:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4804:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4806:	f8cd 8004 	str.w	r8, [sp, #4]
   d480a:	463b      	mov	r3, r7
   d480c:	462a      	mov	r2, r5
   d480e:	4631      	mov	r1, r6
   d4810:	f7ff ffc2 	bl	d4798 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d4814:	4620      	mov	r0, r4
   d4816:	b004      	add	sp, #16
   d4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d481c:	000d9108 	.word	0x000d9108

000d4820 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4820:	b510      	push	{r4, lr}
   d4822:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4824:	4620      	mov	r0, r4
   d4826:	f002 fc37 	bl	d7098 <_ZN9TCPClient9availableEv>
   d482a:	2800      	cmp	r0, #0
   d482c:	d0fa      	beq.n	d4824 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d482e:	4620      	mov	r0, r4
   d4830:	f002 fadb 	bl	d6dea <_ZN9TCPClient4readEv>
}
   d4834:	b2c0      	uxtb	r0, r0
   d4836:	bd10      	pop	{r4, pc}

000d4838 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d483c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d483e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4840:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4842:	f7ff ffed 	bl	d4820 <_ZN4MQTT8readByteEv>
   d4846:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4848:	69eb      	ldr	r3, [r5, #28]
   d484a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d484e:	f04f 0901 	mov.w	r9, #1
   d4852:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4856:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4858:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d485a:	4628      	mov	r0, r5
   d485c:	f7ff ffe0 	bl	d4820 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4860:	69eb      	ldr	r3, [r5, #28]
   d4862:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4864:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4868:	fb13 f309 	smulbb	r3, r3, r9
   d486c:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d486e:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4870:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4872:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4874:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d4876:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d487a:	d501      	bpl.n	d4880 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d487c:	4626      	mov	r6, r4
   d487e:	e7ec      	b.n	d485a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4880:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4882:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4886:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d488a:	d113      	bne.n	d48b4 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d488c:	4628      	mov	r0, r5
   d488e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4892:	f7ff ffc5 	bl	d4820 <_ZN4MQTT8readByteEv>
   d4896:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d489a:	4628      	mov	r0, r5
   d489c:	1cf4      	adds	r4, r6, #3
   d489e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d48a2:	3602      	adds	r6, #2
   d48a4:	f7ff ffbc 	bl	d4820 <_ZN4MQTT8readByteEv>
   d48a8:	b2b6      	uxth	r6, r6
   d48aa:	b2a4      	uxth	r4, r4
   d48ac:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d48b0:	2302      	movs	r3, #2
   d48b2:	e000      	b.n	d48b6 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d48b4:	2300      	movs	r3, #0
   d48b6:	1b1b      	subs	r3, r3, r4
   d48b8:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d48ba:	19a3      	adds	r3, r4, r6
   d48bc:	b29b      	uxth	r3, r3
   d48be:	429f      	cmp	r7, r3
   d48c0:	d90b      	bls.n	d48da <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d48c2:	4628      	mov	r0, r5
   d48c4:	f7ff ffac 	bl	d4820 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d48c8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d48cc:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d48ce:	bf84      	itt	hi
   d48d0:	69eb      	ldrhi	r3, [r5, #28]
   d48d2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d48d4:	3401      	adds	r4, #1
   d48d6:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d48d8:	e7ef      	b.n	d48ba <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d48da:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d48de:	42a0      	cmp	r0, r4
   d48e0:	bf2c      	ite	cs
   d48e2:	4620      	movcs	r0, r4
   d48e4:	2000      	movcc	r0, #0
   d48e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d48ea <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d48ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d48ec:	4607      	mov	r7, r0
   d48ee:	468e      	mov	lr, r1
   d48f0:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d48f2:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d48f4:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d48f6:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d48f8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d48fc:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d48fe:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d4900:	bf18      	it	ne
   d4902:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d4906:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4908:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d490c:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d490e:	2d00      	cmp	r5, #0
   d4910:	d1f1      	bne.n	d48f6 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d4912:	f1c4 0304 	rsb	r3, r4, #4
   d4916:	18d1      	adds	r1, r2, r3
   d4918:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d491c:	42a5      	cmp	r5, r4
   d491e:	da06      	bge.n	d492e <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d4920:	1b2b      	subs	r3, r5, r4
   d4922:	a801      	add	r0, sp, #4
   d4924:	4413      	add	r3, r2
   d4926:	5c28      	ldrb	r0, [r5, r0]
   d4928:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d492a:	3501      	adds	r5, #1
   d492c:	e7f6      	b.n	d491c <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d492e:	1c72      	adds	r2, r6, #1
   d4930:	4422      	add	r2, r4
   d4932:	4638      	mov	r0, r7
   d4934:	f002 f9af 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
   d4938:	4605      	mov	r5, r0
   d493a:	f001 f8ab 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d493e:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d4940:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4942:	4434      	add	r4, r6
   d4944:	b2a8      	uxth	r0, r5
}
   d4946:	1a23      	subs	r3, r4, r0
   d4948:	4258      	negs	r0, r3
   d494a:	4158      	adcs	r0, r3
   d494c:	b003      	add	sp, #12
   d494e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4950 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4950:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d4952:	69c3      	ldr	r3, [r0, #28]
   d4954:	22e0      	movs	r2, #224	; 0xe0
   d4956:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4958:	69c3      	ldr	r3, [r0, #28]
   d495a:	2200      	movs	r2, #0
   d495c:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d495e:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d4960:	2202      	movs	r2, #2
   d4962:	69c1      	ldr	r1, [r0, #28]
   d4964:	f002 f997 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4968:	4620      	mov	r0, r4
   d496a:	f002 fb7d 	bl	d7068 <_ZN9TCPClient4stopEv>
   d496e:	f001 f891 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4972:	6260      	str	r0, [r4, #36]	; 0x24
   d4974:	62a0      	str	r0, [r4, #40]	; 0x28
   d4976:	bd10      	pop	{r4, pc}

000d4978 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4978:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d497a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d497c:	b29b      	uxth	r3, r3
   d497e:	460d      	mov	r5, r1
   d4980:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d4982:	f815 6b01 	ldrb.w	r6, [r5], #1
   d4986:	b2a4      	uxth	r4, r4
   d4988:	b13e      	cbz	r6, d499a <_ZN4MQTT11writeStringEPKcPht+0x22>
   d498a:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d498e:	429f      	cmp	r7, r3
   d4990:	d903      	bls.n	d499a <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d4992:	1c5c      	adds	r4, r3, #1
   d4994:	54d6      	strb	r6, [r2, r3]
   d4996:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d4998:	e7f2      	b.n	d4980 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d499a:	1b19      	subs	r1, r3, r4
   d499c:	440a      	add	r2, r1
   d499e:	1221      	asrs	r1, r4, #8
   d49a0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d49a4:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d49a8:	4618      	mov	r0, r3
   d49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49ac <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d49ac:	b538      	push	{r3, r4, r5, lr}
   d49ae:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d49b0:	f002 f987 	bl	d6cc2 <_ZN9TCPClient9connectedEv>
   d49b4:	2800      	cmp	r0, #0
   d49b6:	bf14      	ite	ne
   d49b8:	2401      	movne	r4, #1
   d49ba:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d49bc:	d102      	bne.n	d49c4 <_ZN4MQTT11isConnectedEv+0x18>
   d49be:	4628      	mov	r0, r5
   d49c0:	f002 fb52 	bl	d7068 <_ZN9TCPClient4stopEv>
    return rc;
}
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd38      	pop	{r3, r4, r5, pc}

000d49c8 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d49c8:	b570      	push	{r4, r5, r6, lr}
   d49ca:	4604      	mov	r4, r0
   d49cc:	460e      	mov	r6, r1
   d49ce:	4615      	mov	r5, r2
    if(isConnected()) {
   d49d0:	f7ff ffec 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d49d4:	b110      	cbz	r0, d49dc <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff ffba 	bl	d4950 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d49dc:	4631      	mov	r1, r6
   d49de:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d49e2:	f001 fc0d 	bl	d6200 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d49e6:	2300      	movs	r3, #0
   d49e8:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d49ea:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d49ee:	bd70      	pop	{r4, r5, r6, pc}

000d49f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d49f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d49f4:	b087      	sub	sp, #28
   d49f6:	4604      	mov	r4, r0
   d49f8:	4689      	mov	r9, r1
   d49fa:	4617      	mov	r7, r2
   d49fc:	461e      	mov	r6, r3
   d49fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d4a02:	f7ff ffd3 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4a06:	4605      	mov	r5, r0
   d4a08:	2800      	cmp	r0, #0
   d4a0a:	f040 80bd 	bne.w	d4b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d4a0e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4a10:	b939      	cbnz	r1, d4a22 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d4a12:	4603      	mov	r3, r0
   d4a14:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	f002 fa28 	bl	d6e70 <_ZN9TCPClient7connectEPKctm>
   d4a20:	e009      	b.n	d4a36 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d4a22:	4668      	mov	r0, sp
   d4a24:	f001 ff06 	bl	d6834 <_ZN9IPAddressC1EPKh>
   d4a28:	462b      	mov	r3, r5
   d4a2a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a2e:	4669      	mov	r1, sp
   d4a30:	4620      	mov	r0, r4
   d4a32:	f002 fa9f 	bl	d6f74 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d4a36:	2800      	cmp	r0, #0
   d4a38:	f000 80a2 	beq.w	d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d4a3c:	2301      	movs	r3, #1
   d4a3e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d4a40:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4a44:	2b04      	cmp	r3, #4
   d4a46:	d115      	bne.n	d4a74 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a48:	4b52      	ldr	r3, [pc, #328]	; (d4b94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d4a4a:	6818      	ldr	r0, [r3, #0]
   d4a4c:	889a      	ldrh	r2, [r3, #4]
   d4a4e:	f8ad 2004 	strh.w	r2, [sp, #4]
   d4a52:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a54:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a56:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a58:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4a5a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4a5e:	1d53      	adds	r3, r2, #5
   d4a60:	f8c2 0005 	str.w	r0, [r2, #5]
   d4a64:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d4a68:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4a6c:	719a      	strb	r2, [r3, #6]
   d4a6e:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d4a70:	230c      	movs	r3, #12
   d4a72:	e012      	b.n	d4a9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4a74:	4b48      	ldr	r3, [pc, #288]	; (d4b98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4a76:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4a7a:	6818      	ldr	r0, [r3, #0]
   d4a7c:	6859      	ldr	r1, [r3, #4]
   d4a7e:	7a1b      	ldrb	r3, [r3, #8]
   d4a80:	466a      	mov	r2, sp
   d4a82:	c203      	stmia	r2!, {r0, r1}
   d4a84:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4a86:	466b      	mov	r3, sp
   d4a88:	cb03      	ldmia	r3!, {r0, r1}
   d4a8a:	f8cc 0005 	str.w	r0, [ip, #5]
   d4a8e:	f8cc 1009 	str.w	r1, [ip, #9]
   d4a92:	7813      	ldrb	r3, [r2, #0]
   d4a94:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4a98:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4a9a:	f1b8 0f00 	cmp.w	r8, #0
   d4a9e:	d00a      	beq.n	d4ab6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4aa0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4aa4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4aa8:	0152      	lsls	r2, r2, #5
   d4aaa:	f042 0206 	orr.w	r2, r2, #6
   d4aae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d4ab2:	b2d2      	uxtb	r2, r2
   d4ab4:	e000      	b.n	d4ab8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d4ab6:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d4ab8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d4abc:	b909      	cbnz	r1, d4ac2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d4abe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d4ac2:	b12f      	cbz	r7, d4ad0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d4ac4:	b916      	cbnz	r6, d4acc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d4ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d4aca:	e001      	b.n	d4ad0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d4acc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d4ad0:	69e1      	ldr	r1, [r4, #28]
   d4ad2:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d4ad4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4ad6:	69e1      	ldr	r1, [r4, #28]
   d4ad8:	1c58      	adds	r0, r3, #1
   d4ada:	1212      	asrs	r2, r2, #8
   d4adc:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4ade:	1c9a      	adds	r2, r3, #2
   d4ae0:	69e1      	ldr	r1, [r4, #28]
   d4ae2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4ae4:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4ae6:	3303      	adds	r3, #3
   d4ae8:	69e2      	ldr	r2, [r4, #28]
   d4aea:	4649      	mov	r1, r9
   d4aec:	4620      	mov	r0, r4
   d4aee:	f7ff ff43 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d4af2:	f1b8 0f00 	cmp.w	r8, #0
   d4af6:	d00b      	beq.n	d4b10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d4af8:	4603      	mov	r3, r0
   d4afa:	69e2      	ldr	r2, [r4, #28]
   d4afc:	4641      	mov	r1, r8
   d4afe:	4620      	mov	r0, r4
   d4b00:	f7ff ff3a 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4b04:	69e2      	ldr	r2, [r4, #28]
   d4b06:	9911      	ldr	r1, [sp, #68]	; 0x44
   d4b08:	4603      	mov	r3, r0
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	f7ff ff34 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d4b10:	b167      	cbz	r7, d4b2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d4b12:	4603      	mov	r3, r0
   d4b14:	69e2      	ldr	r2, [r4, #28]
   d4b16:	4639      	mov	r1, r7
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f7ff ff2d 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d4b1e:	b12e      	cbz	r6, d4b2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d4b20:	4603      	mov	r3, r0
   d4b22:	69e2      	ldr	r2, [r4, #28]
   d4b24:	4631      	mov	r1, r6
   d4b26:	4620      	mov	r0, r4
   d4b28:	f7ff ff26 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d4b2c:	1f43      	subs	r3, r0, #5
   d4b2e:	b29b      	uxth	r3, r3
   d4b30:	69e2      	ldr	r2, [r4, #28]
   d4b32:	2110      	movs	r1, #16
   d4b34:	4620      	mov	r0, r4
   d4b36:	f7ff fed8 	bl	d48ea <_ZN4MQTT5writeEhPht>
   d4b3a:	f000 ffab 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d4b42:	6260      	str	r0, [r4, #36]	; 0x24
   d4b44:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d4b46:	4620      	mov	r0, r4
   d4b48:	f002 faa6 	bl	d7098 <_ZN9TCPClient9availableEv>
   d4b4c:	b940      	cbnz	r0, d4b60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d4b4e:	f000 ffa1 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4b54:	1ac0      	subs	r0, r0, r3
   d4b56:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4b58:	4373      	muls	r3, r6
   d4b5a:	4298      	cmp	r0, r3
   d4b5c:	d9f3      	bls.n	d4b46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d4b5e:	e00f      	b.n	d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4b60:	4669      	mov	r1, sp
   d4b62:	4620      	mov	r0, r4
   d4b64:	f7ff fe68 	bl	d4838 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d4b68:	2804      	cmp	r0, #4
   d4b6a:	d109      	bne.n	d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d4b6c:	69e3      	ldr	r3, [r4, #28]
   d4b6e:	78de      	ldrb	r6, [r3, #3]
   d4b70:	b936      	cbnz	r6, d4b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d4b72:	f000 ff8f 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d4b76:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d4b78:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4b7a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d4b7e:	e004      	b.n	d4b8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d4b80:	4620      	mov	r0, r4
   d4b82:	f002 fa71 	bl	d7068 <_ZN9TCPClient4stopEv>
   d4b86:	e000      	b.n	d4b8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d4b88:	2500      	movs	r5, #0
}
   d4b8a:	4628      	mov	r0, r5
   d4b8c:	b007      	add	sp, #28
   d4b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b92:	bf00      	nop
   d4b94:	000d8936 	.word	0x000d8936
   d4b98:	000d893d 	.word	0x000d893d

000d4b9c <_ZN4MQTT7connectEPKcS1_S1_>:

bool MQTT::connect(const char *id) {
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4b9c:	b510      	push	{r4, lr}
   d4b9e:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4ba0:	2404      	movs	r4, #4
   d4ba2:	9405      	str	r4, [sp, #20]
   d4ba4:	2401      	movs	r4, #1
   d4ba6:	9404      	str	r4, [sp, #16]
   d4ba8:	2400      	movs	r4, #0
   d4baa:	9403      	str	r4, [sp, #12]
   d4bac:	9402      	str	r4, [sp, #8]
   d4bae:	9401      	str	r4, [sp, #4]
   d4bb0:	9400      	str	r4, [sp, #0]
   d4bb2:	f7ff ff1d 	bl	d49f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4bb6:	b006      	add	sp, #24
   d4bb8:	bd10      	pop	{r4, pc}

000d4bba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4bba:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bbe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d4bc0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4bc4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4bc8:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d4bcc:	4604      	mov	r4, r0
   d4bce:	468b      	mov	fp, r1
   d4bd0:	4691      	mov	r9, r2
   d4bd2:	469a      	mov	sl, r3
    if (isConnected()) {
   d4bd4:	f7ff feea 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4bd8:	2800      	cmp	r0, #0
   d4bda:	d04c      	beq.n	d4c76 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d4bdc:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4be0:	69e0      	ldr	r0, [r4, #28]
   d4be2:	2100      	movs	r1, #0
   d4be4:	f003 fd95 	bl	d8712 <memset>

        length = writeString(topic, buffer, length);
   d4be8:	2305      	movs	r3, #5
   d4bea:	69e2      	ldr	r2, [r4, #28]
   d4bec:	4659      	mov	r1, fp
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f7ff fec2 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d4bf4:	1e6b      	subs	r3, r5, #1
   d4bf6:	2b01      	cmp	r3, #1
   d4bf8:	d812      	bhi.n	d4c20 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d4bfa:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4bfc:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d4bfe:	3301      	adds	r3, #1
   d4c00:	b29b      	uxth	r3, r3
   d4c02:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4c04:	121b      	asrs	r3, r3, #8
   d4c06:	5413      	strb	r3, [r2, r0]
   d4c08:	1c41      	adds	r1, r0, #1
   d4c0a:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d4c0c:	69e3      	ldr	r3, [r4, #28]
   d4c0e:	8c22      	ldrh	r2, [r4, #32]
   d4c10:	545a      	strb	r2, [r3, r1]
   d4c12:	3002      	adds	r0, #2
   d4c14:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4c16:	b11e      	cbz	r6, d4c20 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d4c18:	8c23      	ldrh	r3, [r4, #32]
   d4c1a:	1c5a      	adds	r2, r3, #1
   d4c1c:	8422      	strh	r2, [r4, #32]
   d4c1e:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c20:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4c22:	b291      	uxth	r1, r2
   d4c24:	1883      	adds	r3, r0, r2
   d4c26:	458a      	cmp	sl, r1
   d4c28:	b29b      	uxth	r3, r3
   d4c2a:	d90a      	bls.n	d4c42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d4c2c:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4c30:	429e      	cmp	r6, r3
   d4c32:	f102 0201 	add.w	r2, r2, #1
   d4c36:	d904      	bls.n	d4c42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d4c38:	f819 6001 	ldrb.w	r6, [r9, r1]
   d4c3c:	69e1      	ldr	r1, [r4, #28]
   d4c3e:	54ce      	strb	r6, [r1, r3]
   d4c40:	e7ef      	b.n	d4c22 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d4c42:	f1b8 0f00 	cmp.w	r8, #0
   d4c46:	bf0c      	ite	eq
   d4c48:	2130      	moveq	r1, #48	; 0x30
   d4c4a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d4c4c:	b10f      	cbz	r7, d4c52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d4c4e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d4c52:	2d02      	cmp	r5, #2
   d4c54:	d102      	bne.n	d4c5c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d4c56:	f041 0104 	orr.w	r1, r1, #4
   d4c5a:	e003      	b.n	d4c64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d4c5c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4c5e:	bf08      	it	eq
   d4c60:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4c64:	3b05      	subs	r3, #5
   d4c66:	69e2      	ldr	r2, [r4, #28]
   d4c68:	b29b      	uxth	r3, r3
   d4c6a:	4620      	mov	r0, r4
    }
    return false;
}
   d4c6c:	b001      	add	sp, #4
   d4c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4c72:	f7ff be3a 	b.w	d48ea <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4c76:	b001      	add	sp, #4
   d4c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4c7e:	9c08      	ldr	r4, [sp, #32]
   d4c80:	9403      	str	r4, [sp, #12]
   d4c82:	2400      	movs	r4, #0
   d4c84:	9402      	str	r4, [sp, #8]
   d4c86:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4c8a:	9401      	str	r4, [sp, #4]
   d4c8c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4c90:	9400      	str	r4, [sp, #0]
   d4c92:	f7ff ff92 	bl	d4bba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4c96:	b004      	add	sp, #16
   d4c98:	bd10      	pop	{r4, pc}

000d4c9a <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4c9a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4c9c:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4c9e:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4ca0:	460e      	mov	r6, r1
   d4ca2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4ca4:	f003 fd78 	bl	d8798 <strlen>
   d4ca8:	2300      	movs	r3, #0
   d4caa:	9302      	str	r3, [sp, #8]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	9300      	str	r3, [sp, #0]
   d4cb0:	4622      	mov	r2, r4
   d4cb2:	4603      	mov	r3, r0
   d4cb4:	4631      	mov	r1, r6
   d4cb6:	4628      	mov	r0, r5
   d4cb8:	f7ff ffe0 	bl	d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4cbc:	b004      	add	sp, #16
   d4cbe:	bd70      	pop	{r4, r5, r6, pc}

000d4cc0 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d4cc0:	b538      	push	{r3, r4, r5, lr}
   d4cc2:	4604      	mov	r4, r0
   d4cc4:	460d      	mov	r5, r1
    if (isConnected()) {
   d4cc6:	f7ff fe71 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4cca:	b190      	cbz	r0, d4cf2 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4ccc:	69e3      	ldr	r3, [r4, #28]
   d4cce:	2262      	movs	r2, #98	; 0x62
   d4cd0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4cd2:	69e3      	ldr	r3, [r4, #28]
   d4cd4:	2202      	movs	r2, #2
   d4cd6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4cd8:	69e3      	ldr	r3, [r4, #28]
   d4cda:	122a      	asrs	r2, r5, #8
   d4cdc:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4cde:	69e3      	ldr	r3, [r4, #28]
   d4ce0:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4ce2:	2204      	movs	r2, #4
   d4ce4:	69e1      	ldr	r1, [r4, #28]
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	f001 ffd5 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
   d4cec:	3000      	adds	r0, #0
   d4cee:	bf18      	it	ne
   d4cf0:	2001      	movne	r0, #1
    }
    return false;
}
   d4cf2:	bd38      	pop	{r3, r4, r5, pc}

000d4cf4 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d4cf4:	b538      	push	{r3, r4, r5, lr}
   d4cf6:	4604      	mov	r4, r0
   d4cf8:	460d      	mov	r5, r1
    if (isConnected()) {
   d4cfa:	f7ff fe57 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4cfe:	b190      	cbz	r0, d4d26 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4d00:	69e3      	ldr	r3, [r4, #28]
   d4d02:	2272      	movs	r2, #114	; 0x72
   d4d04:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4d06:	69e3      	ldr	r3, [r4, #28]
   d4d08:	2202      	movs	r2, #2
   d4d0a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4d0c:	69e3      	ldr	r3, [r4, #28]
   d4d0e:	122a      	asrs	r2, r5, #8
   d4d10:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4d12:	69e3      	ldr	r3, [r4, #28]
   d4d14:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4d16:	2204      	movs	r2, #4
   d4d18:	69e1      	ldr	r1, [r4, #28]
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	f001 ffbb 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
   d4d20:	3000      	adds	r0, #0
   d4d22:	bf18      	it	ne
   d4d24:	2001      	movne	r0, #1
    }
    return false;
}
   d4d26:	bd38      	pop	{r3, r4, r5, pc}

000d4d28 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d4d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d2c:	b083      	sub	sp, #12
   d4d2e:	af00      	add	r7, sp, #0
   d4d30:	4604      	mov	r4, r0
    if (isConnected()) {
   d4d32:	f7ff fe3b 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4d36:	4681      	mov	r9, r0
   d4d38:	2800      	cmp	r0, #0
   d4d3a:	f000 80f6 	beq.w	d4f2a <_ZN4MQTT4loopEv+0x202>
   d4d3e:	f000 fea9 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4d42:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d48:	4353      	muls	r3, r2
   d4d4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4d4c:	1a82      	subs	r2, r0, r2
   d4d4e:	429a      	cmp	r2, r3
   d4d50:	4605      	mov	r5, r0
   d4d52:	d803      	bhi.n	d4d5c <_ZN4MQTT4loopEv+0x34>
   d4d54:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4d56:	1a82      	subs	r2, r0, r2
   d4d58:	4293      	cmp	r3, r2
   d4d5a:	d217      	bcs.n	d4d8c <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d4d5c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4d60:	b12b      	cbz	r3, d4d6e <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d4d62:	4620      	mov	r0, r4
   d4d64:	f002 f980 	bl	d7068 <_ZN9TCPClient4stopEv>
                return false;
   d4d68:	f04f 0900 	mov.w	r9, #0
   d4d6c:	e0dd      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d4d6e:	69e2      	ldr	r2, [r4, #28]
   d4d70:	21c0      	movs	r1, #192	; 0xc0
   d4d72:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4d74:	69e2      	ldr	r2, [r4, #28]
   d4d76:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4d78:	69e1      	ldr	r1, [r4, #28]
   d4d7a:	2202      	movs	r2, #2
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f001 ff8a 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d4d82:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d4d84:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d4d86:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d4d88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	f002 f983 	bl	d7098 <_ZN9TCPClient9availableEv>
   d4d92:	2800      	cmp	r0, #0
   d4d94:	f000 80c9 	beq.w	d4f2a <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4d98:	1df9      	adds	r1, r7, #7
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	f7ff fd4c 	bl	d4838 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d4da0:	4602      	mov	r2, r0
   d4da2:	2800      	cmp	r0, #0
   d4da4:	f000 80c1 	beq.w	d4f2a <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d4da8:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d4daa:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4dac:	7818      	ldrb	r0, [r3, #0]
   d4dae:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4db2:	2930      	cmp	r1, #48	; 0x30
   d4db4:	d17d      	bne.n	d4eb2 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d4db6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d4dba:	f1bb 0f00 	cmp.w	fp, #0
   d4dbe:	f000 80b4 	beq.w	d4f2a <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4dc2:	f897 c007 	ldrb.w	ip, [r7, #7]
   d4dc6:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d4dca:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4dcc:	7881      	ldrb	r1, [r0, #2]
   d4dce:	f890 e001 	ldrb.w	lr, [r0, #1]
   d4dd2:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d4dd6:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d4dda:	f10e 0108 	add.w	r1, lr, #8
   d4dde:	f021 0107 	bic.w	r1, r1, #7
   d4de2:	ebad 0d01 	sub.w	sp, sp, r1
   d4de6:	4668      	mov	r0, sp
   d4de8:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d4dea:	b28e      	uxth	r6, r1
   d4dec:	45b6      	cmp	lr, r6
   d4dee:	d906      	bls.n	d4dfe <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d4df0:	eb0c 0601 	add.w	r6, ip, r1
   d4df4:	441e      	add	r6, r3
   d4df6:	78f6      	ldrb	r6, [r6, #3]
   d4df8:	5446      	strb	r6, [r0, r1]
   d4dfa:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d4dfc:	e7f5      	b.n	d4dea <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d4dfe:	2100      	movs	r1, #0
   d4e00:	f800 100e 	strb.w	r1, [r0, lr]
   d4e04:	781e      	ldrb	r6, [r3, #0]
   d4e06:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4e0a:	2e02      	cmp	r6, #2
   d4e0c:	f10c 0103 	add.w	r1, ip, #3
   d4e10:	ebcc 0202 	rsb	r2, ip, r2
   d4e14:	d11e      	bne.n	d4e54 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e16:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e18:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e1c:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4e20:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e22:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e24:	7849      	ldrb	r1, [r1, #1]
   d4e26:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d4e2a:	f10c 0105 	add.w	r1, ip, #5
   d4e2e:	4471      	add	r1, lr
   d4e30:	4419      	add	r1, r3
   d4e32:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4e34:	69e3      	ldr	r3, [r4, #28]
   d4e36:	2240      	movs	r2, #64	; 0x40
   d4e38:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4e3a:	69e3      	ldr	r3, [r4, #28]
   d4e3c:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4e3e:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4e40:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d4e44:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4e48:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4e4a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d4e4c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d4e4e:	f883 8003 	strb.w	r8, [r3, #3]
   d4e52:	e020      	b.n	d4e96 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4e54:	2e04      	cmp	r6, #4
   d4e56:	d124      	bne.n	d4ea2 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e58:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e5a:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e5e:	f813 8001 	ldrb.w	r8, [r3, r1]
   d4e62:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e64:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e66:	7849      	ldrb	r1, [r1, #1]
   d4e68:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4e6c:	f10c 0105 	add.w	r1, ip, #5
   d4e70:	4471      	add	r1, lr
   d4e72:	4419      	add	r1, r3
   d4e74:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4e76:	69e3      	ldr	r3, [r4, #28]
   d4e78:	2250      	movs	r2, #80	; 0x50
   d4e7a:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d4e7c:	69e3      	ldr	r3, [r4, #28]
   d4e7e:	2202      	movs	r2, #2
   d4e80:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d4e82:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4e84:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d4e88:	ea4f 2228 	mov.w	r2, r8, asr #8
   d4e8c:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d4e8e:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d4e90:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d4e92:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d4e96:	69e1      	ldr	r1, [r4, #28]
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f001 fefc 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d4e9e:	6265      	str	r5, [r4, #36]	; 0x24
   d4ea0:	e005      	b.n	d4eae <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d4ea2:	3a03      	subs	r2, #3
   d4ea4:	4471      	add	r1, lr
   d4ea6:	ebce 0202 	rsb	r2, lr, r2
   d4eaa:	4419      	add	r1, r3
   d4eac:	47d8      	blx	fp
   d4eae:	46d5      	mov	sp, sl
   d4eb0:	e03b      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d4eb2:	2950      	cmp	r1, #80	; 0x50
   d4eb4:	d108      	bne.n	d4ec8 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d4eb6:	7899      	ldrb	r1, [r3, #2]
   d4eb8:	78db      	ldrb	r3, [r3, #3]
   d4eba:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4ebe:	b289      	uxth	r1, r1
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff fefd 	bl	d4cc0 <_ZN4MQTT14publishReleaseEt>
   d4ec6:	e030      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d4ec8:	2940      	cmp	r1, #64	; 0x40
   d4eca:	d00c      	beq.n	d4ee6 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d4ecc:	2960      	cmp	r1, #96	; 0x60
   d4ece:	d108      	bne.n	d4ee2 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d4ed0:	7899      	ldrb	r1, [r3, #2]
   d4ed2:	78db      	ldrb	r3, [r3, #3]
   d4ed4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d4ed8:	b289      	uxth	r1, r1
   d4eda:	4620      	mov	r0, r4
   d4edc:	f7ff ff0a 	bl	d4cf4 <_ZN4MQTT15publishCompleteEt>
   d4ee0:	e023      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d4ee2:	2970      	cmp	r1, #112	; 0x70
   d4ee4:	d10d      	bne.n	d4f02 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d4ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4ee8:	b1f9      	cbz	r1, d4f2a <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4eea:	2a04      	cmp	r2, #4
   d4eec:	d11d      	bne.n	d4f2a <_ZN4MQTT4loopEv+0x202>
   d4eee:	f010 0f06 	tst.w	r0, #6
   d4ef2:	d11a      	bne.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d4ef4:	7898      	ldrb	r0, [r3, #2]
   d4ef6:	78db      	ldrb	r3, [r3, #3]
   d4ef8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d4efc:	b280      	uxth	r0, r0
   d4efe:	4788      	blx	r1
   d4f00:	e013      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d4f02:	2990      	cmp	r1, #144	; 0x90
   d4f04:	d011      	beq.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d4f06:	29c0      	cmp	r1, #192	; 0xc0
   d4f08:	d10a      	bne.n	d4f20 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d4f0a:	22d0      	movs	r2, #208	; 0xd0
   d4f0c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4f0e:	69e3      	ldr	r3, [r4, #28]
   d4f10:	2200      	movs	r2, #0
   d4f12:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4f14:	69e1      	ldr	r1, [r4, #28]
   d4f16:	2202      	movs	r2, #2
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f001 febc 	bl	d6c96 <_ZN9TCPClient5writeEPKhj>
   d4f1e:	e004      	b.n	d4f2a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d4f20:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d4f22:	bf04      	itt	eq
   d4f24:	2300      	moveq	r3, #0
   d4f26:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d4f2a:	4648      	mov	r0, r9
   d4f2c:	370c      	adds	r7, #12
   d4f2e:	46bd      	mov	sp, r7
   d4f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d4f34:	b570      	push	{r4, r5, r6, lr}
   d4f36:	4604      	mov	r4, r0
   d4f38:	460e      	mov	r6, r1
   d4f3a:	4615      	mov	r5, r2

    if (isConnected()) {
   d4f3c:	f7ff fd36 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4f40:	b1e8      	cbz	r0, d4f7e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d4f42:	8c23      	ldrh	r3, [r4, #32]
   d4f44:	3301      	adds	r3, #1
   d4f46:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d4f48:	b903      	cbnz	r3, d4f4c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d4f4a:	2301      	movs	r3, #1
   d4f4c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d4f4e:	8c23      	ldrh	r3, [r4, #32]
   d4f50:	69e2      	ldr	r2, [r4, #28]
   d4f52:	121b      	asrs	r3, r3, #8
   d4f54:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d4f56:	69e3      	ldr	r3, [r4, #28]
   d4f58:	8c22      	ldrh	r2, [r4, #32]
   d4f5a:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d4f5c:	69e2      	ldr	r2, [r4, #28]
   d4f5e:	4631      	mov	r1, r6
   d4f60:	2307      	movs	r3, #7
   d4f62:	4620      	mov	r0, r4
   d4f64:	f7ff fd08 	bl	d4978 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d4f68:	69e3      	ldr	r3, [r4, #28]
   d4f6a:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d4f6c:	1f03      	subs	r3, r0, #4
   d4f6e:	69e2      	ldr	r2, [r4, #28]
   d4f70:	4620      	mov	r0, r4
   d4f72:	b29b      	uxth	r3, r3
   d4f74:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d4f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d4f7a:	f7ff bcb6 	b.w	d48ea <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4f7e:	bd70      	pop	{r4, r5, r6, pc}

000d4f80 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f80:	b510      	push	{r4, lr}
   d4f82:	4604      	mov	r4, r0
    if (isConnected()) {
   d4f84:	f7ff fd12 	bl	d49ac <_ZN4MQTT11isConnectedEv>
   d4f88:	b110      	cbz	r0, d4f90 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	f7ff fce0 	bl	d4950 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d4f90:	69e0      	ldr	r0, [r4, #28]
   d4f92:	b108      	cbz	r0, d4f98 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4f94:	f7ff f887 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f98:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4f9c:	f001 f8bc 	bl	d6118 <_ZN6StringD1Ev>
   d4fa0:	4620      	mov	r0, r4
   d4fa2:	f7ff fbd5 	bl	d4750 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd10      	pop	{r4, pc}

000d4faa <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4faa:	f000 bd0b 	b.w	d59c4 <HAL_Pin_Map>

000d4fae <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4fae:	6803      	ldr	r3, [r0, #0]
   d4fb0:	b2c9      	uxtb	r1, r1
   d4fb2:	689b      	ldr	r3, [r3, #8]
   d4fb4:	4718      	bx	r3

000d4fb6 <_ZN15Adafruit_INA21917wireWriteRegisterEht>:
/*! 
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireWriteRegister (uint8_t reg, uint16_t value)
{
   d4fb6:	b570      	push	{r4, r5, r6, lr}
   d4fb8:	4606      	mov	r6, r0
   d4fba:	4614      	mov	r4, r2
   d4fbc:	460d      	mov	r5, r1
  Wire.beginTransmission(ina219_i2caddr);
   d4fbe:	f002 fb6f 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d4fc2:	7831      	ldrb	r1, [r6, #0]
   d4fc4:	f001 fd9a 	bl	d6afc <_ZN7TwoWire17beginTransmissionEh>
  #if defined (SPARK)
      Wire.write(reg);                       // Register
   d4fc8:	f002 fb6a 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d4fcc:	6803      	ldr	r3, [r0, #0]
   d4fce:	4629      	mov	r1, r5
   d4fd0:	689b      	ldr	r3, [r3, #8]
   d4fd2:	4798      	blx	r3
      Wire.write((value >> 8) & 0xFF);       // Upper 8-bits
   d4fd4:	f002 fb64 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d4fd8:	0a21      	lsrs	r1, r4, #8
   d4fda:	f7ff ffe8 	bl	d4fae <_ZN7TwoWire5writeEi>
      Wire.write(value & 0xFF);              // Lower 8-bits
   d4fde:	f002 fb5f 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d4fe2:	b2e1      	uxtb	r1, r4
   d4fe4:	f7ff ffe3 	bl	d4fae <_ZN7TwoWire5writeEi>
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d4fe8:	f002 fb5a 	bl	d76a0 <_Z19__fetch_global_Wirev>
}
   d4fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d4ff0:	f001 bd8c 	b.w	d6b0c <_ZN7TwoWire15endTransmissionEv>

000d4ff4 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>:
/*! 
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value)
{
   d4ff4:	b570      	push	{r4, r5, r6, lr}
   d4ff6:	4604      	mov	r4, r0
   d4ff8:	4615      	mov	r5, r2
   d4ffa:	460e      	mov	r6, r1

  Wire.beginTransmission(ina219_i2caddr);
   d4ffc:	f002 fb50 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d5000:	7821      	ldrb	r1, [r4, #0]
   d5002:	f001 fd7b 	bl	d6afc <_ZN7TwoWire17beginTransmissionEh>
    #if defined (SPARK)
      Wire.write(reg);
   d5006:	f002 fb4b 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d500a:	6803      	ldr	r3, [r0, #0]
   d500c:	4631      	mov	r1, r6
   d500e:	689b      	ldr	r3, [r3, #8]
   d5010:	4798      	blx	r3
        Wire.write(reg);                       // Register
      #else
        Wire.send(reg);                        // Register
      #endif
    #endif
  Wire.endTransmission();
   d5012:	f002 fb45 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d5016:	f001 fd79 	bl	d6b0c <_ZN7TwoWire15endTransmissionEv>
  
  delay(1); // Max 12-bit conversion time is 586us per sample
   d501a:	2001      	movs	r0, #1
   d501c:	f001 faf8 	bl	d6610 <delay>

  Wire.requestFrom(ina219_i2caddr, (uint8_t)2);  
   d5020:	f002 fb3e 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d5024:	7821      	ldrb	r1, [r4, #0]
   d5026:	2202      	movs	r2, #2
   d5028:	f001 fd65 	bl	d6af6 <_ZN7TwoWire11requestFromEhh>
  #if defined (SPARK)
      *value = ((Wire.read() << 8) | Wire.read());
   d502c:	f002 fb38 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d5030:	6803      	ldr	r3, [r0, #0]
   d5032:	695b      	ldr	r3, [r3, #20]
   d5034:	4798      	blx	r3
   d5036:	4604      	mov	r4, r0
   d5038:	f002 fb32 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d503c:	6803      	ldr	r3, [r0, #0]
   d503e:	695b      	ldr	r3, [r3, #20]
   d5040:	4798      	blx	r3
   d5042:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5046:	8028      	strh	r0, [r5, #0]
   d5048:	bd70      	pop	{r4, r5, r6, pc}

000d504a <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d504a:	b510      	push	{r4, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d504c:	230a      	movs	r3, #10
  
  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)
  
  ina219_calValue = 4096;
   d504e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d5052:	6083      	str	r3, [r0, #8]
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d5054:	2302      	movs	r3, #2
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d5056:	4604      	mov	r4, r0
  
  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)
  
  ina219_calValue = 4096;
   d5058:	6042      	str	r2, [r0, #4]
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d505a:	60c3      	str	r3, [r0, #12]

  // Set Calibration register to 'Cal' calculated above	
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d505c:	2105      	movs	r1, #5
   d505e:	f7ff ffaa 	bl	d4fb6 <_ZN15Adafruit_INA21917wireWriteRegisterEht>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d5062:	4620      	mov	r0, r4
   d5064:	f643 421f 	movw	r2, #15391	; 0x3c1f
   d5068:	2100      	movs	r1, #0
}
   d506a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d506e:	f7ff bfa2 	b.w	d4fb6 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

000d5072 <_ZN15Adafruit_INA219C1Eh>:
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d5072:	2200      	movs	r2, #0
/*! 
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
   d5074:	7001      	strb	r1, [r0, #0]
  ina219_currentDivider_mA = 0;
   d5076:	6082      	str	r2, [r0, #8]
  ina219_powerDivider_mW = 0;
   d5078:	60c2      	str	r2, [r0, #12]
}
   d507a:	4770      	bx	lr

000d507c <_ZN15Adafruit_INA2195beginEv>:
void Adafruit_INA219::begin(uint8_t addr) {
  ina219_i2caddr = addr;
  begin();
}

void Adafruit_INA219::begin(void) {
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
  Wire.begin();    
   d5080:	f002 fb0e 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d5084:	f001 fd28 	bl	d6ad8 <_ZN7TwoWire5beginEv>
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d5088:	4620      	mov	r0, r4
}
   d508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void Adafruit_INA219::begin(void) {
  Wire.begin();    
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d508e:	f7ff bfdc 	b.w	d504a <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>

000d5092 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d5092:	b507      	push	{r0, r1, r2, lr}
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
   d5094:	2102      	movs	r1, #2
   d5096:	f10d 0206 	add.w	r2, sp, #6
   d509a:	f7ff ffab 	bl	d4ff4 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d509e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d50a2:	10c0      	asrs	r0, r0, #3
}
   d50a4:	0080      	lsls	r0, r0, #2
   d50a6:	b003      	add	sp, #12
   d50a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d50ac <_ZN15Adafruit_INA21914getCurrent_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getCurrent_raw() {
   d50ac:	b513      	push	{r0, r1, r4, lr}
   d50ae:	4604      	mov	r4, r0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d50b0:	8882      	ldrh	r2, [r0, #4]
   d50b2:	2105      	movs	r1, #5
   d50b4:	f7ff ff7f 	bl	d4fb6 <_ZN15Adafruit_INA21917wireWriteRegisterEht>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
   d50b8:	4620      	mov	r0, r4
   d50ba:	f10d 0206 	add.w	r2, sp, #6
   d50be:	2104      	movs	r1, #4
   d50c0:	f7ff ff98 	bl	d4ff4 <_ZN15Adafruit_INA21916wireReadRegisterEhPt>
  
  return (int16_t)value;
}
   d50c4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   d50c8:	b002      	add	sp, #8
   d50ca:	bd10      	pop	{r4, pc}
   d50cc:	0000      	movs	r0, r0
	...

000d50d0 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:
/**************************************************************************/
/*! 
    @brief  Gets the shunt voltage in volts
*/
/**************************************************************************/
float Adafruit_INA219::getBusVoltage_V() {
   d50d0:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d50d2:	f7ff ffde 	bl	d5092 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d50d6:	f002 fda5 	bl	d7c24 <__aeabi_i2d>
   d50da:	a305      	add	r3, pc, #20	; (adr r3, d50f0 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d50dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50e0:	f002 fe06 	bl	d7cf0 <__aeabi_dmul>
   d50e4:	f003 f8fc 	bl	d82e0 <__aeabi_d2f>
}
   d50e8:	ee00 0a10 	vmov	s0, r0
   d50ec:	bd08      	pop	{r3, pc}
   d50ee:	bf00      	nop
   d50f0:	d2f1a9fc 	.word	0xd2f1a9fc
   d50f4:	3f50624d 	.word	0x3f50624d

000d50f8 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*! 
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
   d50f8:	b510      	push	{r4, lr}
   d50fa:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d50fc:	f7ff ffd6 	bl	d50ac <_ZN15Adafruit_INA21914getCurrent_rawEv>
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
   d5100:	ed94 0a02 	vldr	s0, [r4, #8]
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
  float valueDec = getCurrent_raw();
   d5104:	ee07 0a90 	vmov	s15, r0
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
   d5108:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
  float valueDec = getCurrent_raw();
   d510c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
}
   d5110:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5114:	bd10      	pop	{r4, pc}

000d5116 <_GLOBAL__sub_I__ZN15Adafruit_INA21917wireWriteRegisterEht>:
   d5116:	f000 bc55 	b.w	d59c4 <HAL_Pin_Map>
	...

000d511c <_ZN8LightIOTC1Ei>:
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);

/**
 * Constructor.
 */
LightIOT::LightIOT(int argonNumber){
   d511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d511e:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d5122:	460e      	mov	r6, r1
   d5124:	4928      	ldr	r1, [pc, #160]	; (d51c8 <_ZN8LightIOTC1Ei+0xac>)
   d5126:	4604      	mov	r4, r0
   d5128:	f003 fae8 	bl	d86fc <memcpy>
   d512c:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d5130:	4926      	ldr	r1, [pc, #152]	; (d51cc <_ZN8LightIOTC1Ei+0xb0>)
   d5132:	18a0      	adds	r0, r4, r2
   d5134:	f003 fae2 	bl	d86fc <memcpy>
   d5138:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d513c:	4924      	ldr	r1, [pc, #144]	; (d51d0 <_ZN8LightIOTC1Ei+0xb4>)
   d513e:	f504 7006 	add.w	r0, r4, #536	; 0x218
   d5142:	f003 fadb 	bl	d86fc <memcpy>
   d5146:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d514a:	4922      	ldr	r1, [pc, #136]	; (d51d4 <_ZN8LightIOTC1Ei+0xb8>)
   d514c:	f504 7049 	add.w	r0, r4, #804	; 0x324
   d5150:	f003 fad4 	bl	d86fc <memcpy>
   d5154:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d5158:	491f      	ldr	r1, [pc, #124]	; (d51d8 <_ZN8LightIOTC1Ei+0xbc>)
   d515a:	f504 6086 	add.w	r0, r4, #1072	; 0x430
   d515e:	2500      	movs	r5, #0
   d5160:	f003 facc 	bl	d86fc <memcpy>
   d5164:	2701      	movs	r7, #1
   d5166:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d516a:	491c      	ldr	r1, [pc, #112]	; (d51dc <_ZN8LightIOTC1Ei+0xc0>)
   d516c:	f204 503c 	addw	r0, r4, #1340	; 0x53c
   d5170:	f003 fac4 	bl	d86fc <memcpy>
   d5174:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   d5178:	f8c4 7650 	str.w	r7, [r4, #1616]	; 0x650
   d517c:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   d5180:	4917      	ldr	r1, [pc, #92]	; (d51e0 <_ZN8LightIOTC1Ei+0xc4>)
   d5182:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
   d5186:	f001 f80e 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d518a:	4b16      	ldr	r3, [pc, #88]	; (d51e4 <_ZN8LightIOTC1Ei+0xc8>)
  _argonNumber = argonNumber;
   d518c:	f8c4 664c 	str.w	r6, [r4, #1612]	; 0x64c

  switch (_argonNumber){
   d5190:	3e01      	subs	r6, #1
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);

/**
 * Constructor.
 */
LightIOT::LightIOT(int argonNumber){
   d5192:	f8c4 366c 	str.w	r3, [r4, #1644]	; 0x66c
   d5196:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
   d519a:	f884 5670 	strb.w	r5, [r4, #1648]	; 0x670
   d519e:	f8c4 5674 	str.w	r5, [r4, #1652]	; 0x674
   d51a2:	462b      	mov	r3, r5
  _argonNumber = argonNumber;

  switch (_argonNumber){
   d51a4:	2e09      	cmp	r6, #9
   d51a6:	d809      	bhi.n	d51bc <_ZN8LightIOTC1Ei+0xa0>
   d51a8:	e8df f006 	tbb	[pc, r6]
   d51ac:	05050505 	.word	0x05050505
   d51b0:	05050505 	.word	0x05050505
   d51b4:	0505      	.short	0x0505
    case 9:
      _p1 = 0.01078;
      _p2 = -0.03595;
      break;
    case 10:
      _p1 = 0.01076;
   d51b6:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   d51ba:	e001      	b.n	d51c0 <_ZN8LightIOTC1Ei+0xa4>
      _p2 = -0.02433;
      break;
    
    default:
        _p1 = 1;
   d51bc:	f8c4 7650 	str.w	r7, [r4, #1616]	; 0x650
        _p2 = 0;
   d51c0:	f8c4 3654 	str.w	r3, [r4, #1620]	; 0x654
      break;
  }
}
   d51c4:	4620      	mov	r0, r4
   d51c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d51c8:	000d8948 	.word	0x000d8948
   d51cc:	000d8a54 	.word	0x000d8a54
   d51d0:	000d8b60 	.word	0x000d8b60
   d51d4:	000d8c6c 	.word	0x000d8c6c
   d51d8:	000d8d78 	.word	0x000d8d78
   d51dc:	000d8e84 	.word	0x000d8e84
   d51e0:	000d87c5 	.word	0x000d87c5
   d51e4:	000493e0 	.word	0x000493e0

000d51e8 <_ZN8LightIOT5beginEv>:

void LightIOT::begin(){
   d51e8:	b508      	push	{r3, lr}
    batterySensor.begin();
   d51ea:	4805      	ldr	r0, [pc, #20]	; (d5200 <_ZN8LightIOT5beginEv+0x18>)
   d51ec:	f7ff ff46 	bl	d507c <_ZN15Adafruit_INA2195beginEv>
    panelSensor.begin();
   d51f0:	4804      	ldr	r0, [pc, #16]	; (d5204 <_ZN8LightIOT5beginEv+0x1c>)
   d51f2:	f7ff ff43 	bl	d507c <_ZN15Adafruit_INA2195beginEv>
    ledSensor.begin();
   d51f6:	4804      	ldr	r0, [pc, #16]	; (d5208 <_ZN8LightIOT5beginEv+0x20>)
}
   d51f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void LightIOT::begin(){
    batterySensor.begin();
    panelSensor.begin();
    ledSensor.begin();
   d51fc:	f7ff bf3e 	b.w	d507c <_ZN15Adafruit_INA2195beginEv>
   d5200:	2003e3a8 	.word	0x2003e3a8
   d5204:	2003e398 	.word	0x2003e398
   d5208:	2003e3b8 	.word	0x2003e3b8

000d520c <_ZN8LightIOT14getCredentialsEP6StringPc>:
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d520e:	460e      	mov	r6, r1
    byte _sentencePos = 0;
    byte _comma_count = 0;
    credentials[_comma_count] = "";
   d5210:	4630      	mov	r0, r6
   d5212:	490e      	ldr	r1, [pc, #56]	; (d524c <_ZN8LightIOT14getCredentialsEP6StringPc+0x40>)
    panelSensor.begin();
    ledSensor.begin();
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d5214:	4617      	mov	r7, r2
    byte _sentencePos = 0;
    byte _comma_count = 0;
    credentials[_comma_count] = "";
   d5216:	f000 fff3 	bl	d6200 <_ZN6StringaSEPKc>
   d521a:	2501      	movs	r5, #1
}

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
    byte _sentencePos = 0;
    byte _comma_count = 0;
   d521c:	2400      	movs	r4, #0
    credentials[_comma_count] = "";

    while (1){
        if (inputBuffer[_sentencePos] == NULL) break;
   d521e:	1e6b      	subs	r3, r5, #1
   d5220:	b2db      	uxtb	r3, r3
   d5222:	5cf9      	ldrb	r1, [r7, r3]
   d5224:	b181      	cbz	r1, d5248 <_ZN8LightIOT14getCredentialsEP6StringPc+0x3c>
        if (inputBuffer[_sentencePos] == '&'){
   d5226:	2926      	cmp	r1, #38	; 0x26
   d5228:	d109      	bne.n	d523e <_ZN8LightIOT14getCredentialsEP6StringPc+0x32>
            _comma_count++;
   d522a:	3401      	adds	r4, #1
   d522c:	b2e4      	uxtb	r4, r4
            credentials[_comma_count] = "";
   d522e:	4907      	ldr	r1, [pc, #28]	; (d524c <_ZN8LightIOT14getCredentialsEP6StringPc+0x40>)
   d5230:	eb06 1004 	add.w	r0, r6, r4, lsl #4
   d5234:	f000 ffe4 	bl	d6200 <_ZN6StringaSEPKc>
   d5238:	3501      	adds	r5, #1
   d523a:	b2ed      	uxtb	r5, r5
   d523c:	e7ef      	b.n	d521e <_ZN8LightIOT14getCredentialsEP6StringPc+0x12>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d523e:	eb06 1004 	add.w	r0, r6, r4, lsl #4
   d5242:	f001 f832 	bl	d62aa <_ZN6String6concatEc>
   d5246:	e7f7      	b.n	d5238 <_ZN8LightIOT14getCredentialsEP6StringPc+0x2c>
   d5248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d524a:	bf00      	nop
   d524c:	000d9108 	.word	0x000d9108

000d5250 <_ZN8LightIOT4markEi>:
      space(0); // Just to be sure
      delay(100);
  }
}

void LightIOT::mark(int time) {
   d5250:	b510      	push	{r4, lr}
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d5252:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d5256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
      space(0); // Just to be sure
      delay(100);
  }
}

void LightIOT::mark(int time) {
   d525a:	460c      	mov	r4, r1
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d525c:	435a      	muls	r2, r3
   d525e:	2180      	movs	r1, #128	; 0x80
   d5260:	200e      	movs	r0, #14
   d5262:	f002 f9df 	bl	d7624 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d5266:	2c00      	cmp	r4, #0
   d5268:	dd04      	ble.n	d5274 <_ZN8LightIOT4markEi+0x24>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d526a:	4620      	mov	r0, r4
}
   d526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5270:	f000 bc08 	b.w	d5a84 <HAL_Delay_Microseconds>
   d5274:	bd10      	pop	{r4, pc}

000d5276 <_ZN8LightIOT5spaceEi>:

/* Leave pin off for time (given in microseconds) */

void LightIOT::space(int time) {
   d5276:	b510      	push	{r4, lr}
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d5278:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d527c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  if (time > 0) delayMicroseconds(time);
}

/* Leave pin off for time (given in microseconds) */

void LightIOT::space(int time) {
   d5280:	460c      	mov	r4, r1
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d5282:	435a      	muls	r2, r3
   d5284:	2100      	movs	r1, #0
   d5286:	200e      	movs	r0, #14
   d5288:	f002 f9cc 	bl	d7624 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d528c:	2c00      	cmp	r4, #0
   d528e:	dd04      	ble.n	d529a <_ZN8LightIOT5spaceEi+0x24>
   d5290:	4620      	mov	r0, r4
}
   d5292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5296:	f000 bbf5 	b.w	d5a84 <HAL_Delay_Microseconds>
   d529a:	bd10      	pop	{r4, pc}

000d529c <_ZN8LightIOT11enableIROutEi>:


void LightIOT::enableIROut(int khz){
   d529c:	b508      	push	{r3, lr}
    irout_khz = khz;
   d529e:	f8c0 1648 	str.w	r1, [r0, #1608]	; 0x648
    pinMode(TIMER_PWM_PIN, OUTPUT);
   d52a2:	2101      	movs	r1, #1
   d52a4:	200e      	movs	r0, #14
   d52a6:	f002 f969 	bl	d757c <pinMode>
    digitalWrite(TIMER_PWM_PIN, LOW);
   d52aa:	2100      	movs	r1, #0
   d52ac:	200e      	movs	r0, #14
   d52ae:	f002 f976 	bl	d759e <digitalWrite>
    TIMER_CONFIG_KHZ(khz);
   d52b2:	2101      	movs	r1, #1
   d52b4:	200e      	movs	r0, #14
}
   d52b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void LightIOT::enableIROut(int khz){
    irout_khz = khz;
    pinMode(TIMER_PWM_PIN, OUTPUT);
    digitalWrite(TIMER_PWM_PIN, LOW);
    TIMER_CONFIG_KHZ(khz);
   d52ba:	f002 b95f 	b.w	d757c <pinMode>

000d52be <_ZN8LightIOT7sendRawEPjii>:
    }
        
}

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
   d52be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52c2:	4605      	mov	r5, r0
   d52c4:	460f      	mov	r7, r1
   d52c6:	4690      	mov	r8, r2
   d52c8:	4699      	mov	r9, r3
   d52ca:	2605      	movs	r6, #5
  for(int i=0;i<5;i++){
      enableIROut(khz);
   d52cc:	4649      	mov	r1, r9
   d52ce:	4628      	mov	r0, r5
   d52d0:	f7ff ffe4 	bl	d529c <_ZN8LightIOT11enableIROutEi>
      for (int i = 0; i < len; i++) {
   d52d4:	2400      	movs	r4, #0
   d52d6:	4544      	cmp	r4, r8
   d52d8:	da0b      	bge.n	d52f2 <_ZN8LightIOT7sendRawEPjii+0x34>
        if (i & 1) {
   d52da:	07e3      	lsls	r3, r4, #31
          space(buf[i]);
   d52dc:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   d52e0:	4628      	mov	r0, r5
void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
      enableIROut(khz);
      for (int i = 0; i < len; i++) {
        if (i & 1) {
   d52e2:	d502      	bpl.n	d52ea <_ZN8LightIOT7sendRawEPjii+0x2c>
          space(buf[i]);
   d52e4:	f7ff ffc7 	bl	d5276 <_ZN8LightIOT5spaceEi>
   d52e8:	e001      	b.n	d52ee <_ZN8LightIOT7sendRawEPjii+0x30>
        }
        else {
          mark(buf[i]);
   d52ea:	f7ff ffb1 	bl	d5250 <_ZN8LightIOT4markEi>

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
      enableIROut(khz);
      for (int i = 0; i < len; i++) {
   d52ee:	3401      	adds	r4, #1
   d52f0:	e7f1      	b.n	d52d6 <_ZN8LightIOT7sendRawEPjii+0x18>
        }
        else {
          mark(buf[i]);
        }
      }
      space(0); // Just to be sure
   d52f2:	2100      	movs	r1, #0
   d52f4:	4628      	mov	r0, r5
   d52f6:	f7ff ffbe 	bl	d5276 <_ZN8LightIOT5spaceEi>
      delay(100);
   d52fa:	2064      	movs	r0, #100	; 0x64
   d52fc:	f001 f988 	bl	d6610 <delay>
        
}

void LightIOT::sendRaw(unsigned int buf[], int len, int khz)
{
  for(int i=0;i<5;i++){
   d5300:	3e01      	subs	r6, #1
   d5302:	d1e3      	bne.n	d52cc <_ZN8LightIOT7sendRawEPjii+0xe>
        }
      }
      space(0); // Just to be sure
      delay(100);
  }
}
   d5304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5308 <_ZN8LightIOT11sendCommandEh.part.0>:
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
   d5308:	2903      	cmp	r1, #3

//=============================================================
//================== IRSEND FUNCTION ==========================
//=============================================================

void LightIOT::sendCommand(uint8_t command){
   d530a:	b538      	push	{r3, r4, r5, lr}
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
        sendRaw(rawData_t, 67, 38);  // Send T command
   d530c:	f04f 0243 	mov.w	r2, #67	; 0x43
   d5310:	f04f 0326 	mov.w	r3, #38	; 0x26
   d5314:	f500 65cb 	add.w	r5, r0, #1624	; 0x658
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
    }else if (command==2){
        sendRaw(rawData_l, 67, 38);  // Send L command
        _modeDriver = "MODE L";
    }else if (command==3){
   d5318:	d105      	bne.n	d5326 <_ZN8LightIOT11sendCommandEh.part.0+0x1e>
        sendRaw(rawData_t, 67, 38);  // Send T command
   d531a:	f500 7149 	add.w	r1, r0, #804	; 0x324
   d531e:	f7ff ffce 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE T";
   d5322:	490a      	ldr	r1, [pc, #40]	; (d534c <_ZN8LightIOT11sendCommandEh.part.0+0x44>)
   d5324:	e00c      	b.n	d5340 <_ZN8LightIOT11sendCommandEh.part.0+0x38>
    }else if (command==4){
   d5326:	2904      	cmp	r1, #4
   d5328:	d105      	bne.n	d5336 <_ZN8LightIOT11sendCommandEh.part.0+0x2e>
        sendRaw(rawData_m, 67, 38);  // Send U command
   d532a:	f200 513c 	addw	r1, r0, #1340	; 0x53c
   d532e:	f7ff ffc6 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE U";
   d5332:	4907      	ldr	r1, [pc, #28]	; (d5350 <_ZN8LightIOT11sendCommandEh.part.0+0x48>)
   d5334:	e004      	b.n	d5340 <_ZN8LightIOT11sendCommandEh.part.0+0x38>
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
   d5336:	f500 6186 	add.w	r1, r0, #1072	; 0x430
   d533a:	f7ff ffc0 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE M";
   d533e:	4905      	ldr	r1, [pc, #20]	; (d5354 <_ZN8LightIOT11sendCommandEh.part.0+0x4c>)
   d5340:	4628      	mov	r0, r5
    }
        
}
   d5342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }else if (command==4){
        sendRaw(rawData_m, 67, 38);  // Send U command
        _modeDriver = "MODE U";
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
   d5346:	f000 bf5b 	b.w	d6200 <_ZN6StringaSEPKc>
   d534a:	bf00      	nop
   d534c:	000d87cc 	.word	0x000d87cc
   d5350:	000d87d3 	.word	0x000d87d3
   d5354:	000d8f90 	.word	0x000d8f90

000d5358 <_ZN8LightIOT11sendCommandEh>:

//=============================================================
//================== IRSEND FUNCTION ==========================
//=============================================================

void LightIOT::sendCommand(uint8_t command){
   d5358:	b510      	push	{r4, lr}
   d535a:	4604      	mov	r4, r0
    if (command==0){
   d535c:	b931      	cbnz	r1, d536c <_ZN8LightIOT11sendCommandEh+0x14>
        sendRaw(rawData_demo, 67, 38);  // Send DEMO command
   d535e:	4601      	mov	r1, r0
   d5360:	2326      	movs	r3, #38	; 0x26
   d5362:	2243      	movs	r2, #67	; 0x43
   d5364:	f7ff ffab 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "DEMO";
   d5368:	490f      	ldr	r1, [pc, #60]	; (d53a8 <_ZN8LightIOT11sendCommandEh+0x50>)
   d536a:	e008      	b.n	d537e <_ZN8LightIOT11sendCommandEh+0x26>
    }else if (command==1){
   d536c:	2901      	cmp	r1, #1
   d536e:	d10c      	bne.n	d538a <_ZN8LightIOT11sendCommandEh+0x32>
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
   d5370:	f500 7186 	add.w	r1, r0, #268	; 0x10c
   d5374:	2326      	movs	r3, #38	; 0x26
   d5376:	2243      	movs	r2, #67	; 0x43
   d5378:	f7ff ffa1 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "OFF";
   d537c:	490b      	ldr	r1, [pc, #44]	; (d53ac <_ZN8LightIOT11sendCommandEh+0x54>)
   d537e:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
    }
        
}
   d5382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (command==0){
        sendRaw(rawData_demo, 67, 38);  // Send DEMO command
        _modeDriver = "DEMO";
    }else if (command==1){
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
        _modeDriver = "OFF";
   d5386:	f000 bf3b 	b.w	d6200 <_ZN6StringaSEPKc>
    }else if (command==2){
   d538a:	2902      	cmp	r1, #2
   d538c:	d107      	bne.n	d539e <_ZN8LightIOT11sendCommandEh+0x46>
        sendRaw(rawData_l, 67, 38);  // Send L command
   d538e:	f500 7106 	add.w	r1, r0, #536	; 0x218
   d5392:	2326      	movs	r3, #38	; 0x26
   d5394:	2243      	movs	r2, #67	; 0x43
   d5396:	f7ff ff92 	bl	d52be <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE L";
   d539a:	4905      	ldr	r1, [pc, #20]	; (d53b0 <_ZN8LightIOT11sendCommandEh+0x58>)
   d539c:	e7ef      	b.n	d537e <_ZN8LightIOT11sendCommandEh+0x26>
    }else{
        sendRaw(rawData_u, 67, 38);  // Send M command
        _modeDriver = "MODE M";
    }
        
}
   d539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d53a2:	f7ff bfb1 	b.w	d5308 <_ZN8LightIOT11sendCommandEh.part.0>
   d53a6:	bf00      	nop
   d53a8:	000d87bc 	.word	0x000d87bc
   d53ac:	000d87c1 	.word	0x000d87c1
   d53b0:	000d87c5 	.word	0x000d87c5

000d53b4 <_ZN8LightIOT9measuringEPfS0_>:
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d53b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b6:	ed2d 8b06 	vpush	{d8-d10}
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d53ba:	f8d0 3650 	ldr.w	r3, [r0, #1616]	; 0x650
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
   d53be:	4f2d      	ldr	r7, [pc, #180]	; (d5474 <_ZN8LightIOT9measuringEPfS0_+0xc0>)
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d53c0:	4606      	mov	r6, r0
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d53c2:	ee07 3a90 	vmov	s15, r3
   d53c6:	2013      	movs	r0, #19
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d53c8:	460d      	mov	r5, r1
   d53ca:	4614      	mov	r4, r2
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d53cc:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d53d0:	f002 f911 	bl	d75f6 <analogRead>
   d53d4:	f8d6 3654 	ldr.w	r3, [r6, #1620]	; 0x654
   d53d8:	ee07 3a90 	vmov	s15, r3
   d53dc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d53e0:	ee07 0a90 	vmov	s15, r0
   d53e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float ledCurrent = ledSensor.getCurrent_mA();
   d53e8:	4823      	ldr	r0, [pc, #140]	; (d5478 <_ZN8LightIOT9measuringEPfS0_+0xc4>)
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d53ea:	eea8 8aa7 	vfma.f32	s16, s17, s15
    float ledCurrent = ledSensor.getCurrent_mA();
   d53ee:	f7ff fe83 	bl	d50f8 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float panelVoltage = panelSensor.getBusVoltage_V();
   d53f2:	4638      	mov	r0, r7

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
   d53f4:	eeb0 aa40 	vmov.f32	s20, s0
    float panelVoltage = panelSensor.getBusVoltage_V();
   d53f8:	f7ff fe6a 	bl	d50d0 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float panelCurrent = panelSensor.getCurrent_mA();
   d53fc:	4638      	mov	r0, r7
// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
   d53fe:	eef0 9a40 	vmov.f32	s19, s0
    float panelCurrent = panelSensor.getCurrent_mA();
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d5402:	4f1e      	ldr	r7, [pc, #120]	; (d547c <_ZN8LightIOT9measuringEPfS0_+0xc8>)
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
   d5404:	f7ff fe78 	bl	d50f8 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d5408:	4638      	mov	r0, r7
void LightIOT::measuring(float *vAverage, float *cAverage){
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
   d540a:	eeb0 9a40 	vmov.f32	s18, s0
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d540e:	f7ff fe5f 	bl	d50d0 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float batteryCurrent = batterySensor.getCurrent_mA();
   d5412:	4638      	mov	r0, r7
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
    float ledCurrent = ledSensor.getCurrent_mA();
    float panelVoltage = panelSensor.getBusVoltage_V();
    float panelCurrent = panelSensor.getCurrent_mA();
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d5414:	eef0 8a40 	vmov.f32	s17, s0
    float batteryCurrent = batterySensor.getCurrent_mA();
   d5418:	f7ff fe6e 	bl	d50f8 <_ZN15Adafruit_INA21913getCurrent_mAEv>

    vAverage[0] += ledVoltage;
   d541c:	edd5 5a00 	vldr	s11, [r5]
   d5420:	ee35 8a88 	vadd.f32	s16, s11, s16
   d5424:	ed85 8a00 	vstr	s16, [r5]
    cAverage[0] += ledCurrent;
   d5428:	ed94 6a00 	vldr	s12, [r4]
   d542c:	ee36 6a0a 	vadd.f32	s12, s12, s20
   d5430:	ed84 6a00 	vstr	s12, [r4]
    vAverage[1] += panelVoltage;
   d5434:	edd5 6a01 	vldr	s13, [r5, #4]
   d5438:	ee76 6aa9 	vadd.f32	s13, s13, s19
   d543c:	edc5 6a01 	vstr	s13, [r5, #4]
    cAverage[1] += panelCurrent;
   d5440:	ed94 7a01 	vldr	s14, [r4, #4]
   d5444:	ee37 7a09 	vadd.f32	s14, s14, s18
   d5448:	ed84 7a01 	vstr	s14, [r4, #4]
    vAverage[2] += batteryVoltage;
   d544c:	edd5 7a02 	vldr	s15, [r5, #8]
   d5450:	ee77 7aa8 	vadd.f32	s15, s15, s17
    cAverage[2] += batteryCurrent;

    _countSamples++;
}
   d5454:	ecbd 8b06 	vpop	{d8-d10}

    vAverage[0] += ledVoltage;
    cAverage[0] += ledCurrent;
    vAverage[1] += panelVoltage;
    cAverage[1] += panelCurrent;
    vAverage[2] += batteryVoltage;
   d5458:	edc5 7a02 	vstr	s15, [r5, #8]
    cAverage[2] += batteryCurrent;
   d545c:	edd4 7a02 	vldr	s15, [r4, #8]
   d5460:	ee37 0a80 	vadd.f32	s0, s15, s0
   d5464:	ed84 0a02 	vstr	s0, [r4, #8]

    _countSamples++;
   d5468:	f8d6 3674 	ldr.w	r3, [r6, #1652]	; 0x674
   d546c:	3301      	adds	r3, #1
   d546e:	f8c6 3674 	str.w	r3, [r6, #1652]	; 0x674
}
   d5472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5474:	2003e398 	.word	0x2003e398
   d5478:	2003e3b8 	.word	0x2003e3b8
   d547c:	2003e3a8 	.word	0x2003e3a8

000d5480 <_ZN8LightIOT10getAverageEPfS0_>:

// set average variables (average=average/samples)
void LightIOT::getAverage(float *vAverage, float *cAverage){
    vAverage[0] = vAverage[0]/ (float) _countSamples;
   d5480:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5484:	edd1 6a00 	vldr	s13, [r1]
   d5488:	ee07 3a90 	vmov	s15, r3
   d548c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5494:	ed81 7a00 	vstr	s14, [r1]
    cAverage[0] = cAverage[0]/ (float) _countSamples;
   d5498:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d549c:	edd2 6a00 	vldr	s13, [r2]
   d54a0:	ee07 3a90 	vmov	s15, r3
   d54a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d54ac:	ed82 7a00 	vstr	s14, [r2]
    vAverage[1] = vAverage[1]/ (float) _countSamples;
   d54b0:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d54b4:	edd1 6a01 	vldr	s13, [r1, #4]
   d54b8:	ee07 3a90 	vmov	s15, r3
   d54bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d54c4:	ed81 7a01 	vstr	s14, [r1, #4]
    cAverage[1] = cAverage[1]/ (float) _countSamples;
   d54c8:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d54cc:	edd2 6a01 	vldr	s13, [r2, #4]
   d54d0:	ee07 3a90 	vmov	s15, r3
   d54d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d54dc:	ed82 7a01 	vstr	s14, [r2, #4]
    vAverage[2] = vAverage[2]/ (float) _countSamples;
   d54e0:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d54e4:	edd1 6a02 	vldr	s13, [r1, #8]
   d54e8:	ee07 3a90 	vmov	s15, r3
   d54ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d54f4:	ed81 7a02 	vstr	s14, [r1, #8]
    cAverage[2] = cAverage[2]/ (float) _countSamples;
   d54f8:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d54fc:	edd2 6a02 	vldr	s13, [r2, #8]
   d5500:	ee07 3a90 	vmov	s15, r3
   d5504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d550c:	ed82 7a02 	vstr	s14, [r2, #8]
   d5510:	4770      	bx	lr

000d5512 <_ZN8LightIOT12resetAverageEPfS0_>:
}

// reset average variables
void LightIOT::resetAverage(float *vAverage, float *cAverage){
    vAverage[0] = 0;
   d5512:	2300      	movs	r3, #0
   d5514:	600b      	str	r3, [r1, #0]
    cAverage[0] = 0;
   d5516:	6013      	str	r3, [r2, #0]
    vAverage[1] = 0;
   d5518:	604b      	str	r3, [r1, #4]
    cAverage[1] = 0;
   d551a:	6053      	str	r3, [r2, #4]
    vAverage[2] = 0;
   d551c:	608b      	str	r3, [r1, #8]
    cAverage[2] = 0;
   d551e:	6093      	str	r3, [r2, #8]
    _countSamples= 0;
   d5520:	2300      	movs	r3, #0
   d5522:	f8c0 3674 	str.w	r3, [r0, #1652]	; 0x674
   d5526:	4770      	bx	lr

000d5528 <_ZN8LightIOT13sensorsToJSONEPfS0_>:
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d5528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    String dataJson = "{";
   d552c:	4fcf      	ldr	r7, [pc, #828]	; (d586c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x344>)

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d552e:	4dd0      	ldr	r5, [pc, #832]	; (d5870 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x348>)
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d5530:	4ed0      	ldr	r6, [pc, #832]	; (d5874 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x34c>)
        	dataJson = dataJson + "\"data\":" + "{";
        	
            	dataJson = dataJson+ "\"led\":" + "{";
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d5532:	f8df b36c 	ldr.w	fp, [pc, #876]	; d58a0 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x378>
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d5536:	b08b      	sub	sp, #44	; 0x2c
   d5538:	4604      	mov	r4, r0
   d553a:	4689      	mov	r9, r1
    String dataJson = "{";
   d553c:	4639      	mov	r1, r7
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d553e:	4692      	mov	sl, r2
   d5540:	4698      	mov	r8, r3
    String dataJson = "{";
   d5542:	f000 fe30 	bl	d61a6 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5546:	4621      	mov	r1, r4
   d5548:	a806      	add	r0, sp, #24
   d554a:	f000 fe4e 	bl	d61ea <_ZN6StringC1ERKS_>

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d554e:	49ca      	ldr	r1, [pc, #808]	; (d5878 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x350>)
   d5550:	a806      	add	r0, sp, #24
   d5552:	f000 fec3 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5556:	49c9      	ldr	r1, [pc, #804]	; (d587c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x354>)
   d5558:	f000 fec0 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d555c:	4629      	mov	r1, r5
   d555e:	f000 febd 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5562:	4601      	mov	r1, r0
   d5564:	4620      	mov	r0, r4
   d5566:	f000 fe31 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d556a:	a806      	add	r0, sp, #24
   d556c:	f000 fdd4 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5570:	4621      	mov	r1, r4
   d5572:	a806      	add	r0, sp, #24
   d5574:	f000 fe39 	bl	d61ea <_ZN6StringC1ERKS_>
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
   d5578:	49c1      	ldr	r1, [pc, #772]	; (d5880 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x358>)
   d557a:	a806      	add	r0, sp, #24
   d557c:	f000 feae 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5580:	49c0      	ldr	r1, [pc, #768]	; (d5884 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x35c>)
   d5582:	f000 feab 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5586:	4629      	mov	r1, r5
   d5588:	f000 fea8 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d558c:	4601      	mov	r1, r0
   d558e:	4620      	mov	r0, r4
   d5590:	f000 fe1c 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5594:	a806      	add	r0, sp, #24
   d5596:	f000 fdbf 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d559a:	4621      	mov	r1, r4
   d559c:	a806      	add	r0, sp, #24
   d559e:	f000 fe24 	bl	d61ea <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d55a2:	49b9      	ldr	r1, [pc, #740]	; (d5888 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x360>)
   d55a4:	a806      	add	r0, sp, #24
   d55a6:	f000 fe99 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55aa:	4631      	mov	r1, r6
   d55ac:	f000 fe96 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55b0:	f509 61cb 	add.w	r1, r9, #1624	; 0x658
   d55b4:	f000 fe86 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d55b8:	4631      	mov	r1, r6
   d55ba:	f000 fe8f 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55be:	4629      	mov	r1, r5
   d55c0:	f000 fe8c 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55c4:	4601      	mov	r1, r0
   d55c6:	4620      	mov	r0, r4
   d55c8:	f000 fe00 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d55cc:	a806      	add	r0, sp, #24
   d55ce:	f000 fda3 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d55d2:	4621      	mov	r1, r4
   d55d4:	a806      	add	r0, sp, #24
   d55d6:	f000 fe08 	bl	d61ea <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"data\":" + "{";
   d55da:	49ac      	ldr	r1, [pc, #688]	; (d588c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x364>)
        	
            	dataJson = dataJson+ "\"led\":" + "{";
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d55dc:	f8df 92c4 	ldr.w	r9, [pc, #708]	; d58a4 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x37c>
    String dataJson = "{";

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
            dataJson = dataJson + "\"name\":" + "\"Biblioteca\""+",";
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
        	dataJson = dataJson + "\"data\":" + "{";
   d55e0:	a806      	add	r0, sp, #24
   d55e2:	f000 fe7b 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55e6:	4639      	mov	r1, r7
   d55e8:	f000 fe78 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d55ec:	4601      	mov	r1, r0
   d55ee:	4620      	mov	r0, r4
   d55f0:	f000 fdec 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d55f4:	a806      	add	r0, sp, #24
   d55f6:	f000 fd8f 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d55fa:	4621      	mov	r1, r4
   d55fc:	a806      	add	r0, sp, #24
   d55fe:	f000 fdf4 	bl	d61ea <_ZN6StringC1ERKS_>
        	
            	dataJson = dataJson+ "\"led\":" + "{";
   d5602:	49a3      	ldr	r1, [pc, #652]	; (d5890 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x368>)
   d5604:	a806      	add	r0, sp, #24
   d5606:	f000 fe69 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d560a:	4639      	mov	r1, r7
   d560c:	f000 fe66 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5610:	4601      	mov	r1, r0
   d5612:	4620      	mov	r0, r4
   d5614:	f000 fdda 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5618:	a806      	add	r0, sp, #24
   d561a:	f000 fd7d 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d561e:	4621      	mov	r1, r4
   d5620:	a802      	add	r0, sp, #8
   d5622:	f000 fde2 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d5626:	4659      	mov	r1, fp
   d5628:	a802      	add	r0, sp, #8
   d562a:	f000 fe57 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d562e:	ed9a 0a00 	vldr	s0, [sl]
   d5632:	4606      	mov	r6, r0
   d5634:	2106      	movs	r1, #6
   d5636:	a806      	add	r0, sp, #24
   d5638:	f000 fe06 	bl	d6248 <_ZN6StringC1Efi>
   d563c:	a906      	add	r1, sp, #24
   d563e:	4630      	mov	r0, r6
   d5640:	f000 fe40 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d5644:	4629      	mov	r1, r5
   d5646:	f000 fe49 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d564a:	4601      	mov	r1, r0
   d564c:	4620      	mov	r0, r4
   d564e:	f000 fdbd 	bl	d61cc <_ZN6StringaSERKS_>
   d5652:	a806      	add	r0, sp, #24
   d5654:	f000 fd60 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5658:	a802      	add	r0, sp, #8
   d565a:	f000 fd5d 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d565e:	4621      	mov	r1, r4
   d5660:	a802      	add	r0, sp, #8
   d5662:	f000 fdc2 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d5666:	4649      	mov	r1, r9
   d5668:	a802      	add	r0, sp, #8
   d566a:	f000 fe37 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d566e:	ed98 0a00 	vldr	s0, [r8]
   d5672:	4606      	mov	r6, r0
   d5674:	2106      	movs	r1, #6
   d5676:	a806      	add	r0, sp, #24
   d5678:	f000 fde6 	bl	d6248 <_ZN6StringC1Efi>
   d567c:	4630      	mov	r0, r6
   d567e:	4e85      	ldr	r6, [pc, #532]	; (d5894 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x36c>)
   d5680:	a906      	add	r1, sp, #24
   d5682:	f000 fe1f 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d5686:	4631      	mov	r1, r6
   d5688:	f000 fe28 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d568c:	4601      	mov	r1, r0
   d568e:	4620      	mov	r0, r4
   d5690:	f000 fd9c 	bl	d61cc <_ZN6StringaSERKS_>
   d5694:	a806      	add	r0, sp, #24
   d5696:	f000 fd3f 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d569a:	a802      	add	r0, sp, #8
   d569c:	f000 fd3c 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56a0:	4621      	mov	r1, r4
   d56a2:	a806      	add	r0, sp, #24
   d56a4:	f000 fda1 	bl	d61ea <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d56a8:	4629      	mov	r1, r5
   d56aa:	a806      	add	r0, sp, #24
   d56ac:	f000 fe16 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d56b0:	4601      	mov	r1, r0
   d56b2:	4620      	mov	r0, r4
   d56b4:	f000 fd8a 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56b8:	a806      	add	r0, sp, #24
   d56ba:	f000 fd2d 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56be:	4621      	mov	r1, r4
   d56c0:	a806      	add	r0, sp, #24
   d56c2:	f000 fd92 	bl	d61ea <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"pv\":" + "{";
   d56c6:	4974      	ldr	r1, [pc, #464]	; (d5898 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x370>)
   d56c8:	a806      	add	r0, sp, #24
   d56ca:	f000 fe07 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d56ce:	4639      	mov	r1, r7
   d56d0:	f000 fe04 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d56d4:	4601      	mov	r1, r0
   d56d6:	4620      	mov	r0, r4
   d56d8:	f000 fd78 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56dc:	a806      	add	r0, sp, #24
   d56de:	f000 fd1b 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d56e2:	4621      	mov	r1, r4
   d56e4:	a802      	add	r0, sp, #8
   d56e6:	f000 fd80 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[1]) +",";
   d56ea:	4659      	mov	r1, fp
   d56ec:	a802      	add	r0, sp, #8
   d56ee:	f000 fdf5 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d56f2:	ed9a 0a01 	vldr	s0, [sl, #4]
   d56f6:	9001      	str	r0, [sp, #4]
   d56f8:	2106      	movs	r1, #6
   d56fa:	a806      	add	r0, sp, #24
   d56fc:	f000 fda4 	bl	d6248 <_ZN6StringC1Efi>
   d5700:	9b01      	ldr	r3, [sp, #4]
   d5702:	a906      	add	r1, sp, #24
   d5704:	4618      	mov	r0, r3
   d5706:	f000 fddd 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d570a:	4629      	mov	r1, r5
   d570c:	f000 fde6 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5710:	4601      	mov	r1, r0
   d5712:	4620      	mov	r0, r4
   d5714:	f000 fd5a 	bl	d61cc <_ZN6StringaSERKS_>
   d5718:	a806      	add	r0, sp, #24
   d571a:	f000 fcfd 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d571e:	a802      	add	r0, sp, #8
   d5720:	f000 fcfa 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5724:	4621      	mov	r1, r4
   d5726:	a802      	add	r0, sp, #8
   d5728:	f000 fd5f 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[1]) +"}";
   d572c:	4649      	mov	r1, r9
   d572e:	a802      	add	r0, sp, #8
   d5730:	f000 fdd4 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5734:	ed98 0a01 	vldr	s0, [r8, #4]
   d5738:	9001      	str	r0, [sp, #4]
   d573a:	2106      	movs	r1, #6
   d573c:	a806      	add	r0, sp, #24
   d573e:	f000 fd83 	bl	d6248 <_ZN6StringC1Efi>
   d5742:	9b01      	ldr	r3, [sp, #4]
   d5744:	a906      	add	r1, sp, #24
   d5746:	4618      	mov	r0, r3
   d5748:	f000 fdbc 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d574c:	4631      	mov	r1, r6
   d574e:	f000 fdc5 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5752:	4601      	mov	r1, r0
   d5754:	4620      	mov	r0, r4
   d5756:	f000 fd39 	bl	d61cc <_ZN6StringaSERKS_>
   d575a:	a806      	add	r0, sp, #24
   d575c:	f000 fcdc 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5760:	a802      	add	r0, sp, #8
   d5762:	f000 fcd9 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5766:	4621      	mov	r1, r4
   d5768:	a806      	add	r0, sp, #24
   d576a:	f000 fd3e 	bl	d61ea <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d576e:	4629      	mov	r1, r5
   d5770:	a806      	add	r0, sp, #24
   d5772:	f000 fdb3 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5776:	4601      	mov	r1, r0
   d5778:	4620      	mov	r0, r4
   d577a:	f000 fd27 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d577e:	a806      	add	r0, sp, #24
   d5780:	f000 fcca 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5784:	4621      	mov	r1, r4
   d5786:	a806      	add	r0, sp, #24
   d5788:	f000 fd2f 	bl	d61ea <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"battery\":" + "{";
   d578c:	4943      	ldr	r1, [pc, #268]	; (d589c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x374>)
   d578e:	a806      	add	r0, sp, #24
   d5790:	f000 fda4 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5794:	4639      	mov	r1, r7
   d5796:	f000 fda1 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d579a:	4601      	mov	r1, r0
   d579c:	4620      	mov	r0, r4
   d579e:	f000 fd15 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d57a2:	a806      	add	r0, sp, #24
   d57a4:	f000 fcb8 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d57a8:	4621      	mov	r1, r4
   d57aa:	a802      	add	r0, sp, #8
   d57ac:	f000 fd1d 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[2]) +",";
   d57b0:	4659      	mov	r1, fp
   d57b2:	a802      	add	r0, sp, #8
   d57b4:	f000 fd92 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d57b8:	ed9a 0a02 	vldr	s0, [sl, #8]
   d57bc:	4607      	mov	r7, r0
   d57be:	2106      	movs	r1, #6
   d57c0:	a806      	add	r0, sp, #24
   d57c2:	f000 fd41 	bl	d6248 <_ZN6StringC1Efi>
   d57c6:	a906      	add	r1, sp, #24
   d57c8:	4638      	mov	r0, r7
   d57ca:	f000 fd7b 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d57ce:	4629      	mov	r1, r5
   d57d0:	f000 fd84 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d57d4:	4601      	mov	r1, r0
   d57d6:	4620      	mov	r0, r4
   d57d8:	f000 fcf8 	bl	d61cc <_ZN6StringaSERKS_>
   d57dc:	a806      	add	r0, sp, #24
   d57de:	f000 fc9b 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d57e2:	a802      	add	r0, sp, #8
   d57e4:	f000 fc98 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d57e8:	4621      	mov	r1, r4
   d57ea:	a802      	add	r0, sp, #8
   d57ec:	f000 fcfd 	bl	d61ea <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[2]) +"}";
   d57f0:	4649      	mov	r1, r9
   d57f2:	a802      	add	r0, sp, #8
   d57f4:	f000 fd72 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d57f8:	ed98 0a02 	vldr	s0, [r8, #8]
   d57fc:	4605      	mov	r5, r0
   d57fe:	2106      	movs	r1, #6
   d5800:	a806      	add	r0, sp, #24
   d5802:	f000 fd21 	bl	d6248 <_ZN6StringC1Efi>
   d5806:	a906      	add	r1, sp, #24
   d5808:	4628      	mov	r0, r5
   d580a:	f000 fd5b 	bl	d62c4 <_ZplRK15StringSumHelperRK6String>
   d580e:	4631      	mov	r1, r6
   d5810:	f000 fd64 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5814:	4601      	mov	r1, r0
   d5816:	4620      	mov	r0, r4
   d5818:	f000 fcd8 	bl	d61cc <_ZN6StringaSERKS_>
   d581c:	a806      	add	r0, sp, #24
   d581e:	f000 fc7b 	bl	d6118 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5822:	a802      	add	r0, sp, #8
   d5824:	f000 fc78 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5828:	4621      	mov	r1, r4
   d582a:	a806      	add	r0, sp, #24
   d582c:	f000 fcdd 	bl	d61ea <_ZN6StringC1ERKS_>
        	
        	dataJson = dataJson+ "}";
   d5830:	4631      	mov	r1, r6
   d5832:	a806      	add	r0, sp, #24
   d5834:	f000 fd52 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5838:	4601      	mov	r1, r0
   d583a:	4620      	mov	r0, r4
   d583c:	f000 fcc6 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5840:	a806      	add	r0, sp, #24
   d5842:	f000 fc69 	bl	d6118 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5846:	4621      	mov	r1, r4
   d5848:	a806      	add	r0, sp, #24
   d584a:	f000 fcce 	bl	d61ea <_ZN6StringC1ERKS_>
    	
    	dataJson = dataJson+ "}";
   d584e:	4631      	mov	r1, r6
   d5850:	a806      	add	r0, sp, #24
   d5852:	f000 fd43 	bl	d62dc <_ZplRK15StringSumHelperPKc>
   d5856:	4601      	mov	r1, r0
   d5858:	4620      	mov	r0, r4
   d585a:	f000 fcb7 	bl	d61cc <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d585e:	a806      	add	r0, sp, #24
   d5860:	f000 fc5a 	bl	d6118 <_ZN6StringD1Ev>

    return dataJson;
}
   d5864:	4620      	mov	r0, r4
   d5866:	b00b      	add	sp, #44	; 0x2c
   d5868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d586c:	000d8f97 	.word	0x000d8f97
   d5870:	000d8fba 	.word	0x000d8fba
   d5874:	000d8fb8 	.word	0x000d8fb8
   d5878:	000d8f99 	.word	0x000d8f99
   d587c:	000d8f9f 	.word	0x000d8f9f
   d5880:	000d8fbc 	.word	0x000d8fbc
   d5884:	000d8fc4 	.word	0x000d8fc4
   d5888:	000d8fd1 	.word	0x000d8fd1
   d588c:	000d8fd9 	.word	0x000d8fd9
   d5890:	000d8fe1 	.word	0x000d8fe1
   d5894:	000d8ffe 	.word	0x000d8ffe
   d5898:	000d9000 	.word	0x000d9000
   d589c:	000d9006 	.word	0x000d9006
   d58a0:	000d8fe8 	.word	0x000d8fe8
   d58a4:	000d8ff3 	.word	0x000d8ff3

000d58a8 <_ZN8LightIOT12changeModeIRE6String>:
}

//=============================================================
//========================= CHANGE MODE =========================
//=============================================================
void LightIOT::changeModeIR(String currentMode){
   d58a8:	b538      	push	{r3, r4, r5, lr}
   d58aa:	460d      	mov	r5, r1
   d58ac:	4604      	mov	r4, r0
    if(currentMode.equals("OFF")){
   d58ae:	4913      	ldr	r1, [pc, #76]	; (d58fc <_ZN8LightIOT12changeModeIRE6String+0x54>)
   d58b0:	4628      	mov	r0, r5
   d58b2:	f000 fd25 	bl	d6300 <_ZNK6String6equalsEPKc>
   d58b6:	b108      	cbz	r0, d58bc <_ZN8LightIOT12changeModeIRE6String+0x14>
        sendCommand(1);  //  Send OFF command
   d58b8:	2101      	movs	r1, #1
   d58ba:	e005      	b.n	d58c8 <_ZN8LightIOT12changeModeIRE6String+0x20>
    }else if(currentMode.equals("MODE L")){
   d58bc:	4910      	ldr	r1, [pc, #64]	; (d5900 <_ZN8LightIOT12changeModeIRE6String+0x58>)
   d58be:	4628      	mov	r0, r5
   d58c0:	f000 fd1e 	bl	d6300 <_ZNK6String6equalsEPKc>
   d58c4:	b128      	cbz	r0, d58d2 <_ZN8LightIOT12changeModeIRE6String+0x2a>
        sendCommand(2);  // Send L command
   d58c6:	2102      	movs	r1, #2
   d58c8:	4620      	mov	r0, r4
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d58ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
//=============================================================
void LightIOT::changeModeIR(String currentMode){
    if(currentMode.equals("OFF")){
        sendCommand(1);  //  Send OFF command
    }else if(currentMode.equals("MODE L")){
        sendCommand(2);  // Send L command
   d58ce:	f7ff bd43 	b.w	d5358 <_ZN8LightIOT11sendCommandEh>
    }else if(currentMode.equals("MODE T")){
   d58d2:	490c      	ldr	r1, [pc, #48]	; (d5904 <_ZN8LightIOT12changeModeIRE6String+0x5c>)
   d58d4:	4628      	mov	r0, r5
   d58d6:	f000 fd13 	bl	d6300 <_ZNK6String6equalsEPKc>
   d58da:	b108      	cbz	r0, d58e0 <_ZN8LightIOT12changeModeIRE6String+0x38>
   d58dc:	2103      	movs	r1, #3
   d58de:	e007      	b.n	d58f0 <_ZN8LightIOT12changeModeIRE6String+0x48>
        sendCommand(3);  // Send T command
    }else if(currentMode.equals("MODE U")){
   d58e0:	4909      	ldr	r1, [pc, #36]	; (d5908 <_ZN8LightIOT12changeModeIRE6String+0x60>)
   d58e2:	4628      	mov	r0, r5
   d58e4:	f000 fd0c 	bl	d6300 <_ZNK6String6equalsEPKc>
   d58e8:	b108      	cbz	r0, d58ee <_ZN8LightIOT12changeModeIRE6String+0x46>
   d58ea:	2104      	movs	r1, #4
   d58ec:	e000      	b.n	d58f0 <_ZN8LightIOT12changeModeIRE6String+0x48>
   d58ee:	2105      	movs	r1, #5
   d58f0:	4620      	mov	r0, r4
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d58f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d58f6:	f7ff bd07 	b.w	d5308 <_ZN8LightIOT11sendCommandEh.part.0>
   d58fa:	bf00      	nop
   d58fc:	000d87c1 	.word	0x000d87c1
   d5900:	000d87c5 	.word	0x000d87c5
   d5904:	000d87cc 	.word	0x000d87cc
   d5908:	000d87d3 	.word	0x000d87d3

000d590c <_ZN8LightIOT17resetModeForErrorEff>:
//=============================================================



void LightIOT::resetModeForError(float vPanel, float cPanel){
    if(vPanel>=16.0 && cPanel<150.0){
   d590c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   d5910:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
//========================= FIX ERROR =========================
//=============================================================



void LightIOT::resetModeForError(float vPanel, float cPanel){
   d5918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d591a:	4604      	mov	r4, r0
    if(vPanel>=16.0 && cPanel<150.0){
   d591c:	db09      	blt.n	d5932 <_ZN8LightIOT17resetModeForErrorEff+0x26>
   d591e:	eddf 7a14 	vldr	s15, [pc, #80]	; d5970 <_ZN8LightIOT17resetModeForErrorEff+0x64>
   d5922:	eef4 0ae7 	vcmpe.f32	s1, s15
   d5926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        _error = true;
   d592a:	bf44      	itt	mi
   d592c:	2301      	movmi	r3, #1
   d592e:	f880 3670 	strbmi.w	r3, [r0, #1648]	; 0x670
    }

    if(_error) {
   d5932:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   d5936:	b1cb      	cbz	r3, d596c <_ZN8LightIOT17resetModeForErrorEff+0x60>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5938:	f000 f8ac 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
        unsigned int tActual = millis();
        if(tActual > _last_tError + _intervalOutError) {
   d593c:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
   d5940:	f8d4 366c 	ldr.w	r3, [r4, #1644]	; 0x66c
   d5944:	4413      	add	r3, r2
   d5946:	4283      	cmp	r3, r0
   d5948:	d210      	bcs.n	d596c <_ZN8LightIOT17resetModeForErrorEff+0x60>
            _last_tError = tActual;
   d594a:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
            changeModeIR(_modeDriver);
   d594e:	f504 61cb 	add.w	r1, r4, #1624	; 0x658
   d5952:	4668      	mov	r0, sp
   d5954:	f000 fc49 	bl	d61ea <_ZN6StringC1ERKS_>
   d5958:	4669      	mov	r1, sp
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff ffa4 	bl	d58a8 <_ZN8LightIOT12changeModeIRE6String>
   d5960:	4668      	mov	r0, sp
   d5962:	f000 fbd9 	bl	d6118 <_ZN6StringD1Ev>
            _error = false;
   d5966:	2300      	movs	r3, #0
   d5968:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        }
    }
    
}
   d596c:	b004      	add	sp, #16
   d596e:	bd10      	pop	{r4, pc}
   d5970:	43160000 	.word	0x43160000

000d5974 <_GLOBAL__sub_I_batterySensor>:
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d5974:	b508      	push	{r3, lr}
   d5976:	f000 f825 	bl	d59c4 <HAL_Pin_Map>
})

/**
 * INA219 Sensors INIT.
 */
Adafruit_INA219 batterySensor = Adafruit_INA219(INA219_BATTERY);
   d597a:	2144      	movs	r1, #68	; 0x44
   d597c:	4806      	ldr	r0, [pc, #24]	; (d5998 <_GLOBAL__sub_I_batterySensor+0x24>)
   d597e:	f7ff fb78 	bl	d5072 <_ZN15Adafruit_INA219C1Eh>
Adafruit_INA219 panelSensor = Adafruit_INA219(INA219_PANEL);
   d5982:	2141      	movs	r1, #65	; 0x41
   d5984:	4805      	ldr	r0, [pc, #20]	; (d599c <_GLOBAL__sub_I_batterySensor+0x28>)
   d5986:	f7ff fb74 	bl	d5072 <_ZN15Adafruit_INA219C1Eh>
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);
   d598a:	2140      	movs	r1, #64	; 0x40
   d598c:	4804      	ldr	r0, [pc, #16]	; (d59a0 <_GLOBAL__sub_I_batterySensor+0x2c>)
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d598e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/**
 * INA219 Sensors INIT.
 */
Adafruit_INA219 batterySensor = Adafruit_INA219(INA219_BATTERY);
Adafruit_INA219 panelSensor = Adafruit_INA219(INA219_PANEL);
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);
   d5992:	f7ff bb6e 	b.w	d5072 <_ZN15Adafruit_INA219C1Eh>
   d5996:	bf00      	nop
   d5998:	2003e3a8 	.word	0x2003e3a8
   d599c:	2003e398 	.word	0x2003e398
   d59a0:	2003e3b8 	.word	0x2003e3b8

000d59a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <netdb_freeaddrinfo+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	689b      	ldr	r3, [r3, #8]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030268 	.word	0x00030268

000d59b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <netdb_getaddrinfo+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	68db      	ldr	r3, [r3, #12]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030268 	.word	0x00030268

000d59c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <HAL_Pin_Map+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	681b      	ldr	r3, [r3, #0]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003022c 	.word	0x0003022c

000d59d4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <HAL_Validate_Pin_Function+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	685b      	ldr	r3, [r3, #4]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003022c 	.word	0x0003022c

000d59e4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <HAL_Pin_Mode+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	689b      	ldr	r3, [r3, #8]
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	0003022c 	.word	0x0003022c

000d59f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <HAL_Get_Pin_Mode+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	68db      	ldr	r3, [r3, #12]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	0003022c 	.word	0x0003022c

000d5a04 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <HAL_GPIO_Write+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	691b      	ldr	r3, [r3, #16]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	0003022c 	.word	0x0003022c

000d5a14 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <HAL_GPIO_Read+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	695b      	ldr	r3, [r3, #20]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	0003022c 	.word	0x0003022c

000d5a24 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <HAL_ADC_Read+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	0003022c 	.word	0x0003022c

000d5a34 <HAL_PWM_Write_With_Frequency_Ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, HAL_PWM_Write_With_Frequency_Ext, void(uint16_t, uint32_t, uint32_t))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <HAL_PWM_Write_With_Frequency_Ext+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	0003022c 	.word	0x0003022c

000d5a44 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <HAL_SPI_Init+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	69db      	ldr	r3, [r3, #28]
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030230 	.word	0x00030230

000d5a54 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <HAL_SPI_Is_Enabled+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6a1b      	ldr	r3, [r3, #32]
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030230 	.word	0x00030230

000d5a64 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <if_index_to_name+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	695b      	ldr	r3, [r3, #20]
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	0003026c 	.word	0x0003026c

000d5a74 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <HAL_RNG_GetRandomNumber+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	685b      	ldr	r3, [r3, #4]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030218 	.word	0x00030218

000d5a84 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <HAL_Delay_Microseconds+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	68db      	ldr	r3, [r3, #12]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030218 	.word	0x00030218

000d5a94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	695b      	ldr	r3, [r3, #20]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030218 	.word	0x00030218

000d5aa4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <os_thread_is_current+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	689b      	ldr	r3, [r3, #8]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030248 	.word	0x00030248

000d5ab4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <os_thread_join+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	691b      	ldr	r3, [r3, #16]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030248 	.word	0x00030248

000d5ac4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <os_thread_cleanup+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	695b      	ldr	r3, [r3, #20]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030248 	.word	0x00030248

000d5ad4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <os_mutex_create+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030248 	.word	0x00030248

000d5ae4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <os_mutex_recursive_create+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030248 	.word	0x00030248

000d5af4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <inet_inet_ntop+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	695b      	ldr	r3, [r3, #20]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030264 	.word	0x00030264

000d5b04 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <inet_htonl+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	6a1b      	ldr	r3, [r3, #32]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030264 	.word	0x00030264

000d5b14 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <inet_htons+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030264 	.word	0x00030264

000d5b24 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <HAL_USART_Init+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	681b      	ldr	r3, [r3, #0]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	0003023c 	.word	0x0003023c

000d5b34 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <HAL_USART_Write_Data+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	68db      	ldr	r3, [r3, #12]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	0003023c 	.word	0x0003023c

000d5b44 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_USART_Available_Data+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	691b      	ldr	r3, [r3, #16]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003023c 	.word	0x0003023c

000d5b54 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <HAL_USART_Read_Data+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	695b      	ldr	r3, [r3, #20]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003023c 	.word	0x0003023c

000d5b64 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <HAL_USART_Peek_Data+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	699b      	ldr	r3, [r3, #24]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003023c 	.word	0x0003023c

000d5b74 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_USART_Flush_Data+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	69db      	ldr	r3, [r3, #28]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003023c 	.word	0x0003023c

000d5b84 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <HAL_USART_Is_Enabled+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	6a1b      	ldr	r3, [r3, #32]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003023c 	.word	0x0003023c

000d5b94 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <HAL_USART_Available_Data_For_Write+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	0003023c 	.word	0x0003023c

000d5ba4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <HAL_I2C_Begin+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	68db      	ldr	r3, [r3, #12]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	00030228 	.word	0x00030228

000d5bb4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <HAL_I2C_Request_Data+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	695b      	ldr	r3, [r3, #20]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	00030228 	.word	0x00030228

000d5bc4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_I2C_Begin_Transmission+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	699b      	ldr	r3, [r3, #24]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030228 	.word	0x00030228

000d5bd4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_I2C_End_Transmission+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	69db      	ldr	r3, [r3, #28]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030228 	.word	0x00030228

000d5be4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_I2C_Write_Data+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6a1b      	ldr	r3, [r3, #32]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030228 	.word	0x00030228

000d5bf4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <HAL_I2C_Available_Data+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030228 	.word	0x00030228

000d5c04 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <HAL_I2C_Read_Data+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030228 	.word	0x00030228

000d5c14 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_I2C_Peek_Data+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030228 	.word	0x00030228

000d5c24 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_I2C_Flush_Data+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030228 	.word	0x00030228

000d5c34 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_I2C_Is_Enabled+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030228 	.word	0x00030228

000d5c44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_I2C_Init+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030228 	.word	0x00030228

000d5c54 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <sock_setsockopt+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	699b      	ldr	r3, [r3, #24]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030238 	.word	0x00030238

000d5c64 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <sock_close+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	69db      	ldr	r3, [r3, #28]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030238 	.word	0x00030238

000d5c74 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <sock_connect+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	6a1b      	ldr	r3, [r3, #32]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030238 	.word	0x00030238

000d5c84 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <sock_recv+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030238 	.word	0x00030238

000d5c94 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <sock_send+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030238 	.word	0x00030238

000d5ca4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <sock_socket+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030238 	.word	0x00030238

000d5cb4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <HAL_USB_USART_Init+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	681b      	ldr	r3, [r3, #0]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	0003024c 	.word	0x0003024c

000d5cc4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <HAL_USB_USART_Begin+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	685b      	ldr	r3, [r3, #4]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	0003024c 	.word	0x0003024c

000d5cd4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <HAL_USB_USART_Available_Data+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	691b      	ldr	r3, [r3, #16]
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	0003024c 	.word	0x0003024c

000d5ce4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	695b      	ldr	r3, [r3, #20]
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	0003024c 	.word	0x0003024c

000d5cf4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_USB_USART_Receive_Data+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	699b      	ldr	r3, [r3, #24]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	0003024c 	.word	0x0003024c

000d5d04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <HAL_USB_USART_Send_Data+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	69db      	ldr	r3, [r3, #28]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	0003024c 	.word	0x0003024c

000d5d14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <HAL_USB_USART_Flush_Data+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	6a1b      	ldr	r3, [r3, #32]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	0003024c 	.word	0x0003024c

000d5d24 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <wlan_connected_info+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030274 	.word	0x00030274

000d5d34 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <log_message+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030260 	.word	0x00030260

000d5d44 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <set_system_mode+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	685b      	ldr	r3, [r3, #4]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030220 	.word	0x00030220

000d5d54 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <system_delay_ms+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	695b      	ldr	r3, [r3, #20]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030220 	.word	0x00030220

000d5d64 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <system_thread_set_state+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030220 	.word	0x00030220

000d5d74 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b03      	ldr	r3, [pc, #12]	; (d5d84 <system_ctrl_set_app_request_handler+0x10>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d7e:	9301      	str	r3, [sp, #4]
   d5d80:	bd08      	pop	{r3, pc}
   d5d82:	0000      	.short	0x0000
   d5d84:	00030220 	.word	0x00030220

000d5d88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b03      	ldr	r3, [pc, #12]	; (d5d98 <system_ctrl_set_result+0x10>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d92:	9301      	str	r3, [sp, #4]
   d5d94:	bd08      	pop	{r3, pc}
   d5d96:	0000      	.short	0x0000
   d5d98:	00030220 	.word	0x00030220

000d5d9c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <network_config+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	681b      	ldr	r3, [r3, #0]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030240 	.word	0x00030240

000d5dac <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <network_connect+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	685b      	ldr	r3, [r3, #4]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030240 	.word	0x00030240

000d5dbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <network_connecting+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	689b      	ldr	r3, [r3, #8]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030240 	.word	0x00030240

000d5dcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <network_disconnect+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	68db      	ldr	r3, [r3, #12]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030240 	.word	0x00030240

000d5ddc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <network_ready+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	691b      	ldr	r3, [r3, #16]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	00030240 	.word	0x00030240

000d5dec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <network_on+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	695b      	ldr	r3, [r3, #20]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	00030240 	.word	0x00030240

000d5dfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <network_off+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	699b      	ldr	r3, [r3, #24]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	00030240 	.word	0x00030240

000d5e0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <network_listen+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	69db      	ldr	r3, [r3, #28]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	00030240 	.word	0x00030240

000d5e1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <network_listening+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	6a1b      	ldr	r3, [r3, #32]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	00030240 	.word	0x00030240

000d5e2c <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <network_set_credentials+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030240 	.word	0x00030240

000d5e3c <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <network_clear_credentials+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030240 	.word	0x00030240

000d5e4c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <network_set_listen_timeout+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030240 	.word	0x00030240

000d5e5c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <network_get_listen_timeout+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030240 	.word	0x00030240

000d5e6c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <spark_process+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	689b      	ldr	r3, [r3, #8]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030244 	.word	0x00030244

000d5e7c <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <spark_deviceID+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	69db      	ldr	r3, [r3, #28]
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030244 	.word	0x00030244

000d5e8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030244 	.word	0x00030244

000d5e9c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <malloc+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	681b      	ldr	r3, [r3, #0]
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	0003021c 	.word	0x0003021c

000d5eac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <free+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	685b      	ldr	r3, [r3, #4]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	0003021c 	.word	0x0003021c

000d5ebc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <realloc+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	689b      	ldr	r3, [r3, #8]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	0003021c 	.word	0x0003021c

000d5ecc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <__errno+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	0003021c 	.word	0x0003021c

000d5edc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5edc:	2200      	movs	r2, #0
   d5ede:	4611      	mov	r1, r2
   d5ee0:	6840      	ldr	r0, [r0, #4]
   d5ee2:	f7ff bf9b 	b.w	d5e1c <network_listening>

000d5ee6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ee6:	2200      	movs	r2, #0
   d5ee8:	4611      	mov	r1, r2
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f7ff bfb6 	b.w	d5e5c <network_get_listen_timeout>

000d5ef0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ef0:	2200      	movs	r2, #0
   d5ef2:	6840      	ldr	r0, [r0, #4]
   d5ef4:	f7ff bfaa 	b.w	d5e4c <network_set_listen_timeout>

000d5ef8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ef8:	2200      	movs	r2, #0
   d5efa:	f081 0101 	eor.w	r1, r1, #1
   d5efe:	6840      	ldr	r0, [r0, #4]
   d5f00:	f7ff bf84 	b.w	d5e0c <network_listen>

000d5f04 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5f04:	2300      	movs	r3, #0
   d5f06:	461a      	mov	r2, r3
   d5f08:	4619      	mov	r1, r3
   d5f0a:	6840      	ldr	r0, [r0, #4]
   d5f0c:	f7ff bf76 	b.w	d5dfc <network_off>

000d5f10 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f10:	2300      	movs	r3, #0
   d5f12:	461a      	mov	r2, r3
   d5f14:	4619      	mov	r1, r3
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7ff bf68 	b.w	d5dec <network_on>

000d5f1c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	4611      	mov	r1, r2
   d5f20:	6840      	ldr	r0, [r0, #4]
   d5f22:	f7ff bf5b 	b.w	d5ddc <network_ready>

000d5f26 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f26:	2200      	movs	r2, #0
   d5f28:	4611      	mov	r1, r2
   d5f2a:	6840      	ldr	r0, [r0, #4]
   d5f2c:	f7ff bf46 	b.w	d5dbc <network_connecting>

000d5f30 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f30:	2200      	movs	r2, #0
   d5f32:	2102      	movs	r1, #2
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	f7ff bf49 	b.w	d5dcc <network_disconnect>

000d5f3a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f3a:	2300      	movs	r3, #0
   d5f3c:	461a      	mov	r2, r3
   d5f3e:	6840      	ldr	r0, [r0, #4]
   d5f40:	f7ff bf34 	b.w	d5dac <network_connect>

000d5f44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f44:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f46:	2203      	movs	r2, #3
   d5f48:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f4a:	4a02      	ldr	r2, [pc, #8]	; (d5f54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f4c:	601a      	str	r2, [r3, #0]
   d5f4e:	4770      	bx	lr
   d5f50:	2003e3c8 	.word	0x2003e3c8
   d5f54:	000d901c 	.word	0x000d901c

000d5f58 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5f58:	4770      	bx	lr

000d5f5a <_ZN8SPIClassD0Ev>:
   d5f5a:	b510      	push	{r4, lr}
   d5f5c:	2110      	movs	r1, #16
   d5f5e:	4604      	mov	r4, r0
   d5f60:	f001 fbc3 	bl	d76ea <_ZdlPvj>
   d5f64:	4620      	mov	r0, r4
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f68:	b570      	push	{r4, r5, r6, lr}
   d5f6a:	4b08      	ldr	r3, [pc, #32]	; (d5f8c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5f6c:	6003      	str	r3, [r0, #0]
   d5f6e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5f70:	2500      	movs	r5, #0
   d5f72:	460e      	mov	r6, r1
   d5f74:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5f78:	f7ff fdac 	bl	d5ad4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5f7c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5f7e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5f80:	f7ff fd60 	bl	d5a44 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5f84:	60a5      	str	r5, [r4, #8]
}
   d5f86:	4620      	mov	r0, r4
   d5f88:	bd70      	pop	{r4, r5, r6, pc}
   d5f8a:	bf00      	nop
   d5f8c:	000d9050 	.word	0x000d9050

000d5f90 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5f90:	7900      	ldrb	r0, [r0, #4]
   d5f92:	f7ff bd5f 	b.w	d5a54 <HAL_SPI_Is_Enabled>
	...

000d5f98 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5f98:	4b04      	ldr	r3, [pc, #16]	; (d5fac <_GLOBAL__sub_I_System+0x14>)
   d5f9a:	2000      	movs	r0, #0
   d5f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5fa0:	7018      	strb	r0, [r3, #0]
   d5fa2:	8058      	strh	r0, [r3, #2]
   d5fa4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5fa6:	f7ff becd 	b.w	d5d44 <set_system_mode>
   d5faa:	bf00      	nop
   d5fac:	2003e3d0 	.word	0x2003e3d0

000d5fb0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5fb0:	b510      	push	{r4, lr}
   d5fb2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5fb4:	f002 fbf0 	bl	d8798 <strlen>
   d5fb8:	3801      	subs	r0, #1
   d5fba:	1823      	adds	r3, r4, r0
   d5fbc:	4620      	mov	r0, r4
	while(i<j){
   d5fbe:	4298      	cmp	r0, r3
   d5fc0:	d206      	bcs.n	d5fd0 <_Z11str_reversePc+0x20>
		c = *i;
   d5fc2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5fc4:	7819      	ldrb	r1, [r3, #0]
   d5fc6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5fca:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5fce:	e7f6      	b.n	d5fbe <_Z11str_reversePc+0xe>
   d5fd0:	bd10      	pop	{r4, pc}

000d5fd2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fd2:	b570      	push	{r4, r5, r6, lr}
   d5fd4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5fd6:	1e91      	subs	r1, r2, #2
   d5fd8:	2922      	cmp	r1, #34	; 0x22
   d5fda:	d820      	bhi.n	d601e <ultoa+0x4c>
   d5fdc:	4625      	mov	r5, r4
   d5fde:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5fe0:	b910      	cbnz	r0, d5fe8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5fe2:	4423      	add	r3, r4
            *ptr++ = '0';
   d5fe4:	2230      	movs	r2, #48	; 0x30
   d5fe6:	e00e      	b.n	d6006 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5fe8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5fec:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5ff0:	b2c1      	uxtb	r1, r0
   d5ff2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5ff6:	2809      	cmp	r0, #9
                *ptr += '0';
   d5ff8:	bf94      	ite	ls
   d5ffa:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5ffc:	3157      	addhi	r1, #87	; 0x57
   d5ffe:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6002:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6004:	e7eb      	b.n	d5fde <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6006:	4299      	cmp	r1, r3
   d6008:	d202      	bcs.n	d6010 <ultoa+0x3e>
            *ptr++ = '0';
   d600a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d600e:	e7fa      	b.n	d6006 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6010:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6012:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6014:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6016:	f7ff ffcb 	bl	d5fb0 <_Z11str_reversePc>
	return buffer;
   d601a:	4620      	mov	r0, r4
   d601c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d601e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6020:	bd70      	pop	{r4, r5, r6, pc}

000d6022 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6022:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6024:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6026:	460c      	mov	r4, r1
   d6028:	4615      	mov	r5, r2
	if(a<0){
   d602a:	da0b      	bge.n	d6044 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d602c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6030:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6034:	bf14      	ite	ne
   d6036:	4258      	negne	r0, r3
   d6038:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d603a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d603c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d603e:	462a      	mov	r2, r5
   d6040:	4419      	add	r1, r3
   d6042:	e000      	b.n	d6046 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d6044:	2301      	movs	r3, #1
   d6046:	f7ff ffc4 	bl	d5fd2 <ultoa>
	}
	return buffer;
}
   d604a:	4620      	mov	r0, r4
   d604c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6050 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6050:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6054:	ec59 8b10 	vmov	r8, r9, d0
   d6058:	4607      	mov	r7, r0
   d605a:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d605c:	2200      	movs	r2, #0
   d605e:	2300      	movs	r3, #0
   d6060:	ee10 0a10 	vmov	r0, s0
   d6064:	4649      	mov	r1, r9
   d6066:	f002 f8b5 	bl	d81d4 <__aeabi_dcmplt>
   d606a:	b128      	cbz	r0, d6078 <_Z4dtoadhPc+0x28>
        val = -val;
   d606c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6070:	4699      	mov	r9, r3
        *sout++ = '-';
   d6072:	232d      	movs	r3, #45	; 0x2d
   d6074:	7033      	strb	r3, [r6, #0]
   d6076:	3601      	adds	r6, #1
   d6078:	2300      	movs	r3, #0
    }
    long scale = 1;
   d607a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d607c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d607e:	b2d9      	uxtb	r1, r3
   d6080:	428f      	cmp	r7, r1
   d6082:	d902      	bls.n	d608a <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d6084:	4354      	muls	r4, r2
   d6086:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6088:	e7f9      	b.n	d607e <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d608a:	4620      	mov	r0, r4
   d608c:	f001 fdca 	bl	d7c24 <__aeabi_i2d>
   d6090:	4642      	mov	r2, r8
   d6092:	464b      	mov	r3, r9
   d6094:	f001 fe2c 	bl	d7cf0 <__aeabi_dmul>
   d6098:	4682      	mov	sl, r0
   d609a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d609c:	f002 f988 	bl	d83b0 <__aeabi_d2ulz>
   d60a0:	4680      	mov	r8, r0
   d60a2:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d60a4:	f001 fdee 	bl	d7c84 <__aeabi_ul2d>
   d60a8:	4602      	mov	r2, r0
   d60aa:	460b      	mov	r3, r1
   d60ac:	4650      	mov	r0, sl
   d60ae:	4659      	mov	r1, fp
   d60b0:	f001 fc6a 	bl	d7988 <__aeabi_dsub>
   d60b4:	2200      	movs	r2, #0
   d60b6:	4b17      	ldr	r3, [pc, #92]	; (d6114 <_Z4dtoadhPc+0xc4>)
   d60b8:	f002 f8a0 	bl	d81fc <__aeabi_dcmpge>
   d60bc:	b118      	cbz	r0, d60c6 <_Z4dtoadhPc+0x76>
        fixed++;
   d60be:	f118 0801 	adds.w	r8, r8, #1
   d60c2:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d60c6:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d60c8:	4622      	mov	r2, r4
   d60ca:	462b      	mov	r3, r5
   d60cc:	4640      	mov	r0, r8
   d60ce:	4649      	mov	r1, r9
   d60d0:	f002 f956 	bl	d8380 <__aeabi_uldivmod>
   d60d4:	2301      	movs	r3, #1
   d60d6:	220a      	movs	r2, #10
   d60d8:	4631      	mov	r1, r6
   d60da:	f7ff ff7a 	bl	d5fd2 <ultoa>
    if (prec) {
   d60de:	b1af      	cbz	r7, d610c <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d60e0:	4630      	mov	r0, r6
   d60e2:	f002 fb59 	bl	d8798 <strlen>
        *sout++ = '.';
   d60e6:	232e      	movs	r3, #46	; 0x2e
   d60e8:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d60ea:	3001      	adds	r0, #1
   d60ec:	4406      	add	r6, r0
   d60ee:	4622      	mov	r2, r4
   d60f0:	462b      	mov	r3, r5
   d60f2:	4640      	mov	r0, r8
   d60f4:	4649      	mov	r1, r9
   d60f6:	f002 f943 	bl	d8380 <__aeabi_uldivmod>
   d60fa:	463b      	mov	r3, r7
   d60fc:	4610      	mov	r0, r2
   d60fe:	4631      	mov	r1, r6
   d6100:	220a      	movs	r2, #10
    }
}
   d6102:	b001      	add	sp, #4
   d6104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d6108:	f7ff bf63 	b.w	d5fd2 <ultoa>
    }
}
   d610c:	b001      	add	sp, #4
   d610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6112:	bf00      	nop
   d6114:	3fe00000 	.word	0x3fe00000

000d6118 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6118:	b510      	push	{r4, lr}
   d611a:	4604      	mov	r4, r0
{
	free(buffer);
   d611c:	6800      	ldr	r0, [r0, #0]
   d611e:	f7ff fec5 	bl	d5eac <free>
}
   d6122:	4620      	mov	r0, r4
   d6124:	bd10      	pop	{r4, pc}

000d6126 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6126:	b510      	push	{r4, lr}
   d6128:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d612a:	6800      	ldr	r0, [r0, #0]
   d612c:	b108      	cbz	r0, d6132 <_ZN6String10invalidateEv+0xc>
   d612e:	f7ff febd 	bl	d5eac <free>
	buffer = NULL;
   d6132:	2300      	movs	r3, #0
   d6134:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6136:	60a3      	str	r3, [r4, #8]
   d6138:	6063      	str	r3, [r4, #4]
   d613a:	bd10      	pop	{r4, pc}

000d613c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d613c:	b538      	push	{r3, r4, r5, lr}
   d613e:	4604      	mov	r4, r0
   d6140:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6142:	6800      	ldr	r0, [r0, #0]
   d6144:	3101      	adds	r1, #1
   d6146:	f7ff feb9 	bl	d5ebc <realloc>
	if (newbuffer) {
   d614a:	b110      	cbz	r0, d6152 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d614c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6150:	2001      	movs	r0, #1
	}
	return 0;
}
   d6152:	bd38      	pop	{r3, r4, r5, pc}

000d6154 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6154:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6156:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6158:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d615a:	b113      	cbz	r3, d6162 <_ZN6String7reserveEj+0xe>
   d615c:	6843      	ldr	r3, [r0, #4]
   d615e:	428b      	cmp	r3, r1
   d6160:	d207      	bcs.n	d6172 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6162:	4620      	mov	r0, r4
   d6164:	f7ff ffea 	bl	d613c <_ZN6String12changeBufferEj>
   d6168:	b120      	cbz	r0, d6174 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d616a:	68a3      	ldr	r3, [r4, #8]
   d616c:	b90b      	cbnz	r3, d6172 <_ZN6String7reserveEj+0x1e>
   d616e:	6822      	ldr	r2, [r4, #0]
   d6170:	7013      	strb	r3, [r2, #0]
   d6172:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6174:	bd10      	pop	{r4, pc}

000d6176 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6176:	b570      	push	{r4, r5, r6, lr}
   d6178:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d617a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d617c:	4604      	mov	r4, r0
   d617e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6180:	f7ff ffe8 	bl	d6154 <_ZN6String7reserveEj>
   d6184:	b918      	cbnz	r0, d618e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6186:	4620      	mov	r0, r4
   d6188:	f7ff ffcd 	bl	d6126 <_ZN6String10invalidateEv>
		return *this;
   d618c:	e009      	b.n	d61a2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d618e:	462a      	mov	r2, r5
   d6190:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6192:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6194:	6820      	ldr	r0, [r4, #0]
   d6196:	f002 fab1 	bl	d86fc <memcpy>
	buffer[len] = 0;
   d619a:	6822      	ldr	r2, [r4, #0]
   d619c:	68a3      	ldr	r3, [r4, #8]
   d619e:	2100      	movs	r1, #0
   d61a0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d61a2:	4620      	mov	r0, r4
   d61a4:	bd70      	pop	{r4, r5, r6, pc}

000d61a6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d61a6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61a8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d61aa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61ac:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61ae:	6043      	str	r3, [r0, #4]
	len = 0;
   d61b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61b2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d61b4:	460d      	mov	r5, r1
   d61b6:	b139      	cbz	r1, d61c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d61b8:	4608      	mov	r0, r1
   d61ba:	f002 faed 	bl	d8798 <strlen>
   d61be:	4629      	mov	r1, r5
   d61c0:	4602      	mov	r2, r0
   d61c2:	4620      	mov	r0, r4
   d61c4:	f7ff ffd7 	bl	d6176 <_ZN6String4copyEPKcj>
}
   d61c8:	4620      	mov	r0, r4
   d61ca:	bd38      	pop	{r3, r4, r5, pc}

000d61cc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61cc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d61ce:	b510      	push	{r4, lr}
   d61d0:	460b      	mov	r3, r1
   d61d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61d4:	d007      	beq.n	d61e6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61d6:	6809      	ldr	r1, [r1, #0]
   d61d8:	b119      	cbz	r1, d61e2 <_ZN6StringaSERKS_+0x16>
   d61da:	689a      	ldr	r2, [r3, #8]
   d61dc:	f7ff ffcb 	bl	d6176 <_ZN6String4copyEPKcj>
   d61e0:	e001      	b.n	d61e6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d61e2:	f7ff ffa0 	bl	d6126 <_ZN6String10invalidateEv>

	return *this;
}
   d61e6:	4620      	mov	r0, r4
   d61e8:	bd10      	pop	{r4, pc}

000d61ea <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61ea:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61ec:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61ee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61f2:	6043      	str	r3, [r0, #4]
	len = 0;
   d61f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61f6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d61f8:	f7ff ffe8 	bl	d61cc <_ZN6StringaSERKS_>
}
   d61fc:	4620      	mov	r0, r4
   d61fe:	bd10      	pop	{r4, pc}

000d6200 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6200:	b538      	push	{r3, r4, r5, lr}
   d6202:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6204:	460c      	mov	r4, r1
   d6206:	b141      	cbz	r1, d621a <_ZN6StringaSEPKc+0x1a>
   d6208:	4608      	mov	r0, r1
   d620a:	f002 fac5 	bl	d8798 <strlen>
   d620e:	4621      	mov	r1, r4
   d6210:	4602      	mov	r2, r0
   d6212:	4628      	mov	r0, r5
   d6214:	f7ff ffaf 	bl	d6176 <_ZN6String4copyEPKcj>
   d6218:	e001      	b.n	d621e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d621a:	f7ff ff84 	bl	d6126 <_ZN6String10invalidateEv>

	return *this;
}
   d621e:	4628      	mov	r0, r5
   d6220:	bd38      	pop	{r3, r4, r5, pc}

000d6222 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6222:	b510      	push	{r4, lr}
   d6224:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6226:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6228:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d622a:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d622c:	6063      	str	r3, [r4, #4]
	len = 0;
   d622e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6230:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6232:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d6234:	a901      	add	r1, sp, #4
   d6236:	f7ff fef4 	bl	d6022 <itoa>
	*this = buf;
   d623a:	a901      	add	r1, sp, #4
   d623c:	4620      	mov	r0, r4
   d623e:	f7ff ffdf 	bl	d6200 <_ZN6StringaSEPKc>
}
   d6242:	4620      	mov	r0, r4
   d6244:	b00a      	add	sp, #40	; 0x28
   d6246:	bd10      	pop	{r4, pc}

000d6248 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6248:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d624a:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d624c:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d624e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6250:	6043      	str	r3, [r0, #4]
	len = 0;
   d6252:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6254:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6256:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6258:	ee10 0a10 	vmov	r0, s0
   d625c:	b2cd      	uxtb	r5, r1
   d625e:	f001 fcf3 	bl	d7c48 <__aeabi_f2d>
   d6262:	ec41 0b10 	vmov	d0, r0, r1
   d6266:	a901      	add	r1, sp, #4
   d6268:	4628      	mov	r0, r5
   d626a:	f7ff fef1 	bl	d6050 <_Z4dtoadhPc>
        *this = buf;
   d626e:	a901      	add	r1, sp, #4
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff ffc5 	bl	d6200 <_ZN6StringaSEPKc>
}
   d6276:	4620      	mov	r0, r4
   d6278:	b00b      	add	sp, #44	; 0x2c
   d627a:	bd30      	pop	{r4, r5, pc}

000d627c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d627c:	b570      	push	{r4, r5, r6, lr}
   d627e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6280:	460e      	mov	r6, r1
   d6282:	b909      	cbnz	r1, d6288 <_ZN6String6concatEPKcj+0xc>
   d6284:	2000      	movs	r0, #0
   d6286:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6288:	b16a      	cbz	r2, d62a6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d628a:	6883      	ldr	r3, [r0, #8]
   d628c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d628e:	4629      	mov	r1, r5
   d6290:	f7ff ff60 	bl	d6154 <_ZN6String7reserveEj>
   d6294:	2800      	cmp	r0, #0
   d6296:	d0f5      	beq.n	d6284 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6298:	6820      	ldr	r0, [r4, #0]
   d629a:	68a3      	ldr	r3, [r4, #8]
   d629c:	4631      	mov	r1, r6
   d629e:	4418      	add	r0, r3
   d62a0:	f002 fa72 	bl	d8788 <strcpy>
	len = newlen;
   d62a4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d62a6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d62a8:	bd70      	pop	{r4, r5, r6, pc}

000d62aa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d62aa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d62ac:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d62ae:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d62b2:	2201      	movs	r2, #1
   d62b4:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d62b6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d62ba:	f7ff ffdf 	bl	d627c <_ZN6String6concatEPKcj>
}
   d62be:	b003      	add	sp, #12
   d62c0:	f85d fb04 	ldr.w	pc, [sp], #4

000d62c4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62c4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62c6:	688a      	ldr	r2, [r1, #8]
   d62c8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62ca:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62cc:	f7ff ffd6 	bl	d627c <_ZN6String6concatEPKcj>
   d62d0:	b910      	cbnz	r0, d62d8 <_ZplRK15StringSumHelperRK6String+0x14>
   d62d2:	4620      	mov	r0, r4
   d62d4:	f7ff ff27 	bl	d6126 <_ZN6String10invalidateEv>
	return a;
}
   d62d8:	4620      	mov	r0, r4
   d62da:	bd10      	pop	{r4, pc}

000d62dc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d62dc:	b538      	push	{r3, r4, r5, lr}
   d62de:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d62e0:	460d      	mov	r5, r1
   d62e2:	b141      	cbz	r1, d62f6 <_ZplRK15StringSumHelperPKc+0x1a>
   d62e4:	4608      	mov	r0, r1
   d62e6:	f002 fa57 	bl	d8798 <strlen>
   d62ea:	4629      	mov	r1, r5
   d62ec:	4602      	mov	r2, r0
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ffc4 	bl	d627c <_ZN6String6concatEPKcj>
   d62f4:	b910      	cbnz	r0, d62fc <_ZplRK15StringSumHelperPKc+0x20>
   d62f6:	4620      	mov	r0, r4
   d62f8:	f7ff ff15 	bl	d6126 <_ZN6String10invalidateEv>
	return a;
}
   d62fc:	4620      	mov	r0, r4
   d62fe:	bd38      	pop	{r3, r4, r5, pc}

000d6300 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6300:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6302:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6304:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6306:	b912      	cbnz	r2, d630e <_ZNK6String6equalsEPKc+0xe>
   d6308:	b919      	cbnz	r1, d6312 <_ZNK6String6equalsEPKc+0x12>
   d630a:	2001      	movs	r0, #1
   d630c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d630e:	b911      	cbnz	r1, d6316 <_ZNK6String6equalsEPKc+0x16>
   d6310:	6803      	ldr	r3, [r0, #0]
   d6312:	7818      	ldrb	r0, [r3, #0]
   d6314:	e002      	b.n	d631c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6316:	6800      	ldr	r0, [r0, #0]
   d6318:	f002 fa2c 	bl	d8774 <strcmp>
   d631c:	fab0 f080 	clz	r0, r0
   d6320:	0940      	lsrs	r0, r0, #5
}
   d6322:	bd08      	pop	{r3, pc}

000d6324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6324:	4802      	ldr	r0, [pc, #8]	; (d6330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6326:	2300      	movs	r3, #0
   d6328:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d632a:	f7ff bbdb 	b.w	d5ae4 <os_mutex_recursive_create>
   d632e:	bf00      	nop
   d6330:	2003e3d8 	.word	0x2003e3d8

000d6334 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6336:	4606      	mov	r6, r0
   d6338:	460d      	mov	r5, r1
   d633a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d633c:	2400      	movs	r4, #0
  while (size--) {
   d633e:	42bd      	cmp	r5, r7
   d6340:	d00c      	beq.n	d635c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6342:	6833      	ldr	r3, [r6, #0]
   d6344:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6348:	689b      	ldr	r3, [r3, #8]
   d634a:	4630      	mov	r0, r6
   d634c:	4798      	blx	r3
     if (chunk>=0)
   d634e:	2800      	cmp	r0, #0
   d6350:	db01      	blt.n	d6356 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6352:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6354:	e7f3      	b.n	d633e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6356:	2c00      	cmp	r4, #0
   d6358:	bf08      	it	eq
   d635a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d635c:	4620      	mov	r0, r4
   d635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6360 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6360:	b570      	push	{r4, r5, r6, lr}
   d6362:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6364:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6366:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6368:	b149      	cbz	r1, d637e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d636a:	f002 fa15 	bl	d8798 <strlen>
   d636e:	682b      	ldr	r3, [r5, #0]
   d6370:	4602      	mov	r2, r0
   d6372:	4621      	mov	r1, r4
   d6374:	4628      	mov	r0, r5
   d6376:	68db      	ldr	r3, [r3, #12]
    }
   d6378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d637c:	4718      	bx	r3
    }
   d637e:	bd70      	pop	{r4, r5, r6, pc}

000d6380 <_ZN5Print5printEPKc>:
   d6380:	b508      	push	{r3, lr}
   d6382:	f7ff ffed 	bl	d6360 <_ZN5Print5writeEPKc>
   d6386:	bd08      	pop	{r3, pc}

000d6388 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6388:	6803      	ldr	r3, [r0, #0]
   d638a:	689b      	ldr	r3, [r3, #8]
   d638c:	4718      	bx	r3

000d638e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d638e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6390:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6392:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6394:	f7ff fff8 	bl	d6388 <_ZN5Print5printEc>
  n += print('\n');
   d6398:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d639a:	4604      	mov	r4, r0
  n += print('\n');
   d639c:	4628      	mov	r0, r5
   d639e:	f7ff fff3 	bl	d6388 <_ZN5Print5printEc>
  return n;
}
   d63a2:	4420      	add	r0, r4
   d63a4:	bd38      	pop	{r3, r4, r5, pc}

000d63a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d63a6:	b538      	push	{r3, r4, r5, lr}
   d63a8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d63aa:	f7ff ffd9 	bl	d6360 <_ZN5Print5writeEPKc>
   d63ae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d63b0:	4628      	mov	r0, r5
   d63b2:	f7ff ffec 	bl	d638e <_ZN5Print7printlnEv>
  return n;
}
   d63b6:	4420      	add	r0, r4
   d63b8:	bd38      	pop	{r3, r4, r5, pc}

000d63ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d63ba:	b530      	push	{r4, r5, lr}
   d63bc:	b08b      	sub	sp, #44	; 0x2c
   d63be:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d63c0:	2100      	movs	r1, #0
   d63c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d63c6:	2a01      	cmp	r2, #1
   d63c8:	bf98      	it	ls
   d63ca:	220a      	movls	r2, #10
   d63cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d63d0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d63d4:	fb05 3312 	mls	r3, r5, r2, r3
   d63d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d63dc:	2b09      	cmp	r3, #9
   d63de:	bf94      	ite	ls
   d63e0:	3330      	addls	r3, #48	; 0x30
   d63e2:	3337      	addhi	r3, #55	; 0x37
   d63e4:	b2db      	uxtb	r3, r3
   d63e6:	4621      	mov	r1, r4
   d63e8:	f804 3901 	strb.w	r3, [r4], #-1
   d63ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d63ee:	2d00      	cmp	r5, #0
   d63f0:	d1ee      	bne.n	d63d0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d63f2:	f7ff ffb5 	bl	d6360 <_ZN5Print5writeEPKc>
}
   d63f6:	b00b      	add	sp, #44	; 0x2c
   d63f8:	bd30      	pop	{r4, r5, pc}

000d63fa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d63fa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d63fc:	b92a      	cbnz	r2, d640a <_ZN5Print5printEmi+0x10>
   d63fe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6400:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6404:	689b      	ldr	r3, [r3, #8]
   d6406:	b2c9      	uxtb	r1, r1
   d6408:	4718      	bx	r3
  else return printNumber(n, base);
   d640a:	b2d2      	uxtb	r2, r2
}
   d640c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6410:	f7ff bfd3 	b.w	d63ba <_ZN5Print11printNumberEmh>

000d6414 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6414:	f7ff bff1 	b.w	d63fa <_ZN5Print5printEmi>

000d6418 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d641c:	4607      	mov	r7, r0
   d641e:	460e      	mov	r6, r1
  if (base == 0) {
   d6420:	4615      	mov	r5, r2
   d6422:	b92a      	cbnz	r2, d6430 <_ZN5Print5printEli+0x18>
    return write(n);
   d6424:	6803      	ldr	r3, [r0, #0]
   d6426:	b2c9      	uxtb	r1, r1
   d6428:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d642a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d642e:	4718      	bx	r3
  } else if (base == 10) {
   d6430:	2a0a      	cmp	r2, #10
   d6432:	d102      	bne.n	d643a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6434:	2900      	cmp	r1, #0
   d6436:	da01      	bge.n	d643c <_ZN5Print5printEli+0x24>
   d6438:	e004      	b.n	d6444 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d643a:	b2d2      	uxtb	r2, r2
  }
}
   d643c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6440:	f7ff bfbb 	b.w	d63ba <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6444:	212d      	movs	r1, #45	; 0x2d
   d6446:	f7ff ff9f 	bl	d6388 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d644a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d644c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d644e:	4271      	negs	r1, r6
   d6450:	4638      	mov	r0, r7
   d6452:	f7ff ffb2 	bl	d63ba <_ZN5Print11printNumberEmh>
   d6456:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d645c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d645c:	b538      	push	{r3, r4, r5, lr}
   d645e:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6460:	f7ff ffda 	bl	d6418 <_ZN5Print5printEli>
   d6464:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d6466:	4628      	mov	r0, r5
   d6468:	f7ff ff91 	bl	d638e <_ZN5Print7printlnEv>
  return n;
}
   d646c:	4420      	add	r0, r4
   d646e:	bd38      	pop	{r3, r4, r5, pc}

000d6470 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6474:	ec57 6b10 	vmov	r6, r7, d0
   d6478:	4682      	mov	sl, r0
   d647a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d647c:	ee10 2a10 	vmov	r2, s0
   d6480:	463b      	mov	r3, r7
   d6482:	ee10 0a10 	vmov	r0, s0
   d6486:	4639      	mov	r1, r7
   d6488:	f001 fecc 	bl	d8224 <__aeabi_dcmpun>
   d648c:	b108      	cbz	r0, d6492 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d648e:	4948      	ldr	r1, [pc, #288]	; (d65b0 <_ZN5Print10printFloatEdh+0x140>)
   d6490:	e012      	b.n	d64b8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6492:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6496:	f04f 32ff 	mov.w	r2, #4294967295
   d649a:	4b46      	ldr	r3, [pc, #280]	; (d65b4 <_ZN5Print10printFloatEdh+0x144>)
   d649c:	4630      	mov	r0, r6
   d649e:	4649      	mov	r1, r9
   d64a0:	f001 fec0 	bl	d8224 <__aeabi_dcmpun>
   d64a4:	b968      	cbnz	r0, d64c2 <_ZN5Print10printFloatEdh+0x52>
   d64a6:	f04f 32ff 	mov.w	r2, #4294967295
   d64aa:	4b42      	ldr	r3, [pc, #264]	; (d65b4 <_ZN5Print10printFloatEdh+0x144>)
   d64ac:	4630      	mov	r0, r6
   d64ae:	4649      	mov	r1, r9
   d64b0:	f001 fe9a 	bl	d81e8 <__aeabi_dcmple>
   d64b4:	b928      	cbnz	r0, d64c2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64b6:	4940      	ldr	r1, [pc, #256]	; (d65b8 <_ZN5Print10printFloatEdh+0x148>)
   d64b8:	4650      	mov	r0, sl
   d64ba:	f7ff ff51 	bl	d6360 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d64be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d64c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64c6:	4b3d      	ldr	r3, [pc, #244]	; (d65bc <_ZN5Print10printFloatEdh+0x14c>)
   d64c8:	4630      	mov	r0, r6
   d64ca:	4639      	mov	r1, r7
   d64cc:	f001 fea0 	bl	d8210 <__aeabi_dcmpgt>
   d64d0:	b108      	cbz	r0, d64d6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64d2:	493b      	ldr	r1, [pc, #236]	; (d65c0 <_ZN5Print10printFloatEdh+0x150>)
   d64d4:	e7f0      	b.n	d64b8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d64d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64da:	4b3a      	ldr	r3, [pc, #232]	; (d65c4 <_ZN5Print10printFloatEdh+0x154>)
   d64dc:	4630      	mov	r0, r6
   d64de:	4639      	mov	r1, r7
   d64e0:	f001 fe78 	bl	d81d4 <__aeabi_dcmplt>
   d64e4:	2800      	cmp	r0, #0
   d64e6:	d1f4      	bne.n	d64d2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d64e8:	2200      	movs	r2, #0
   d64ea:	2300      	movs	r3, #0
   d64ec:	4630      	mov	r0, r6
   d64ee:	4639      	mov	r1, r7
   d64f0:	f001 fe70 	bl	d81d4 <__aeabi_dcmplt>
   d64f4:	b140      	cbz	r0, d6508 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d64f6:	212d      	movs	r1, #45	; 0x2d
   d64f8:	4650      	mov	r0, sl
   d64fa:	f7ff ff45 	bl	d6388 <_ZN5Print5printEc>
     number = -number;
   d64fe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6502:	4604      	mov	r4, r0
     number = -number;
   d6504:	461f      	mov	r7, r3
   d6506:	e000      	b.n	d650a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6508:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d650a:	492f      	ldr	r1, [pc, #188]	; (d65c8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d650c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6510:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6512:	fa5f f388 	uxtb.w	r3, r8
   d6516:	429d      	cmp	r5, r3
   d6518:	d906      	bls.n	d6528 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d651a:	2200      	movs	r2, #0
   d651c:	4b2b      	ldr	r3, [pc, #172]	; (d65cc <_ZN5Print10printFloatEdh+0x15c>)
   d651e:	f001 fd11 	bl	d7f44 <__aeabi_ddiv>
   d6522:	f108 0801 	add.w	r8, r8, #1
   d6526:	e7f4      	b.n	d6512 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6528:	4632      	mov	r2, r6
   d652a:	463b      	mov	r3, r7
   d652c:	f001 fa2e 	bl	d798c <__adddf3>
   d6530:	460f      	mov	r7, r1
   d6532:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6534:	f001 feb4 	bl	d82a0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6538:	220a      	movs	r2, #10
   d653a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d653c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d653e:	4650      	mov	r0, sl
   d6540:	f7ff ff3b 	bl	d63ba <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6544:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6546:	b37d      	cbz	r5, d65a8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6548:	4640      	mov	r0, r8
   d654a:	f001 fb5b 	bl	d7c04 <__aeabi_ui2d>
   d654e:	4602      	mov	r2, r0
   d6550:	460b      	mov	r3, r1
   d6552:	4630      	mov	r0, r6
   d6554:	4639      	mov	r1, r7
   d6556:	f001 fa17 	bl	d7988 <__aeabi_dsub>
   d655a:	4606      	mov	r6, r0
   d655c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d655e:	4650      	mov	r0, sl
   d6560:	491b      	ldr	r1, [pc, #108]	; (d65d0 <_ZN5Print10printFloatEdh+0x160>)
   d6562:	f7ff fefd 	bl	d6360 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6566:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6568:	4b18      	ldr	r3, [pc, #96]	; (d65cc <_ZN5Print10printFloatEdh+0x15c>)
   d656a:	2200      	movs	r2, #0
   d656c:	4630      	mov	r0, r6
   d656e:	4639      	mov	r1, r7
   d6570:	f001 fbbe 	bl	d7cf0 <__aeabi_dmul>
   d6574:	460f      	mov	r7, r1
   d6576:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6578:	f001 fe6a 	bl	d8250 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d657c:	220a      	movs	r2, #10
   d657e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6580:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6582:	4650      	mov	r0, sl
   d6584:	f7ff ff48 	bl	d6418 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6588:	4404      	add	r4, r0
    remainder -= toPrint;
   d658a:	4640      	mov	r0, r8
   d658c:	f001 fb4a 	bl	d7c24 <__aeabi_i2d>
   d6590:	4602      	mov	r2, r0
   d6592:	460b      	mov	r3, r1
   d6594:	4630      	mov	r0, r6
   d6596:	4639      	mov	r1, r7
   d6598:	f001 f9f6 	bl	d7988 <__aeabi_dsub>
   d659c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d659e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d65a2:	4606      	mov	r6, r0
   d65a4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d65a6:	d1df      	bne.n	d6568 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d65a8:	4620      	mov	r0, r4
   d65aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65ae:	bf00      	nop
   d65b0:	000d9058 	.word	0x000d9058
   d65b4:	7fefffff 	.word	0x7fefffff
   d65b8:	000d9060 	.word	0x000d9060
   d65bc:	41efffff 	.word	0x41efffff
   d65c0:	000d905c 	.word	0x000d905c
   d65c4:	c1efffff 	.word	0xc1efffff
   d65c8:	3fe00000 	.word	0x3fe00000
   d65cc:	40240000 	.word	0x40240000
   d65d0:	000d88ec 	.word	0x000d88ec

000d65d4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d65d4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d65d6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d65d8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d65da:	f7ff ff49 	bl	d6470 <_ZN5Print10printFloatEdh>
   d65de:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d65e0:	4628      	mov	r0, r5
   d65e2:	f7ff fed4 	bl	d638e <_ZN5Print7printlnEv>
  return n;
}
   d65e6:	4420      	add	r0, r4
   d65e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d65ec:	4b01      	ldr	r3, [pc, #4]	; (d65f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d65ee:	4a02      	ldr	r2, [pc, #8]	; (d65f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d65f0:	601a      	str	r2, [r3, #0]
   d65f2:	4770      	bx	lr
   d65f4:	2003e3dc 	.word	0x2003e3dc
   d65f8:	000d90d7 	.word	0x000d90d7

000d65fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d65fc:	4b02      	ldr	r3, [pc, #8]	; (d6608 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	4b02      	ldr	r3, [pc, #8]	; (d660c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6602:	601a      	str	r2, [r3, #0]
   d6604:	4770      	bx	lr
   d6606:	bf00      	nop
   d6608:	2003dbe0 	.word	0x2003dbe0
   d660c:	2003e3e0 	.word	0x2003e3e0

000d6610 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6610:	2100      	movs	r1, #0
   d6612:	f7ff bb9f 	b.w	d5d54 <system_delay_ms>

000d6616 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6616:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6618:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d661a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d661c:	b113      	cbz	r3, d6624 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d661e:	2203      	movs	r2, #3
   d6620:	4601      	mov	r1, r0
   d6622:	4798      	blx	r3
    }
   d6624:	4620      	mov	r0, r4
   d6626:	bd10      	pop	{r4, pc}

000d6628 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6628:	b510      	push	{r4, lr}
   d662a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d662c:	f7ff fff3 	bl	d6616 <_ZNSt14_Function_baseD1Ev>
   d6630:	4620      	mov	r0, r4
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6634:	4803      	ldr	r0, [pc, #12]	; (d6644 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6636:	4a04      	ldr	r2, [pc, #16]	; (d6648 <_GLOBAL__sub_I_RGB+0x14>)
   d6638:	4904      	ldr	r1, [pc, #16]	; (d664c <_GLOBAL__sub_I_RGB+0x18>)
   d663a:	2300      	movs	r3, #0
   d663c:	6083      	str	r3, [r0, #8]
   d663e:	f001 b84f 	b.w	d76e0 <__aeabi_atexit>
   d6642:	bf00      	nop
   d6644:	2003e3e4 	.word	0x2003e3e4
   d6648:	2003dc48 	.word	0x2003dc48
   d664c:	000d6629 	.word	0x000d6629

000d6650 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6650:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6652:	4b0c      	ldr	r3, [pc, #48]	; (d6684 <serialEventRun+0x34>)
   d6654:	b133      	cbz	r3, d6664 <serialEventRun+0x14>
   d6656:	f000 f959 	bl	d690c <_Z16_fetch_usbserialv>
   d665a:	6803      	ldr	r3, [r0, #0]
   d665c:	691b      	ldr	r3, [r3, #16]
   d665e:	4798      	blx	r3
   d6660:	2800      	cmp	r0, #0
   d6662:	dc09      	bgt.n	d6678 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6664:	4b08      	ldr	r3, [pc, #32]	; (d6688 <serialEventRun+0x38>)
   d6666:	b163      	cbz	r3, d6682 <serialEventRun+0x32>
   d6668:	f000 f9d2 	bl	d6a10 <_Z22__fetch_global_Serial1v>
   d666c:	6803      	ldr	r3, [r0, #0]
   d666e:	691b      	ldr	r3, [r3, #16]
   d6670:	4798      	blx	r3
   d6672:	2800      	cmp	r0, #0
   d6674:	dc03      	bgt.n	d667e <serialEventRun+0x2e>
   d6676:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6678:	f3af 8000 	nop.w
   d667c:	e7f2      	b.n	d6664 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d667e:	f3af 8000 	nop.w
   d6682:	bd08      	pop	{r3, pc}
	...

000d668c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d668c:	b508      	push	{r3, lr}
	serialEventRun();
   d668e:	f7ff ffdf 	bl	d6650 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6692:	f7ff f9ff 	bl	d5a94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6696:	4b01      	ldr	r3, [pc, #4]	; (d669c <_post_loop+0x10>)
   d6698:	6018      	str	r0, [r3, #0]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	2003e734 	.word	0x2003e734

000d66a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d66a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66a2:	2300      	movs	r3, #0
   d66a4:	9300      	str	r3, [sp, #0]
   d66a6:	461a      	mov	r2, r3
   d66a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66ac:	f7ff fb6c 	bl	d5d88 <system_ctrl_set_result>
}
   d66b0:	b003      	add	sp, #12
   d66b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d66b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d66b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d66ba:	8843      	ldrh	r3, [r0, #2]
   d66bc:	2b0a      	cmp	r3, #10
   d66be:	d008      	beq.n	d66d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d66c0:	2b50      	cmp	r3, #80	; 0x50
   d66c2:	d109      	bne.n	d66d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d66c4:	4b09      	ldr	r3, [pc, #36]	; (d66ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d66c6:	681b      	ldr	r3, [r3, #0]
   d66c8:	b13b      	cbz	r3, d66da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d66ca:	b003      	add	sp, #12
   d66cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d66d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d66d2:	f7ff ffe5 	bl	d66a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d66d6:	e006      	b.n	d66e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66d8:	2300      	movs	r3, #0
   d66da:	9300      	str	r3, [sp, #0]
   d66dc:	461a      	mov	r2, r3
   d66de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66e2:	f7ff fb51 	bl	d5d88 <system_ctrl_set_result>
        break;
    }
}
   d66e6:	b003      	add	sp, #12
   d66e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d66ec:	2003e3f4 	.word	0x2003e3f4

000d66f0 <module_user_init_hook>:

void module_user_init_hook()
{
   d66f0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d66f2:	f7ff f9bf 	bl	d5a74 <HAL_RNG_GetRandomNumber>
   d66f6:	4604      	mov	r4, r0
    srand(seed);
   d66f8:	f002 f814 	bl	d8724 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d66fc:	4b07      	ldr	r3, [pc, #28]	; (d671c <module_user_init_hook+0x2c>)
   d66fe:	b113      	cbz	r3, d6706 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6700:	4620      	mov	r0, r4
   d6702:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6706:	2100      	movs	r1, #0
   d6708:	4804      	ldr	r0, [pc, #16]	; (d671c <module_user_init_hook+0x2c>)
   d670a:	f7ff fbbf 	bl	d5e8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d670e:	2100      	movs	r1, #0
   d6710:	4803      	ldr	r0, [pc, #12]	; (d6720 <module_user_init_hook+0x30>)
}
   d6712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6716:	f7ff bb2d 	b.w	d5d74 <system_ctrl_set_app_request_handler>
   d671a:	bf00      	nop
   d671c:	00000000 	.word	0x00000000
   d6720:	000d66b9 	.word	0x000d66b9

000d6724 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6724:	4770      	bx	lr

000d6726 <_ZN9IPAddressD0Ev>:
   d6726:	b510      	push	{r4, lr}
   d6728:	2118      	movs	r1, #24
   d672a:	4604      	mov	r4, r0
   d672c:	f000 ffdd 	bl	d76ea <_ZdlPvj>
   d6730:	4620      	mov	r0, r4
   d6732:	bd10      	pop	{r4, pc}

000d6734 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6734:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6736:	7d03      	ldrb	r3, [r0, #20]
   d6738:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d673a:	b08d      	sub	sp, #52	; 0x34
   d673c:	460e      	mov	r6, r1
   d673e:	f100 0704 	add.w	r7, r0, #4
   d6742:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6746:	d002      	beq.n	d674e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6748:	f100 0508 	add.w	r5, r0, #8
   d674c:	e018      	b.n	d6780 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d674e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6750:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6752:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6756:	232f      	movs	r3, #47	; 0x2f
   d6758:	462a      	mov	r2, r5
   d675a:	200a      	movs	r0, #10
   d675c:	f7ff f9ca 	bl	d5af4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6760:	4628      	mov	r0, r5
   d6762:	f002 f819 	bl	d8798 <strlen>
   d6766:	6833      	ldr	r3, [r6, #0]
   d6768:	4602      	mov	r2, r0
   d676a:	68db      	ldr	r3, [r3, #12]
   d676c:	4629      	mov	r1, r5
   d676e:	4630      	mov	r0, r6
   d6770:	4798      	blx	r3
   d6772:	e00f      	b.n	d6794 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6774:	b124      	cbz	r4, d6780 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6776:	212e      	movs	r1, #46	; 0x2e
   d6778:	4630      	mov	r0, r6
   d677a:	f7ff fe05 	bl	d6388 <_ZN5Print5printEc>
   d677e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6784:	220a      	movs	r2, #10
   d6786:	4630      	mov	r0, r6
   d6788:	f7ff fe44 	bl	d6414 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d678c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d678e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6790:	d1f0      	bne.n	d6774 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6792:	4620      	mov	r0, r4
    }
    return n;
}
   d6794:	b00d      	add	sp, #52	; 0x34
   d6796:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6798 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6798:	b510      	push	{r4, lr}
   d679a:	4b05      	ldr	r3, [pc, #20]	; (d67b0 <_ZN9IPAddressC1Ev+0x18>)
   d679c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d679e:	2211      	movs	r2, #17
   d67a0:	f840 3b04 	str.w	r3, [r0], #4
   d67a4:	2100      	movs	r1, #0
   d67a6:	f001 ffb4 	bl	d8712 <memset>
{
    clear();
}
   d67aa:	4620      	mov	r0, r4
   d67ac:	bd10      	pop	{r4, pc}
   d67ae:	bf00      	nop
   d67b0:	000d9170 	.word	0x000d9170

000d67b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d67b4:	4603      	mov	r3, r0
   d67b6:	4a07      	ldr	r2, [pc, #28]	; (d67d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67b8:	b510      	push	{r4, lr}
   d67ba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d67be:	f101 0210 	add.w	r2, r1, #16
   d67c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d67c6:	f843 4b04 	str.w	r4, [r3], #4
   d67ca:	4291      	cmp	r1, r2
   d67cc:	d1f9      	bne.n	d67c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d67ce:	780a      	ldrb	r2, [r1, #0]
   d67d0:	701a      	strb	r2, [r3, #0]
}
   d67d2:	bd10      	pop	{r4, pc}
   d67d4:	000d9170 	.word	0x000d9170

000d67d8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d67d8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d67da:	2b04      	cmp	r3, #4
   d67dc:	d101      	bne.n	d67e2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d67de:	6840      	ldr	r0, [r0, #4]
   d67e0:	e008      	b.n	d67f4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d67e2:	2b06      	cmp	r3, #6
   d67e4:	d10a      	bne.n	d67fc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d67e6:	6843      	ldr	r3, [r0, #4]
   d67e8:	b953      	cbnz	r3, d6800 <_ZNK9IPAddresscvbEv+0x28>
   d67ea:	6883      	ldr	r3, [r0, #8]
   d67ec:	b943      	cbnz	r3, d6800 <_ZNK9IPAddresscvbEv+0x28>
   d67ee:	68c3      	ldr	r3, [r0, #12]
   d67f0:	b933      	cbnz	r3, d6800 <_ZNK9IPAddresscvbEv+0x28>
   d67f2:	6900      	ldr	r0, [r0, #16]
   d67f4:	3000      	adds	r0, #0
   d67f6:	bf18      	it	ne
   d67f8:	2001      	movne	r0, #1
   d67fa:	4770      	bx	lr
    } else {
        return false;
   d67fc:	2000      	movs	r0, #0
   d67fe:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6800:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6802:	4770      	bx	lr

000d6804 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6804:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6806:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d680a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d680e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6812:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6816:	2304      	movs	r3, #4
   d6818:	6041      	str	r1, [r0, #4]
   d681a:	7503      	strb	r3, [r0, #20]
   d681c:	bd10      	pop	{r4, pc}

000d681e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d681e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6820:	780d      	ldrb	r5, [r1, #0]
   d6822:	788b      	ldrb	r3, [r1, #2]
   d6824:	784a      	ldrb	r2, [r1, #1]
   d6826:	78c9      	ldrb	r1, [r1, #3]
   d6828:	9100      	str	r1, [sp, #0]
   d682a:	4629      	mov	r1, r5
   d682c:	f7ff ffea 	bl	d6804 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6830:	b003      	add	sp, #12
   d6832:	bd30      	pop	{r4, r5, pc}

000d6834 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d6834:	b510      	push	{r4, lr}
   d6836:	4b03      	ldr	r3, [pc, #12]	; (d6844 <_ZN9IPAddressC1EPKh+0x10>)
   d6838:	6003      	str	r3, [r0, #0]
   d683a:	4604      	mov	r4, r0
{
    *this = address;
   d683c:	f7ff ffef 	bl	d681e <_ZN9IPAddressaSEPKh>
}
   d6840:	4620      	mov	r0, r4
   d6842:	bd10      	pop	{r4, pc}
   d6844:	000d9170 	.word	0x000d9170

000d6848 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6848:	7441      	strb	r1, [r0, #17]
   d684a:	4770      	bx	lr

000d684c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d684c:	4770      	bx	lr

000d684e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d684e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6850:	2100      	movs	r1, #0
   d6852:	7c00      	ldrb	r0, [r0, #16]
   d6854:	f7ff fa4e 	bl	d5cf4 <HAL_USB_USART_Receive_Data>
}
   d6858:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d685c:	bf28      	it	cs
   d685e:	f04f 30ff 	movcs.w	r0, #4294967295
   d6862:	bd08      	pop	{r3, pc}

000d6864 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6864:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6866:	2101      	movs	r1, #1
   d6868:	7c00      	ldrb	r0, [r0, #16]
   d686a:	f7ff fa43 	bl	d5cf4 <HAL_USB_USART_Receive_Data>
}
   d686e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6872:	bf28      	it	cs
   d6874:	f04f 30ff 	movcs.w	r0, #4294967295
   d6878:	bd08      	pop	{r3, pc}

000d687a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d687a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d687c:	7c00      	ldrb	r0, [r0, #16]
   d687e:	f7ff fa31 	bl	d5ce4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6882:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6886:	bd08      	pop	{r3, pc}

000d6888 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6888:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d688a:	7c00      	ldrb	r0, [r0, #16]
   d688c:	f7ff fa22 	bl	d5cd4 <HAL_USB_USART_Available_Data>
}
   d6890:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6894:	bd08      	pop	{r3, pc}

000d6896 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6896:	7c00      	ldrb	r0, [r0, #16]
   d6898:	f7ff ba3c 	b.w	d5d14 <HAL_USB_USART_Flush_Data>

000d689c <_ZN9USBSerialD0Ev>:
   d689c:	b510      	push	{r4, lr}
   d689e:	2114      	movs	r1, #20
   d68a0:	4604      	mov	r4, r0
   d68a2:	f000 ff22 	bl	d76ea <_ZdlPvj>
   d68a6:	4620      	mov	r0, r4
   d68a8:	bd10      	pop	{r4, pc}

000d68aa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68aa:	b538      	push	{r3, r4, r5, lr}
   d68ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68ae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68b0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68b2:	f7ff fa17 	bl	d5ce4 <HAL_USB_USART_Available_Data_For_Write>
   d68b6:	2800      	cmp	r0, #0
   d68b8:	dc01      	bgt.n	d68be <_ZN9USBSerial5writeEh+0x14>
   d68ba:	7c60      	ldrb	r0, [r4, #17]
   d68bc:	b128      	cbz	r0, d68ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d68be:	4629      	mov	r1, r5
   d68c0:	7c20      	ldrb	r0, [r4, #16]
   d68c2:	f7ff fa1f 	bl	d5d04 <HAL_USB_USART_Send_Data>
   d68c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d68ca:	bd38      	pop	{r3, r4, r5, pc}

000d68cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68cc:	b510      	push	{r4, lr}
   d68ce:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d68d0:	2300      	movs	r3, #0
   d68d2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d68d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d68d8:	60a3      	str	r3, [r4, #8]
   d68da:	4b05      	ldr	r3, [pc, #20]	; (d68f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d68dc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d68de:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68e0:	4608      	mov	r0, r1
{
  _serial = serial;
   d68e2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d68e4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d68e6:	4611      	mov	r1, r2
   d68e8:	f7ff f9e4 	bl	d5cb4 <HAL_USB_USART_Init>
}
   d68ec:	4620      	mov	r0, r4
   d68ee:	bd10      	pop	{r4, pc}
   d68f0:	000d9184 	.word	0x000d9184

000d68f4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d68f4:	2200      	movs	r2, #0
   d68f6:	7c00      	ldrb	r0, [r0, #16]
   d68f8:	f7ff b9e4 	b.w	d5cc4 <HAL_USB_USART_Begin>

000d68fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d68fe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6902:	2100      	movs	r1, #0
   d6904:	f001 ff05 	bl	d8712 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6908:	4620      	mov	r0, r4
   d690a:	bd10      	pop	{r4, pc}

000d690c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d690c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d690e:	4d0e      	ldr	r5, [pc, #56]	; (d6948 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6910:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6912:	a801      	add	r0, sp, #4
   d6914:	f7ff fff2 	bl	d68fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6918:	6829      	ldr	r1, [r5, #0]
   d691a:	f011 0401 	ands.w	r4, r1, #1
   d691e:	d110      	bne.n	d6942 <_Z16_fetch_usbserialv+0x36>
   d6920:	4628      	mov	r0, r5
   d6922:	f7fd fbc2 	bl	d40aa <__cxa_guard_acquire>
   d6926:	b160      	cbz	r0, d6942 <_Z16_fetch_usbserialv+0x36>
   d6928:	aa01      	add	r2, sp, #4
   d692a:	4621      	mov	r1, r4
   d692c:	4807      	ldr	r0, [pc, #28]	; (d694c <_Z16_fetch_usbserialv+0x40>)
   d692e:	f7ff ffcd 	bl	d68cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6932:	4628      	mov	r0, r5
   d6934:	f7fd fbbe 	bl	d40b4 <__cxa_guard_release>
   d6938:	4a05      	ldr	r2, [pc, #20]	; (d6950 <_Z16_fetch_usbserialv+0x44>)
   d693a:	4906      	ldr	r1, [pc, #24]	; (d6954 <_Z16_fetch_usbserialv+0x48>)
   d693c:	4803      	ldr	r0, [pc, #12]	; (d694c <_Z16_fetch_usbserialv+0x40>)
   d693e:	f000 fecf 	bl	d76e0 <__aeabi_atexit>
	return _usbserial;
}
   d6942:	4802      	ldr	r0, [pc, #8]	; (d694c <_Z16_fetch_usbserialv+0x40>)
   d6944:	b007      	add	sp, #28
   d6946:	bd30      	pop	{r4, r5, pc}
   d6948:	2003e3f8 	.word	0x2003e3f8
   d694c:	2003e3fc 	.word	0x2003e3fc
   d6950:	2003dc48 	.word	0x2003dc48
   d6954:	000d684d 	.word	0x000d684d

000d6958 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6958:	4770      	bx	lr

000d695a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d695a:	7441      	strb	r1, [r0, #17]
   d695c:	4770      	bx	lr

000d695e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d695e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6960:	7c00      	ldrb	r0, [r0, #16]
   d6962:	f7ff f917 	bl	d5b94 <HAL_USART_Available_Data_For_Write>
}
   d6966:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d696a:	bd08      	pop	{r3, pc}

000d696c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d696c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d696e:	7c00      	ldrb	r0, [r0, #16]
   d6970:	f7ff f8e8 	bl	d5b44 <HAL_USART_Available_Data>
}
   d6974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6978:	bd08      	pop	{r3, pc}

000d697a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d697a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d697c:	7c00      	ldrb	r0, [r0, #16]
   d697e:	f7ff f8f1 	bl	d5b64 <HAL_USART_Peek_Data>
}
   d6982:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6986:	bf28      	it	cs
   d6988:	f04f 30ff 	movcs.w	r0, #4294967295
   d698c:	bd08      	pop	{r3, pc}

000d698e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d698e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6990:	7c00      	ldrb	r0, [r0, #16]
   d6992:	f7ff f8df 	bl	d5b54 <HAL_USART_Read_Data>
}
   d6996:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d699a:	bf28      	it	cs
   d699c:	f04f 30ff 	movcs.w	r0, #4294967295
   d69a0:	bd08      	pop	{r3, pc}

000d69a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d69a2:	7c00      	ldrb	r0, [r0, #16]
   d69a4:	f7ff b8e6 	b.w	d5b74 <HAL_USART_Flush_Data>

000d69a8 <_ZN11USARTSerialD0Ev>:
   d69a8:	b510      	push	{r4, lr}
   d69aa:	2114      	movs	r1, #20
   d69ac:	4604      	mov	r4, r0
   d69ae:	f000 fe9c 	bl	d76ea <_ZdlPvj>
   d69b2:	4620      	mov	r0, r4
   d69b4:	bd10      	pop	{r4, pc}

000d69b6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d69b6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69b8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d69ba:	4604      	mov	r4, r0
   d69bc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69be:	b925      	cbnz	r5, d69ca <_ZN11USARTSerial5writeEh+0x14>
   d69c0:	7c00      	ldrb	r0, [r0, #16]
   d69c2:	f7ff f8e7 	bl	d5b94 <HAL_USART_Available_Data_For_Write>
   d69c6:	2800      	cmp	r0, #0
   d69c8:	dd05      	ble.n	d69d6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69ca:	4631      	mov	r1, r6
   d69cc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d69ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69d2:	f7ff b8af 	b.w	d5b34 <HAL_USART_Write_Data>
  }
  return 0;
}
   d69d6:	4628      	mov	r0, r5
   d69d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d69dc:	b510      	push	{r4, lr}
   d69de:	4604      	mov	r4, r0
   d69e0:	4608      	mov	r0, r1
   d69e2:	4611      	mov	r1, r2
   d69e4:	2200      	movs	r2, #0
   d69e6:	6062      	str	r2, [r4, #4]
   d69e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69ec:	60a2      	str	r2, [r4, #8]
   d69ee:	4a05      	ldr	r2, [pc, #20]	; (d6a04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d69f0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d69f2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d69f4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d69f6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d69f8:	461a      	mov	r2, r3
   d69fa:	f7ff f893 	bl	d5b24 <HAL_USART_Init>
}
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd10      	pop	{r4, pc}
   d6a02:	bf00      	nop
   d6a04:	000d91b4 	.word	0x000d91b4

000d6a08 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6a08:	7c00      	ldrb	r0, [r0, #16]
   d6a0a:	f7ff b8bb 	b.w	d5b84 <HAL_USART_Is_Enabled>
	...

000d6a10 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a10:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a12:	4d0c      	ldr	r5, [pc, #48]	; (d6a44 <_Z22__fetch_global_Serial1v+0x34>)
   d6a14:	6829      	ldr	r1, [r5, #0]
   d6a16:	f011 0401 	ands.w	r4, r1, #1
   d6a1a:	d111      	bne.n	d6a40 <_Z22__fetch_global_Serial1v+0x30>
   d6a1c:	4628      	mov	r0, r5
   d6a1e:	f7fd fb44 	bl	d40aa <__cxa_guard_acquire>
   d6a22:	b168      	cbz	r0, d6a40 <_Z22__fetch_global_Serial1v+0x30>
   d6a24:	4a08      	ldr	r2, [pc, #32]	; (d6a48 <_Z22__fetch_global_Serial1v+0x38>)
   d6a26:	4b09      	ldr	r3, [pc, #36]	; (d6a4c <_Z22__fetch_global_Serial1v+0x3c>)
   d6a28:	4809      	ldr	r0, [pc, #36]	; (d6a50 <_Z22__fetch_global_Serial1v+0x40>)
   d6a2a:	4621      	mov	r1, r4
   d6a2c:	f7ff ffd6 	bl	d69dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6a30:	4628      	mov	r0, r5
   d6a32:	f7fd fb3f 	bl	d40b4 <__cxa_guard_release>
   d6a36:	4a07      	ldr	r2, [pc, #28]	; (d6a54 <_Z22__fetch_global_Serial1v+0x44>)
   d6a38:	4907      	ldr	r1, [pc, #28]	; (d6a58 <_Z22__fetch_global_Serial1v+0x48>)
   d6a3a:	4805      	ldr	r0, [pc, #20]	; (d6a50 <_Z22__fetch_global_Serial1v+0x40>)
   d6a3c:	f000 fe50 	bl	d76e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a40:	4803      	ldr	r0, [pc, #12]	; (d6a50 <_Z22__fetch_global_Serial1v+0x40>)
   d6a42:	bd38      	pop	{r3, r4, r5, pc}
   d6a44:	2003e4a8 	.word	0x2003e4a8
   d6a48:	2003e4ac 	.word	0x2003e4ac
   d6a4c:	2003e424 	.word	0x2003e424
   d6a50:	2003e410 	.word	0x2003e410
   d6a54:	2003dc48 	.word	0x2003dc48
   d6a58:	000d6959 	.word	0x000d6959

000d6a5c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6a5c:	4770      	bx	lr

000d6a5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a60:	4606      	mov	r6, r0
   d6a62:	4615      	mov	r5, r2
   d6a64:	460c      	mov	r4, r1
   d6a66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a68:	42bc      	cmp	r4, r7
   d6a6a:	d006      	beq.n	d6a7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a6c:	6833      	ldr	r3, [r6, #0]
   d6a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a72:	689b      	ldr	r3, [r3, #8]
   d6a74:	4630      	mov	r0, r6
   d6a76:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a78:	e7f6      	b.n	d6a68 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6a7a:	4628      	mov	r0, r5
   d6a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a7e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6a7e:	2200      	movs	r2, #0
   d6a80:	7c00      	ldrb	r0, [r0, #16]
   d6a82:	f7ff b8af 	b.w	d5be4 <HAL_I2C_Write_Data>

000d6a86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6a86:	2100      	movs	r1, #0
   d6a88:	7c00      	ldrb	r0, [r0, #16]
   d6a8a:	f7ff b8b3 	b.w	d5bf4 <HAL_I2C_Available_Data>

000d6a8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6a8e:	2100      	movs	r1, #0
   d6a90:	7c00      	ldrb	r0, [r0, #16]
   d6a92:	f7ff b8b7 	b.w	d5c04 <HAL_I2C_Read_Data>

000d6a96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6a96:	2100      	movs	r1, #0
   d6a98:	7c00      	ldrb	r0, [r0, #16]
   d6a9a:	f7ff b8bb 	b.w	d5c14 <HAL_I2C_Peek_Data>

000d6a9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6a9e:	2100      	movs	r1, #0
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	f7ff b8bf 	b.w	d5c24 <HAL_I2C_Flush_Data>

000d6aa6 <_ZN7TwoWireD0Ev>:
   d6aa6:	b510      	push	{r4, lr}
   d6aa8:	2114      	movs	r1, #20
   d6aaa:	4604      	mov	r4, r0
   d6aac:	f000 fe1d 	bl	d76ea <_ZdlPvj>
   d6ab0:	4620      	mov	r0, r4
   d6ab2:	bd10      	pop	{r4, pc}

000d6ab4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ab4:	b510      	push	{r4, lr}
   d6ab6:	4604      	mov	r4, r0
   d6ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6abc:	4608      	mov	r0, r1
   d6abe:	60a3      	str	r3, [r4, #8]
   d6ac0:	2100      	movs	r1, #0
   d6ac2:	4b04      	ldr	r3, [pc, #16]	; (d6ad4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6ac4:	7420      	strb	r0, [r4, #16]
   d6ac6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ac8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6aca:	f7ff f8bb 	bl	d5c44 <HAL_I2C_Init>

}
   d6ace:	4620      	mov	r0, r4
   d6ad0:	bd10      	pop	{r4, pc}
   d6ad2:	bf00      	nop
   d6ad4:	000d91e4 	.word	0x000d91e4

000d6ad8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ad8:	2300      	movs	r3, #0
   d6ada:	461a      	mov	r2, r3
   d6adc:	4619      	mov	r1, r3
   d6ade:	7c00      	ldrb	r0, [r0, #16]
   d6ae0:	f7ff b860 	b.w	d5ba4 <HAL_I2C_Begin>

000d6ae4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6ae4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6ae6:	2400      	movs	r4, #0
   d6ae8:	7c00      	ldrb	r0, [r0, #16]
   d6aea:	9400      	str	r4, [sp, #0]
   d6aec:	f7ff f862 	bl	d5bb4 <HAL_I2C_Request_Data>
  return result;
}
   d6af0:	b2c0      	uxtb	r0, r0
   d6af2:	b002      	add	sp, #8
   d6af4:	bd10      	pop	{r4, pc}

000d6af6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d6af6:	2301      	movs	r3, #1
   d6af8:	f7ff bff4 	b.w	d6ae4 <_ZN7TwoWire11requestFromEhhh>

000d6afc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6afc:	2200      	movs	r2, #0
   d6afe:	7c00      	ldrb	r0, [r0, #16]
   d6b00:	f7ff b860 	b.w	d5bc4 <HAL_I2C_Begin_Transmission>

000d6b04 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6b04:	2200      	movs	r2, #0
   d6b06:	7c00      	ldrb	r0, [r0, #16]
   d6b08:	f7ff b864 	b.w	d5bd4 <HAL_I2C_End_Transmission>

000d6b0c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6b0c:	2101      	movs	r1, #1
   d6b0e:	f7ff bff9 	b.w	d6b04 <_ZN7TwoWire15endTransmissionEh>

000d6b12 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6b12:	2100      	movs	r1, #0
   d6b14:	7c00      	ldrb	r0, [r0, #16]
   d6b16:	f7ff b88d 	b.w	d5c34 <HAL_I2C_Is_Enabled>

000d6b1a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b1a:	2200      	movs	r2, #0
   d6b1c:	4611      	mov	r1, r2
   d6b1e:	6840      	ldr	r0, [r0, #4]
   d6b20:	f7ff b97c 	b.w	d5e1c <network_listening>

000d6b24 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b24:	2200      	movs	r2, #0
   d6b26:	4611      	mov	r1, r2
   d6b28:	6840      	ldr	r0, [r0, #4]
   d6b2a:	f7ff b997 	b.w	d5e5c <network_get_listen_timeout>

000d6b2e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b2e:	2200      	movs	r2, #0
   d6b30:	6840      	ldr	r0, [r0, #4]
   d6b32:	f7ff b98b 	b.w	d5e4c <network_set_listen_timeout>

000d6b36 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b36:	2200      	movs	r2, #0
   d6b38:	f081 0101 	eor.w	r1, r1, #1
   d6b3c:	6840      	ldr	r0, [r0, #4]
   d6b3e:	f7ff b965 	b.w	d5e0c <network_listen>

000d6b42 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b42:	2300      	movs	r3, #0
   d6b44:	461a      	mov	r2, r3
   d6b46:	2101      	movs	r1, #1
   d6b48:	6840      	ldr	r0, [r0, #4]
   d6b4a:	f7ff b957 	b.w	d5dfc <network_off>

000d6b4e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b4e:	2300      	movs	r3, #0
   d6b50:	461a      	mov	r2, r3
   d6b52:	4619      	mov	r1, r3
   d6b54:	6840      	ldr	r0, [r0, #4]
   d6b56:	f7ff b949 	b.w	d5dec <network_on>

000d6b5a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b5a:	2200      	movs	r2, #0
   d6b5c:	4611      	mov	r1, r2
   d6b5e:	6840      	ldr	r0, [r0, #4]
   d6b60:	f7ff b93c 	b.w	d5ddc <network_ready>

000d6b64 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b64:	2200      	movs	r2, #0
   d6b66:	4611      	mov	r1, r2
   d6b68:	6840      	ldr	r0, [r0, #4]
   d6b6a:	f7ff b927 	b.w	d5dbc <network_connecting>

000d6b6e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b6e:	2200      	movs	r2, #0
   d6b70:	2102      	movs	r1, #2
   d6b72:	6840      	ldr	r0, [r0, #4]
   d6b74:	f7ff b92a 	b.w	d5dcc <network_disconnect>

000d6b78 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b78:	2300      	movs	r3, #0
   d6b7a:	461a      	mov	r2, r3
   d6b7c:	6840      	ldr	r0, [r0, #4]
   d6b7e:	f7ff b915 	b.w	d5dac <network_connect>

000d6b82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6b82:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b84:	4605      	mov	r5, r0
   d6b86:	b188      	cbz	r0, d6bac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b88:	6804      	ldr	r4, [r0, #0]
   d6b8a:	b14c      	cbz	r4, d6ba0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6b8c:	68a3      	ldr	r3, [r4, #8]
   d6b8e:	b11b      	cbz	r3, d6b98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b90:	2203      	movs	r2, #3
   d6b92:	4621      	mov	r1, r4
   d6b94:	4620      	mov	r0, r4
   d6b96:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b98:	2110      	movs	r1, #16
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	f000 fda5 	bl	d76ea <_ZdlPvj>
   d6ba0:	4628      	mov	r0, r5
   d6ba2:	2114      	movs	r1, #20
      }
   d6ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ba8:	f000 bd9f 	b.w	d76ea <_ZdlPvj>
   d6bac:	bd38      	pop	{r3, r4, r5, pc}

000d6bae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6bae:	b110      	cbz	r0, d6bb6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6bb0:	6803      	ldr	r3, [r0, #0]
   d6bb2:	685b      	ldr	r3, [r3, #4]
   d6bb4:	4718      	bx	r3
   d6bb6:	4770      	bx	lr

000d6bb8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6bb8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6bba:	6803      	ldr	r3, [r0, #0]
   d6bbc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6bbe:	b1bb      	cbz	r3, d6bf0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6bc0:	6858      	ldr	r0, [r3, #4]
   d6bc2:	f7fe ff6f 	bl	d5aa4 <os_thread_is_current>
   d6bc6:	b978      	cbnz	r0, d6be8 <_ZN6ThreadD1Ev+0x30>
   d6bc8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6bca:	7c5a      	ldrb	r2, [r3, #17]
   d6bcc:	b912      	cbnz	r2, d6bd4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6bce:	6858      	ldr	r0, [r3, #4]
   d6bd0:	f7fe ff70 	bl	d5ab4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6bd4:	6823      	ldr	r3, [r4, #0]
   d6bd6:	6858      	ldr	r0, [r3, #4]
   d6bd8:	f7fe ff74 	bl	d5ac4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bdc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6bde:	2300      	movs	r3, #0
   d6be0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6be2:	b128      	cbz	r0, d6bf0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6be4:	f7ff ffcd 	bl	d6b82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6be8:	6820      	ldr	r0, [r4, #0]
   d6bea:	b108      	cbz	r0, d6bf0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6bec:	f7ff ffc9 	bl	d6b82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6bf0:	4620      	mov	r0, r4
   d6bf2:	bd10      	pop	{r4, pc}

000d6bf4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6bf4:	b538      	push	{r3, r4, r5, lr}
   d6bf6:	4b0c      	ldr	r3, [pc, #48]	; (d6c28 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6bf8:	6003      	str	r3, [r0, #0]
   d6bfa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bfc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6c00:	b108      	cbz	r0, d6c06 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6c02:	f7fd fa50 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c06:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6c0a:	b135      	cbz	r5, d6c1a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c0c:	4628      	mov	r0, r5
   d6c0e:	f7ff ffd3 	bl	d6bb8 <_ZN6ThreadD1Ev>
   d6c12:	2104      	movs	r1, #4
   d6c14:	4628      	mov	r0, r5
   d6c16:	f000 fd68 	bl	d76ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c1a:	68a0      	ldr	r0, [r4, #8]
   d6c1c:	b108      	cbz	r0, d6c22 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6c1e:	f7ff ffc6 	bl	d6bae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6c22:	4620      	mov	r0, r4
   d6c24:	bd38      	pop	{r3, r4, r5, pc}
   d6c26:	bf00      	nop
   d6c28:	000d920c 	.word	0x000d920c

000d6c2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c2c:	b538      	push	{r3, r4, r5, lr}
   d6c2e:	4c0e      	ldr	r4, [pc, #56]	; (d6c68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6c30:	4b0e      	ldr	r3, [pc, #56]	; (d6c6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6c32:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6c34:	2500      	movs	r5, #0
   d6c36:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6c38:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6c3c:	6063      	str	r3, [r4, #4]
   d6c3e:	60a5      	str	r5, [r4, #8]
   d6c40:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6c44:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6c48:	f7fe ff4c 	bl	d5ae4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6c4c:	4b08      	ldr	r3, [pc, #32]	; (d6c70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6c4e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c52:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6c56:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6c58:	4620      	mov	r0, r4
   d6c5a:	4a06      	ldr	r2, [pc, #24]	; (d6c74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6c5c:	4906      	ldr	r1, [pc, #24]	; (d6c78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6c62:	f000 bd3d 	b.w	d76e0 <__aeabi_atexit>
   d6c66:	bf00      	nop
   d6c68:	2003e530 	.word	0x2003e530
   d6c6c:	000d9318 	.word	0x000d9318
   d6c70:	000d920c 	.word	0x000d920c
   d6c74:	2003dc48 	.word	0x2003dc48
   d6c78:	000d6bf5 	.word	0x000d6bf5

000d6c7c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c7e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6c80:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6c82:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6c86:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6c88:	2201      	movs	r2, #1
   d6c8a:	f04f 33ff 	mov.w	r3, #4294967295
   d6c8e:	4621      	mov	r1, r4
   d6c90:	47a8      	blx	r5
}
   d6c92:	b003      	add	sp, #12
   d6c94:	bd30      	pop	{r4, r5, pc}

000d6c96 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6c96:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6c98:	6803      	ldr	r3, [r0, #0]
   d6c9a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6c9c:	f04f 33ff 	mov.w	r3, #4294967295
   d6ca0:	46a4      	mov	ip, r4
}
   d6ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6ca6:	4760      	bx	ip

000d6ca8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6caa:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6cac:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6cae:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6cb2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6cb4:	4621      	mov	r1, r4
   d6cb6:	4613      	mov	r3, r2
   d6cb8:	2201      	movs	r2, #1
   d6cba:	47a8      	blx	r5
}
   d6cbc:	b003      	add	sp, #12
   d6cbe:	bd30      	pop	{r4, r5, pc}

000d6cc0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6cc0:	4770      	bx	lr

000d6cc2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6cc2:	b538      	push	{r3, r4, r5, lr}
   d6cc4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6cc6:	681a      	ldr	r2, [r3, #0]
   d6cc8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6cca:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6ccc:	da05      	bge.n	d6cda <_ZN9TCPClient9connectedEv+0x18>
   d6cce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6cd2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6cd6:	429a      	cmp	r2, r3
   d6cd8:	d001      	beq.n	d6cde <_ZN9TCPClient9connectedEv+0x1c>
   d6cda:	2501      	movs	r5, #1
   d6cdc:	e00b      	b.n	d6cf6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6cde:	6803      	ldr	r3, [r0, #0]
   d6ce0:	691b      	ldr	r3, [r3, #16]
   d6ce2:	4798      	blx	r3
   d6ce4:	2800      	cmp	r0, #0
   d6ce6:	bf14      	ite	ne
   d6ce8:	2501      	movne	r5, #1
   d6cea:	2500      	moveq	r5, #0
        if (!rv) {
   d6cec:	d103      	bne.n	d6cf6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6cee:	6823      	ldr	r3, [r4, #0]
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6cf4:	4798      	blx	r3
        }
    }
    return rv;
}
   d6cf6:	4628      	mov	r0, r5
   d6cf8:	bd38      	pop	{r3, r4, r5, pc}

000d6cfa <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6cfa:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6cfc:	6818      	ldr	r0, [r3, #0]
}
   d6cfe:	43c0      	mvns	r0, r0
   d6d00:	0fc0      	lsrs	r0, r0, #31
   d6d02:	4770      	bx	lr

000d6d04 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d04:	4770      	bx	lr

000d6d06 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d06:	2000      	movs	r0, #0
   d6d08:	4770      	bx	lr

000d6d0a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d0a:	b510      	push	{r4, lr}
   d6d0c:	2114      	movs	r1, #20
   d6d0e:	4604      	mov	r4, r0
   d6d10:	f000 fceb 	bl	d76ea <_ZdlPvj>
   d6d14:	4620      	mov	r0, r4
   d6d16:	bd10      	pop	{r4, pc}

000d6d18 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6d18:	f7fd b9c3 	b.w	d40a2 <_ZdlPv>

000d6d1c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6d1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6d1e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6d20:	2200      	movs	r2, #0
   d6d22:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6d24:	9202      	str	r2, [sp, #8]
   d6d26:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6d28:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6d2a:	4604      	mov	r4, r0
   d6d2c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6d2e:	d008      	beq.n	d6d42 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6d34:	fbb3 f1f2 	udiv	r1, r3, r2
   d6d38:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6d3a:	fb02 3111 	mls	r1, r2, r1, r3
   d6d3e:	434a      	muls	r2, r1
   d6d40:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6d42:	6960      	ldr	r0, [r4, #20]
   d6d44:	2308      	movs	r3, #8
   d6d46:	9300      	str	r3, [sp, #0]
   d6d48:	f241 0205 	movw	r2, #4101	; 0x1005
   d6d4c:	446b      	add	r3, sp
   d6d4e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6d52:	6800      	ldr	r0, [r0, #0]
   d6d54:	f7fe ff7e 	bl	d5c54 <sock_setsockopt>
    if (ret < 0) {
   d6d58:	2800      	cmp	r0, #0
   d6d5a:	db08      	blt.n	d6d6e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6d5c:	6960      	ldr	r0, [r4, #20]
   d6d5e:	2300      	movs	r3, #0
   d6d60:	4632      	mov	r2, r6
   d6d62:	4629      	mov	r1, r5
   d6d64:	6800      	ldr	r0, [r0, #0]
   d6d66:	f7fe ff95 	bl	d5c94 <sock_send>
    if (ret < 0) {
   d6d6a:	2800      	cmp	r0, #0
   d6d6c:	da04      	bge.n	d6d78 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6d6e:	f7ff f8ad 	bl	d5ecc <__errno>
   d6d72:	6803      	ldr	r3, [r0, #0]
   d6d74:	6063      	str	r3, [r4, #4]
   d6d76:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6d78:	b004      	add	sp, #16
   d6d7a:	bd70      	pop	{r4, r5, r6, pc}

000d6d7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d7c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6d7e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d80:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6d82:	689b      	ldr	r3, [r3, #8]
   d6d84:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d86:	68a3      	ldr	r3, [r4, #8]
   d6d88:	3b01      	subs	r3, #1
   d6d8a:	60a3      	str	r3, [r4, #8]
   d6d8c:	b92b      	cbnz	r3, d6d9a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6d8e:	6823      	ldr	r3, [r4, #0]
   d6d90:	4620      	mov	r0, r4
   d6d92:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6d98:	4718      	bx	r3
   d6d9a:	bd10      	pop	{r4, pc}

000d6d9c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6d9c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d9e:	4604      	mov	r4, r0
   d6da0:	694d      	ldr	r5, [r1, #20]
   d6da2:	4b05      	ldr	r3, [pc, #20]	; (d6db8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6da4:	f844 3b04 	str.w	r3, [r4], #4
   d6da8:	358c      	adds	r5, #140	; 0x8c
   d6daa:	4606      	mov	r6, r0
   d6dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6db0:	682b      	ldr	r3, [r5, #0]
   d6db2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6db4:	4630      	mov	r0, r6
   d6db6:	bd70      	pop	{r4, r5, r6, pc}
   d6db8:	000d9170 	.word	0x000d9170

000d6dbc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6dbc:	b510      	push	{r4, lr}
   d6dbe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6dc0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6dc4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6dc8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6dca:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6dcc:	d005      	beq.n	d6dda <_ZN9TCPClient4peekEv+0x1e>
   d6dce:	6962      	ldr	r2, [r4, #20]
   d6dd0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6dd4:	4413      	add	r3, r2
   d6dd6:	7918      	ldrb	r0, [r3, #4]
   d6dd8:	bd10      	pop	{r4, pc}
   d6dda:	6803      	ldr	r3, [r0, #0]
   d6ddc:	691b      	ldr	r3, [r3, #16]
   d6dde:	4798      	blx	r3
   d6de0:	2800      	cmp	r0, #0
   d6de2:	d1f4      	bne.n	d6dce <_ZN9TCPClient4peekEv+0x12>
   d6de4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6de8:	bd10      	pop	{r4, pc}

000d6dea <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6dea:	b510      	push	{r4, lr}
   d6dec:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6dee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6df2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6df6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6df8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6dfa:	d008      	beq.n	d6e0e <_ZN9TCPClient4readEv+0x24>
   d6dfc:	6962      	ldr	r2, [r4, #20]
   d6dfe:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6e02:	1c59      	adds	r1, r3, #1
   d6e04:	4413      	add	r3, r2
   d6e06:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6e0a:	7918      	ldrb	r0, [r3, #4]
   d6e0c:	bd10      	pop	{r4, pc}
   d6e0e:	6803      	ldr	r3, [r0, #0]
   d6e10:	691b      	ldr	r3, [r3, #16]
   d6e12:	4798      	blx	r3
   d6e14:	2800      	cmp	r0, #0
   d6e16:	d1f1      	bne.n	d6dfc <_ZN9TCPClient4readEv+0x12>
   d6e18:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6e1c:	bd10      	pop	{r4, pc}

000d6e1e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e20:	6943      	ldr	r3, [r0, #20]
   d6e22:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6e24:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6e28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6e2c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6e2e:	4605      	mov	r5, r0
   d6e30:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6e32:	d106      	bne.n	d6e42 <_ZN9TCPClient4readEPhj+0x24>
   d6e34:	6803      	ldr	r3, [r0, #0]
   d6e36:	691b      	ldr	r3, [r3, #16]
   d6e38:	4798      	blx	r3
   d6e3a:	b910      	cbnz	r0, d6e42 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6e3c:	f04f 34ff 	mov.w	r4, #4294967295
   d6e40:	e014      	b.n	d6e6c <_ZN9TCPClient4readEPhj+0x4e>
   d6e42:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6e44:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6e48:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6e4c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6e4e:	42bc      	cmp	r4, r7
   d6e50:	bf28      	it	cs
   d6e52:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6e54:	4419      	add	r1, r3
   d6e56:	4622      	mov	r2, r4
   d6e58:	3104      	adds	r1, #4
   d6e5a:	4630      	mov	r0, r6
   d6e5c:	f001 fc4e 	bl	d86fc <memcpy>
   d6e60:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6e62:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6e66:	4423      	add	r3, r4
   d6e68:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e70 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e74:	4698      	mov	r8, r3
    stop();
   d6e76:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6e78:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6e7c:	460d      	mov	r5, r1
   d6e7e:	4606      	mov	r6, r0
   d6e80:	4617      	mov	r7, r2
    stop();
   d6e82:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6e84:	ab12      	add	r3, sp, #72	; 0x48
   d6e86:	2400      	movs	r4, #0
   d6e88:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6e8c:	4622      	mov	r2, r4
   d6e8e:	4621      	mov	r1, r4
   d6e90:	4628      	mov	r0, r5
   d6e92:	f7fe fd8f 	bl	d59b4 <netdb_getaddrinfo>
   d6e96:	4681      	mov	r9, r0
   d6e98:	2800      	cmp	r0, #0
   d6e9a:	d13d      	bne.n	d6f18 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6e9c:	9b00      	ldr	r3, [sp, #0]
   d6e9e:	2b00      	cmp	r3, #0
   d6ea0:	d056      	beq.n	d6f50 <_ZN9TCPClient7connectEPKctm+0xe0>
   d6ea2:	695b      	ldr	r3, [r3, #20]
   d6ea4:	2b00      	cmp	r3, #0
   d6ea6:	d053      	beq.n	d6f50 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6ea8:	a806      	add	r0, sp, #24
   d6eaa:	f7ff fc75 	bl	d6798 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6eae:	9b00      	ldr	r3, [sp, #0]
   d6eb0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6eb2:	7863      	ldrb	r3, [r4, #1]
   d6eb4:	2b02      	cmp	r3, #2
   d6eb6:	d101      	bne.n	d6ebc <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6eb8:	1d21      	adds	r1, r4, #4
   d6eba:	e013      	b.n	d6ee4 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6ebc:	2b0a      	cmp	r3, #10
   d6ebe:	d114      	bne.n	d6eea <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6ec0:	2211      	movs	r2, #17
   d6ec2:	4649      	mov	r1, r9
   d6ec4:	a801      	add	r0, sp, #4
   d6ec6:	f001 fc24 	bl	d8712 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6eca:	68a3      	ldr	r3, [r4, #8]
   d6ecc:	bb33      	cbnz	r3, d6f1c <_ZN9TCPClient7connectEPKctm+0xac>
   d6ece:	68e3      	ldr	r3, [r4, #12]
   d6ed0:	bb23      	cbnz	r3, d6f1c <_ZN9TCPClient7connectEPKctm+0xac>
   d6ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6ed6:	6925      	ldr	r5, [r4, #16]
   d6ed8:	f7fe fe14 	bl	d5b04 <inet_htonl>
   d6edc:	4285      	cmp	r5, r0
   d6ede:	d11d      	bne.n	d6f1c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6ee0:	f104 0114 	add.w	r1, r4, #20
   d6ee4:	a806      	add	r0, sp, #24
   d6ee6:	f7ff fc9a 	bl	d681e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6eea:	a806      	add	r0, sp, #24
   d6eec:	f7ff fc74 	bl	d67d8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6ef0:	2800      	cmp	r0, #0
   d6ef2:	d02d      	beq.n	d6f50 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6ef4:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6ef6:	ad07      	add	r5, sp, #28
   d6ef8:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6efc:	4b18      	ldr	r3, [pc, #96]	; (d6f60 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6efe:	930c      	str	r3, [sp, #48]	; 0x30
   d6f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f02:	ac0d      	add	r4, sp, #52	; 0x34
   d6f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f06:	682b      	ldr	r3, [r5, #0]
   d6f08:	7023      	strb	r3, [r4, #0]
   d6f0a:	463a      	mov	r2, r7
   d6f0c:	4643      	mov	r3, r8
   d6f0e:	a90c      	add	r1, sp, #48	; 0x30
   d6f10:	4630      	mov	r0, r6
   d6f12:	47c8      	blx	r9
   d6f14:	4681      	mov	r9, r0
   d6f16:	e01b      	b.n	d6f50 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6f18:	46a1      	mov	r9, r4
   d6f1a:	e019      	b.n	d6f50 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f1c:	f104 0308 	add.w	r3, r4, #8
   d6f20:	ad01      	add	r5, sp, #4
   d6f22:	3418      	adds	r4, #24
   d6f24:	6818      	ldr	r0, [r3, #0]
   d6f26:	6859      	ldr	r1, [r3, #4]
   d6f28:	462a      	mov	r2, r5
   d6f2a:	c203      	stmia	r2!, {r0, r1}
   d6f2c:	3308      	adds	r3, #8
   d6f2e:	42a3      	cmp	r3, r4
   d6f30:	4615      	mov	r5, r2
   d6f32:	d1f7      	bne.n	d6f24 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6f34:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6f36:	a901      	add	r1, sp, #4
   d6f38:	a80c      	add	r0, sp, #48	; 0x30
   d6f3a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6f3c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6f40:	f7ff fc38 	bl	d67b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f46:	ac07      	add	r4, sp, #28
   d6f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f4a:	682b      	ldr	r3, [r5, #0]
   d6f4c:	7023      	strb	r3, [r4, #0]
   d6f4e:	e7cc      	b.n	d6eea <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6f50:	9800      	ldr	r0, [sp, #0]
   d6f52:	f7fe fd27 	bl	d59a4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6f56:	4648      	mov	r0, r9
   d6f58:	b013      	add	sp, #76	; 0x4c
   d6f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6f5e:	bf00      	nop
   d6f60:	000d9170 	.word	0x000d9170

000d6f64 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6f64:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6f66:	2300      	movs	r3, #0
   d6f68:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6f6c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6f6e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6f72:	4770      	bx	lr

000d6f74 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f78:	461e      	mov	r6, r3
    stop();
   d6f7a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f7c:	460c      	mov	r4, r1
   d6f7e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f82:	4605      	mov	r5, r0
   d6f84:	4617      	mov	r7, r2
    stop();
   d6f86:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6f88:	7d23      	ldrb	r3, [r4, #20]
   d6f8a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6f8e:	2b04      	cmp	r3, #4
   d6f90:	bf0c      	ite	eq
   d6f92:	2002      	moveq	r0, #2
   d6f94:	200a      	movne	r0, #10
   d6f96:	2206      	movs	r2, #6
   d6f98:	2101      	movs	r1, #1
   d6f9a:	f7fe fe83 	bl	d5ca4 <sock_socket>
   d6f9e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6fa2:	696b      	ldr	r3, [r5, #20]
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	2b00      	cmp	r3, #0
   d6fa8:	db18      	blt.n	d6fdc <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6faa:	4628      	mov	r0, r5
   d6fac:	f7ff ffda 	bl	d6f64 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6fb0:	b1d6      	cbz	r6, d6fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6fb2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6fb4:	a903      	add	r1, sp, #12
   d6fb6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6fb8:	9303      	str	r3, [sp, #12]
   d6fba:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6fbe:	f7fe fd51 	bl	d5a64 <if_index_to_name>
   d6fc2:	b958      	cbnz	r0, d6fdc <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6fc4:	6968      	ldr	r0, [r5, #20]
   d6fc6:	2306      	movs	r3, #6
   d6fc8:	9300      	str	r3, [sp, #0]
   d6fca:	f241 020b 	movw	r2, #4107	; 0x100b
   d6fce:	ab03      	add	r3, sp, #12
   d6fd0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6fd4:	6800      	ldr	r0, [r0, #0]
   d6fd6:	f7fe fe3d 	bl	d5c54 <sock_setsockopt>
   d6fda:	b128      	cbz	r0, d6fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6fdc:	682b      	ldr	r3, [r5, #0]
   d6fde:	4628      	mov	r0, r5
   d6fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6fe2:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6fe4:	4798      	blx	r3
   d6fe6:	e03b      	b.n	d7060 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6fe8:	261c      	movs	r6, #28
   d6fea:	4632      	mov	r2, r6
   d6fec:	2100      	movs	r1, #0
   d6fee:	a803      	add	r0, sp, #12
   d6ff0:	f001 fb8f 	bl	d8712 <memset>
    if (ip.version() == 4) {
   d6ff4:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6ff6:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6ffa:	2b04      	cmp	r3, #4
   d6ffc:	d10c      	bne.n	d7018 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6ffe:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7000:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7002:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7006:	f7fe fd85 	bl	d5b14 <inet_htons>
   d700a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d700e:	6860      	ldr	r0, [r4, #4]
   d7010:	f7fe fd78 	bl	d5b04 <inet_htonl>
   d7014:	9004      	str	r0, [sp, #16]
   d7016:	e013      	b.n	d7040 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7018:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d701a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d701c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7020:	f7fe fd78 	bl	d5b14 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7024:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7026:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d702a:	1d23      	adds	r3, r4, #4
   d702c:	f104 0714 	add.w	r7, r4, #20
   d7030:	6818      	ldr	r0, [r3, #0]
   d7032:	6859      	ldr	r1, [r3, #4]
   d7034:	4632      	mov	r2, r6
   d7036:	c203      	stmia	r2!, {r0, r1}
   d7038:	3308      	adds	r3, #8
   d703a:	42bb      	cmp	r3, r7
   d703c:	4616      	mov	r6, r2
   d703e:	d1f7      	bne.n	d7030 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7040:	696b      	ldr	r3, [r5, #20]
   d7042:	221c      	movs	r2, #28
   d7044:	a903      	add	r1, sp, #12
   d7046:	6818      	ldr	r0, [r3, #0]
   d7048:	f7fe fe14 	bl	d5c74 <sock_connect>
   d704c:	2800      	cmp	r0, #0
   d704e:	d1c5      	bne.n	d6fdc <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7050:	3404      	adds	r4, #4
   d7052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7054:	696d      	ldr	r5, [r5, #20]
   d7056:	358c      	adds	r5, #140	; 0x8c
   d7058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d705a:	6823      	ldr	r3, [r4, #0]
   d705c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d705e:	2401      	movs	r4, #1
}
   d7060:	4620      	mov	r0, r4
   d7062:	b00a      	add	sp, #40	; 0x28
   d7064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7068 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7068:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d706a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d706c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d706e:	6818      	ldr	r0, [r3, #0]
   d7070:	2800      	cmp	r0, #0
   d7072:	db01      	blt.n	d7078 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7074:	f7fe fdf6 	bl	d5c64 <sock_close>
   d7078:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d707a:	f04f 32ff 	mov.w	r2, #4294967295
   d707e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7080:	6960      	ldr	r0, [r4, #20]
   d7082:	2211      	movs	r2, #17
   d7084:	2100      	movs	r1, #0
   d7086:	308c      	adds	r0, #140	; 0x8c
   d7088:	f001 fb43 	bl	d8712 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d708c:	4620      	mov	r0, r4
}
   d708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7092:	f7ff bf67 	b.w	d6f64 <_ZN9TCPClient12flush_bufferEv>
	...

000d7098 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7098:	b530      	push	{r4, r5, lr}
   d709a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d709c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d70a0:	b08b      	sub	sp, #44	; 0x2c
   d70a2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d70a4:	b11b      	cbz	r3, d70ae <_ZN9TCPClient9availableEv+0x16>
   d70a6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d70aa:	429a      	cmp	r2, r3
   d70ac:	d040      	beq.n	d7130 <_ZN9TCPClient9availableEv+0x98>
   d70ae:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d70b0:	6818      	ldr	r0, [r3, #0]
   d70b2:	2800      	cmp	r0, #0
   d70b4:	db3f      	blt.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d70b6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d70ba:	2d7f      	cmp	r5, #127	; 0x7f
   d70bc:	d83b      	bhi.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d70be:	1d19      	adds	r1, r3, #4
   d70c0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d70c4:	2308      	movs	r3, #8
   d70c6:	4429      	add	r1, r5
   d70c8:	f7fe fddc 	bl	d5c84 <sock_recv>
            if (ret > 0) {
   d70cc:	2800      	cmp	r0, #0
   d70ce:	dd0c      	ble.n	d70ea <_ZN9TCPClient9availableEv+0x52>
   d70d0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d70d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70d6:	b90a      	cbnz	r2, d70dc <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d70d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d70dc:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d70de:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d70e2:	4418      	add	r0, r3
   d70e4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d70e8:	e025      	b.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d70ea:	f7fe feef 	bl	d5ecc <__errno>
   d70ee:	6803      	ldr	r3, [r0, #0]
   d70f0:	2b0b      	cmp	r3, #11
   d70f2:	d020      	beq.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
   d70f4:	f7fe feea 	bl	d5ecc <__errno>
   d70f8:	6803      	ldr	r3, [r0, #0]
   d70fa:	2b0b      	cmp	r3, #11
   d70fc:	d01b      	beq.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d70fe:	2320      	movs	r3, #32
   d7100:	2500      	movs	r5, #0
   d7102:	9302      	str	r3, [sp, #8]
   d7104:	9503      	str	r5, [sp, #12]
   d7106:	f7fe fee1 	bl	d5ecc <__errno>
   d710a:	6803      	ldr	r3, [r0, #0]
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	4b0e      	ldr	r3, [pc, #56]	; (d7148 <_ZN9TCPClient9availableEv+0xb0>)
   d7110:	9300      	str	r3, [sp, #0]
   d7112:	aa02      	add	r2, sp, #8
   d7114:	462b      	mov	r3, r5
   d7116:	490d      	ldr	r1, [pc, #52]	; (d714c <_ZN9TCPClient9availableEv+0xb4>)
   d7118:	2032      	movs	r0, #50	; 0x32
   d711a:	f7fe fe0b 	bl	d5d34 <log_message>
                    sock_close(d_->sock);
   d711e:	6963      	ldr	r3, [r4, #20]
   d7120:	6818      	ldr	r0, [r3, #0]
   d7122:	f7fe fd9f 	bl	d5c64 <sock_close>
   d7126:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7128:	f04f 32ff 	mov.w	r2, #4294967295
   d712c:	601a      	str	r2, [r3, #0]
   d712e:	e002      	b.n	d7136 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7130:	f7ff ff18 	bl	d6f64 <_ZN9TCPClient12flush_bufferEv>
   d7134:	e7bb      	b.n	d70ae <_ZN9TCPClient9availableEv+0x16>
   d7136:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7138:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d713c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7140:	1a18      	subs	r0, r3, r0
}
   d7142:	b00b      	add	sp, #44	; 0x2c
   d7144:	bd30      	pop	{r4, r5, pc}
   d7146:	bf00      	nop
   d7148:	000d92a7 	.word	0x000d92a7
   d714c:	000d92a0 	.word	0x000d92a0

000d7150 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7150:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7152:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7154:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7156:	6001      	str	r1, [r0, #0]
   d7158:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d715c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7160:	3088      	adds	r0, #136	; 0x88
   d7162:	f7ff fb19 	bl	d6798 <_ZN9IPAddressC1Ev>
}
   d7166:	4620      	mov	r0, r4
   d7168:	bd10      	pop	{r4, pc}
	...

000d716c <_ZN9TCPClientC1Ei>:
   d716c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7170:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7172:	2300      	movs	r3, #0
   d7174:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7176:	4a14      	ldr	r2, [pc, #80]	; (d71c8 <_ZN9TCPClientC1Ei+0x5c>)
   d7178:	6043      	str	r3, [r0, #4]
   d717a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d717c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d717e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7180:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7182:	20a0      	movs	r0, #160	; 0xa0
   d7184:	460e      	mov	r6, r1
   d7186:	f7fc ff88 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d718a:	4605      	mov	r5, r0
   d718c:	b110      	cbz	r0, d7194 <_ZN9TCPClientC1Ei+0x28>
   d718e:	4631      	mov	r1, r6
   d7190:	f7ff ffde 	bl	d7150 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7194:	2014      	movs	r0, #20
   d7196:	f7fc ff80 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d719a:	4603      	mov	r3, r0
   d719c:	b128      	cbz	r0, d71aa <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d719e:	2201      	movs	r2, #1
   d71a0:	6042      	str	r2, [r0, #4]
   d71a2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d71a4:	4a09      	ldr	r2, [pc, #36]	; (d71cc <_ZN9TCPClientC1Ei+0x60>)
   d71a6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d71a8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d71aa:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d71ac:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d71ae:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d71b0:	b128      	cbz	r0, d71be <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d71b2:	6843      	ldr	r3, [r0, #4]
   d71b4:	3b01      	subs	r3, #1
   d71b6:	6043      	str	r3, [r0, #4]
   d71b8:	b90b      	cbnz	r3, d71be <_ZN9TCPClientC1Ei+0x52>
   d71ba:	f7ff fddf 	bl	d6d7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d71be:	4620      	mov	r0, r4
   d71c0:	f7ff fed0 	bl	d6f64 <_ZN9TCPClient12flush_bufferEv>
}
   d71c4:	4620      	mov	r0, r4
   d71c6:	bd70      	pop	{r4, r5, r6, pc}
   d71c8:	000d925c 	.word	0x000d925c
   d71cc:	000d9240 	.word	0x000d9240

000d71d0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d71d0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d71d2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d71d6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d71d8:	f7ff ffc8 	bl	d716c <_ZN9TCPClientC1Ei>
}
   d71dc:	4620      	mov	r0, r4
   d71de:	bd10      	pop	{r4, pc}

000d71e0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d71e0:	b510      	push	{r4, lr}
   d71e2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d71e4:	6800      	ldr	r0, [r0, #0]
   d71e6:	2800      	cmp	r0, #0
   d71e8:	db01      	blt.n	d71ee <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d71ea:	f7fe fd3b 	bl	d5c64 <sock_close>
    }
}
   d71ee:	4620      	mov	r0, r4
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d71f2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d71f4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d71f6:	4620      	mov	r0, r4
   d71f8:	f7ff fff2 	bl	d71e0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d71fc:	b124      	cbz	r4, d7208 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d71fe:	4620      	mov	r0, r4
   d7200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7204:	f7fc bf4d 	b.w	d40a2 <_ZdlPv>
   d7208:	bd10      	pop	{r4, pc}

000d720a <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d720a:	4770      	bx	lr

000d720c <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d720c:	2001      	movs	r0, #1
   d720e:	4770      	bx	lr

000d7210 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d7210:	8983      	ldrh	r3, [r0, #12]
   d7212:	b11b      	cbz	r3, d721c <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d7214:	6903      	ldr	r3, [r0, #16]
   d7216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d721a:	d102      	bne.n	d7222 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d721c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7234 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d7220:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d7222:	ee07 3a90 	vmov	s15, r3
   d7226:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7238 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d722a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d722e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d7232:	4770      	bx	lr
   d7234:	00000000 	.word	0x00000000
   d7238:	42c80000 	.word	0x42c80000

000d723c <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d723c:	8983      	ldrh	r3, [r0, #12]
   d723e:	b11b      	cbz	r3, d7248 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d7240:	6983      	ldr	r3, [r0, #24]
   d7242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7246:	d102      	bne.n	d724e <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d7248:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7260 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d724c:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d724e:	ee07 3a90 	vmov	s15, r3
   d7252:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7264 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d7256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d725a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d725e:	4770      	bx	lr
   d7260:	00000000 	.word	0x00000000
   d7264:	42c80000 	.word	0x42c80000

000d7268 <_ZN10WiFiSignalD0Ev>:
   d7268:	b510      	push	{r4, lr}
   d726a:	2124      	movs	r1, #36	; 0x24
   d726c:	4604      	mov	r4, r0
   d726e:	f000 fa3c 	bl	d76ea <_ZdlPvj>
   d7272:	4620      	mov	r0, r4
   d7274:	bd10      	pop	{r4, pc}

000d7276 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7276:	2200      	movs	r2, #0
   d7278:	4611      	mov	r1, r2
   d727a:	6840      	ldr	r0, [r0, #4]
   d727c:	f7fe bdce 	b.w	d5e1c <network_listening>

000d7280 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7280:	2200      	movs	r2, #0
   d7282:	4611      	mov	r1, r2
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	f7fe bde9 	b.w	d5e5c <network_get_listen_timeout>

000d728a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d728a:	2200      	movs	r2, #0
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	f7fe bddd 	b.w	d5e4c <network_set_listen_timeout>

000d7292 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7292:	2200      	movs	r2, #0
   d7294:	f081 0101 	eor.w	r1, r1, #1
   d7298:	6840      	ldr	r0, [r0, #4]
   d729a:	f7fe bdb7 	b.w	d5e0c <network_listen>

000d729e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d729e:	2300      	movs	r3, #0
   d72a0:	461a      	mov	r2, r3
   d72a2:	4619      	mov	r1, r3
   d72a4:	6840      	ldr	r0, [r0, #4]
   d72a6:	f7fe bda9 	b.w	d5dfc <network_off>

000d72aa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72aa:	2200      	movs	r2, #0
   d72ac:	4611      	mov	r1, r2
   d72ae:	6840      	ldr	r0, [r0, #4]
   d72b0:	f7fe bd84 	b.w	d5dbc <network_connecting>

000d72b4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72b4:	2200      	movs	r2, #0
   d72b6:	2102      	movs	r1, #2
   d72b8:	6840      	ldr	r0, [r0, #4]
   d72ba:	f7fe bd87 	b.w	d5dcc <network_disconnect>

000d72be <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72be:	2300      	movs	r3, #0
   d72c0:	461a      	mov	r2, r3
   d72c2:	6840      	ldr	r0, [r0, #4]
   d72c4:	f7fe bd72 	b.w	d5dac <network_connect>

000d72c8 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d72c8:	8983      	ldrh	r3, [r0, #12]
   d72ca:	b17b      	cbz	r3, d72ec <_ZNK10WiFiSignal10getQualityEv+0x24>
   d72cc:	6a03      	ldr	r3, [r0, #32]
   d72ce:	2b00      	cmp	r3, #0
   d72d0:	db0c      	blt.n	d72ec <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d72d2:	ee07 3a90 	vmov	s15, r3
   d72d6:	eddf 6a07 	vldr	s13, [pc, #28]	; d72f4 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d72da:	ed9f 0a07 	vldr	s0, [pc, #28]	; d72f8 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d72de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d72e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d72e6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d72ea:	4770      	bx	lr
    }
    return -1.0f;
   d72ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d72f0:	4770      	bx	lr
   d72f2:	bf00      	nop
   d72f4:	477fff00 	.word	0x477fff00
   d72f8:	42c80000 	.word	0x42c80000

000d72fc <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d72fc:	8983      	ldrh	r3, [r0, #12]
   d72fe:	b17b      	cbz	r3, d7320 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d7300:	6943      	ldr	r3, [r0, #20]
   d7302:	2b00      	cmp	r3, #0
   d7304:	db0c      	blt.n	d7320 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d7306:	ee07 3a90 	vmov	s15, r3
   d730a:	eddf 6a07 	vldr	s13, [pc, #28]	; d7328 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d730e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d732c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d7312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d7316:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d731a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d731e:	4770      	bx	lr
    }
    return -1.0f;
   d7320:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7324:	4770      	bx	lr
   d7326:	bf00      	nop
   d7328:	477fff00 	.word	0x477fff00
   d732c:	42c80000 	.word	0x42c80000

000d7330 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
   d7330:	f990 0004 	ldrsb.w	r0, [r0, #4]
   d7334:	4770      	bx	lr

000d7336 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d7336:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d7338:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d733a:	4606      	mov	r6, r0
    inf_ = inf;
   d733c:	f100 040c 	add.w	r4, r0, #12
   d7340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7344:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7348:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d734c:	6933      	ldr	r3, [r6, #16]
   d734e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7352:	bf0e      	itee	eq
   d7354:	2302      	moveq	r3, #2
   d7356:	2264      	movne	r2, #100	; 0x64
   d7358:	fb93 f3f2 	sdivne	r3, r3, r2
   d735c:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d735e:	69b3      	ldr	r3, [r6, #24]
   d7360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7364:	bf0e      	itee	eq
   d7366:	2300      	moveq	r3, #0
   d7368:	2264      	movne	r2, #100	; 0x64
   d736a:	fb93 f3f2 	sdivne	r3, r3, r2
   d736e:	60b3      	str	r3, [r6, #8]
    return true;
}
   d7370:	2001      	movs	r0, #1
   d7372:	bd70      	pop	{r4, r5, r6, pc}

000d7374 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d7374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d7378:	4b16      	ldr	r3, [pc, #88]	; (d73d4 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d737a:	6003      	str	r3, [r0, #0]
   d737c:	2500      	movs	r5, #0
   d737e:	4688      	mov	r8, r1
   d7380:	2702      	movs	r7, #2
   d7382:	2618      	movs	r6, #24
   d7384:	b086      	sub	sp, #24
   d7386:	6047      	str	r7, [r0, #4]
   d7388:	6085      	str	r5, [r0, #8]
   d738a:	4632      	mov	r2, r6
   d738c:	4629      	mov	r1, r5
   d738e:	4604      	mov	r4, r0
   d7390:	300c      	adds	r0, #12
   d7392:	f001 f9be 	bl	d8712 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7396:	462a      	mov	r2, r5
   d7398:	4629      	mov	r1, r5
   d739a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d739e:	f7fe fd1d 	bl	d5ddc <network_ready>
   d73a2:	b190      	cbz	r0, d73ca <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d73a4:	4632      	mov	r2, r6
   d73a6:	4629      	mov	r1, r5
   d73a8:	4668      	mov	r0, sp
   d73aa:	f001 f9b2 	bl	d8712 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d73ae:	462a      	mov	r2, r5
   d73b0:	4669      	mov	r1, sp
   d73b2:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d73b4:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d73b8:	f7fe fcb4 	bl	d5d24 <wlan_connected_info>
        if (r == 0) {
   d73bc:	b920      	cbnz	r0, d73c8 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d73be:	4669      	mov	r1, sp
   d73c0:	4620      	mov	r0, r4
   d73c2:	f7ff ffb8 	bl	d7336 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d73c6:	e000      	b.n	d73ca <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d73c8:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d73ca:	4620      	mov	r0, r4
   d73cc:	b006      	add	sp, #24
   d73ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73d2:	bf00      	nop
   d73d4:	000d92f4 	.word	0x000d92f4

000d73d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d73d8:	4b02      	ldr	r3, [pc, #8]	; (d73e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d73da:	2204      	movs	r2, #4
   d73dc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d73de:	4a02      	ldr	r2, [pc, #8]	; (d73e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d73e0:	601a      	str	r2, [r3, #0]
   d73e2:	4770      	bx	lr
   d73e4:	2003e704 	.word	0x2003e704
   d73e8:	000d92c0 	.word	0x000d92c0

000d73ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d73ec:	2300      	movs	r3, #0
   d73ee:	461a      	mov	r2, r3
   d73f0:	6840      	ldr	r0, [r0, #4]
   d73f2:	f7fe bcdb 	b.w	d5dac <network_connect>

000d73f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d73f6:	2200      	movs	r2, #0
   d73f8:	2102      	movs	r1, #2
   d73fa:	6840      	ldr	r0, [r0, #4]
   d73fc:	f7fe bce6 	b.w	d5dcc <network_disconnect>

000d7400 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7400:	2200      	movs	r2, #0
   d7402:	4611      	mov	r1, r2
   d7404:	6840      	ldr	r0, [r0, #4]
   d7406:	f7fe bcd9 	b.w	d5dbc <network_connecting>

000d740a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d740a:	2200      	movs	r2, #0
   d740c:	4611      	mov	r1, r2
   d740e:	6840      	ldr	r0, [r0, #4]
   d7410:	f7fe bce4 	b.w	d5ddc <network_ready>

000d7414 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7414:	2300      	movs	r3, #0
   d7416:	461a      	mov	r2, r3
   d7418:	4619      	mov	r1, r3
   d741a:	6840      	ldr	r0, [r0, #4]
   d741c:	f7fe bce6 	b.w	d5dec <network_on>

000d7420 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7420:	2300      	movs	r3, #0
   d7422:	461a      	mov	r2, r3
   d7424:	4619      	mov	r1, r3
   d7426:	6840      	ldr	r0, [r0, #4]
   d7428:	f7fe bce8 	b.w	d5dfc <network_off>

000d742c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d742c:	2200      	movs	r2, #0
   d742e:	f081 0101 	eor.w	r1, r1, #1
   d7432:	6840      	ldr	r0, [r0, #4]
   d7434:	f7fe bcea 	b.w	d5e0c <network_listen>

000d7438 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7438:	2200      	movs	r2, #0
   d743a:	6840      	ldr	r0, [r0, #4]
   d743c:	f7fe bd06 	b.w	d5e4c <network_set_listen_timeout>

000d7440 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7440:	2200      	movs	r2, #0
   d7442:	4611      	mov	r1, r2
   d7444:	6840      	ldr	r0, [r0, #4]
   d7446:	f7fe bd09 	b.w	d5e5c <network_get_listen_timeout>

000d744a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d744a:	2200      	movs	r2, #0
   d744c:	4611      	mov	r1, r2
   d744e:	6840      	ldr	r0, [r0, #4]
   d7450:	f7fe bce4 	b.w	d5e1c <network_listening>

000d7454 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7458:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d745a:	b095      	sub	sp, #84	; 0x54
   d745c:	4616      	mov	r6, r2
   d745e:	460d      	mov	r5, r1
   d7460:	4607      	mov	r7, r0
    IPAddress addr;
   d7462:	f7ff f999 	bl	d6798 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7466:	4621      	mov	r1, r4
   d7468:	2220      	movs	r2, #32
   d746a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d746c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d746e:	f001 f950 	bl	d8712 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7472:	2340      	movs	r3, #64	; 0x40
   d7474:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7476:	4621      	mov	r1, r4
   d7478:	466b      	mov	r3, sp
   d747a:	aa0c      	add	r2, sp, #48	; 0x30
   d747c:	4630      	mov	r0, r6
   d747e:	f7fe fa99 	bl	d59b4 <netdb_getaddrinfo>
    if (!r) {
   d7482:	4604      	mov	r4, r0
   d7484:	2800      	cmp	r0, #0
   d7486:	d144      	bne.n	d7512 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7488:	4602      	mov	r2, r0
   d748a:	2101      	movs	r1, #1
   d748c:	6868      	ldr	r0, [r5, #4]
   d748e:	f7fe fca5 	bl	d5ddc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7492:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7494:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7496:	4622      	mov	r2, r4
   d7498:	6868      	ldr	r0, [r5, #4]
   d749a:	f7fe fc9f 	bl	d5ddc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d749e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d74a0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d74a2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d74a4:	2e00      	cmp	r6, #0
   d74a6:	d034      	beq.n	d7512 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d74a8:	2900      	cmp	r1, #0
   d74aa:	d132      	bne.n	d7512 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d74ac:	6873      	ldr	r3, [r6, #4]
   d74ae:	2b02      	cmp	r3, #2
   d74b0:	d002      	beq.n	d74b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d74b2:	2b0a      	cmp	r3, #10
   d74b4:	d009      	beq.n	d74ca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d74b6:	e02a      	b.n	d750e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d74b8:	f1b8 0f00 	cmp.w	r8, #0
   d74bc:	d027      	beq.n	d750e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d74be:	6971      	ldr	r1, [r6, #20]
   d74c0:	4638      	mov	r0, r7
   d74c2:	3104      	adds	r1, #4
   d74c4:	f7ff f9ab 	bl	d681e <_ZN9IPAddressaSEPKh>
   d74c8:	e020      	b.n	d750c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d74ca:	f1b9 0f00 	cmp.w	r9, #0
   d74ce:	d01e      	beq.n	d750e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d74d0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d74d2:	2211      	movs	r2, #17
   d74d4:	a801      	add	r0, sp, #4
   d74d6:	f001 f91c 	bl	d8712 <memset>
                    a.v = 6;
   d74da:	2306      	movs	r3, #6
   d74dc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d74e0:	ad01      	add	r5, sp, #4
   d74e2:	f104 0308 	add.w	r3, r4, #8
   d74e6:	3418      	adds	r4, #24
   d74e8:	6818      	ldr	r0, [r3, #0]
   d74ea:	6859      	ldr	r1, [r3, #4]
   d74ec:	462a      	mov	r2, r5
   d74ee:	c203      	stmia	r2!, {r0, r1}
   d74f0:	3308      	adds	r3, #8
   d74f2:	42a3      	cmp	r3, r4
   d74f4:	4615      	mov	r5, r2
   d74f6:	d1f7      	bne.n	d74e8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d74f8:	a901      	add	r1, sp, #4
   d74fa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74fc:	ad07      	add	r5, sp, #28
   d74fe:	f7ff f959 	bl	d67b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7504:	1d3c      	adds	r4, r7, #4
   d7506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7508:	682b      	ldr	r3, [r5, #0]
   d750a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d750c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d750e:	69f6      	ldr	r6, [r6, #28]
   d7510:	e7c8      	b.n	d74a4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7512:	9800      	ldr	r0, [sp, #0]
   d7514:	f7fe fa46 	bl	d59a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7518:	4638      	mov	r0, r7
   d751a:	b015      	add	sp, #84	; 0x54
   d751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7520 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7520:	4b02      	ldr	r3, [pc, #8]	; (d752c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7522:	4a03      	ldr	r2, [pc, #12]	; (d7530 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7524:	601a      	str	r2, [r3, #0]
   d7526:	2200      	movs	r2, #0
   d7528:	605a      	str	r2, [r3, #4]
   d752a:	4770      	bx	lr
   d752c:	2003e70c 	.word	0x2003e70c
   d7530:	000d9318 	.word	0x000d9318

000d7534 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7534:	b510      	push	{r4, lr}
   d7536:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7538:	480f      	ldr	r0, [pc, #60]	; (d7578 <pinAvailable+0x44>)
   d753a:	f7fe fd29 	bl	d5f90 <_ZN8SPIClass9isEnabledEv>
   d753e:	b128      	cbz	r0, d754c <pinAvailable+0x18>
   d7540:	f1a4 030b 	sub.w	r3, r4, #11
   d7544:	2b02      	cmp	r3, #2
   d7546:	d801      	bhi.n	d754c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7548:	2000      	movs	r0, #0
   d754a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d754c:	f000 f8a8 	bl	d76a0 <_Z19__fetch_global_Wirev>
   d7550:	f7ff fadf 	bl	d6b12 <_ZN7TwoWire9isEnabledEv>
   d7554:	b108      	cbz	r0, d755a <pinAvailable+0x26>
   d7556:	2c01      	cmp	r4, #1
   d7558:	d9f6      	bls.n	d7548 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d755a:	f7ff fa59 	bl	d6a10 <_Z22__fetch_global_Serial1v>
   d755e:	f7ff fa53 	bl	d6a08 <_ZN11USARTSerial9isEnabledEv>
   d7562:	b118      	cbz	r0, d756c <pinAvailable+0x38>
   d7564:	f1a4 0309 	sub.w	r3, r4, #9
   d7568:	2b01      	cmp	r3, #1
   d756a:	d9ed      	bls.n	d7548 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d756c:	2c23      	cmp	r4, #35	; 0x23
   d756e:	bf8c      	ite	hi
   d7570:	2000      	movhi	r0, #0
   d7572:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7574:	bd10      	pop	{r4, pc}
   d7576:	bf00      	nop
   d7578:	2003e714 	.word	0x2003e714

000d757c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d757c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d757e:	b538      	push	{r3, r4, r5, lr}
   d7580:	4604      	mov	r4, r0
   d7582:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7584:	d80a      	bhi.n	d759c <pinMode+0x20>
   d7586:	29ff      	cmp	r1, #255	; 0xff
   d7588:	d008      	beq.n	d759c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d758a:	f7ff ffd3 	bl	d7534 <pinAvailable>
   d758e:	b128      	cbz	r0, d759c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7590:	4629      	mov	r1, r5
   d7592:	4620      	mov	r0, r4
}
   d7594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7598:	f7fe ba24 	b.w	d59e4 <HAL_Pin_Mode>
   d759c:	bd38      	pop	{r3, r4, r5, pc}

000d759e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d759e:	b538      	push	{r3, r4, r5, lr}
   d75a0:	4604      	mov	r4, r0
   d75a2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d75a4:	f7fe fa26 	bl	d59f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d75a8:	28ff      	cmp	r0, #255	; 0xff
   d75aa:	d010      	beq.n	d75ce <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d75ac:	2806      	cmp	r0, #6
   d75ae:	d804      	bhi.n	d75ba <digitalWrite+0x1c>
   d75b0:	234d      	movs	r3, #77	; 0x4d
   d75b2:	fa23 f000 	lsr.w	r0, r3, r0
   d75b6:	07c3      	lsls	r3, r0, #31
   d75b8:	d409      	bmi.n	d75ce <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d75ba:	4620      	mov	r0, r4
   d75bc:	f7ff ffba 	bl	d7534 <pinAvailable>
   d75c0:	b128      	cbz	r0, d75ce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75c2:	4629      	mov	r1, r5
   d75c4:	4620      	mov	r0, r4
}
   d75c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d75ca:	f7fe ba1b 	b.w	d5a04 <HAL_GPIO_Write>
   d75ce:	bd38      	pop	{r3, r4, r5, pc}

000d75d0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d75d0:	b510      	push	{r4, lr}
   d75d2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d75d4:	f7fe fa0e 	bl	d59f4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d75d8:	3804      	subs	r0, #4
   d75da:	b2c0      	uxtb	r0, r0
   d75dc:	2801      	cmp	r0, #1
   d75de:	d908      	bls.n	d75f2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d75e0:	4620      	mov	r0, r4
   d75e2:	f7ff ffa7 	bl	d7534 <pinAvailable>
   d75e6:	b120      	cbz	r0, d75f2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75e8:	4620      	mov	r0, r4
}
   d75ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d75ee:	f7fe ba11 	b.w	d5a14 <HAL_GPIO_Read>
}
   d75f2:	2000      	movs	r0, #0
   d75f4:	bd10      	pop	{r4, pc}

000d75f6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d75f6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d75fc:	bf9c      	itt	ls
   d75fe:	340e      	addls	r4, #14
   d7600:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7602:	4620      	mov	r0, r4
   d7604:	f7ff ff96 	bl	d7534 <pinAvailable>
   d7608:	b150      	cbz	r0, d7620 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d760a:	2103      	movs	r1, #3
   d760c:	4620      	mov	r0, r4
   d760e:	f7fe f9e1 	bl	d59d4 <HAL_Validate_Pin_Function>
   d7612:	2803      	cmp	r0, #3
   d7614:	d104      	bne.n	d7620 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7616:	4620      	mov	r0, r4
}
   d7618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d761c:	f7fe ba02 	b.w	d5a24 <HAL_ADC_Read>
}
   d7620:	2000      	movs	r0, #0
   d7622:	bd10      	pop	{r4, pc}

000d7624 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   d7624:	b570      	push	{r4, r5, r6, lr}
   d7626:	4604      	mov	r4, r0
   d7628:	460d      	mov	r5, r1
   d762a:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   d762c:	f7ff ff82 	bl	d7534 <pinAvailable>
   d7630:	b198      	cbz	r0, d765a <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d7632:	2102      	movs	r1, #2
   d7634:	4620      	mov	r0, r4
   d7636:	f7fe f9cd 	bl	d59d4 <HAL_Validate_Pin_Function>
   d763a:	2802      	cmp	r0, #2
   d763c:	d10d      	bne.n	d765a <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d763e:	4620      	mov	r0, r4
   d7640:	f7fe f9d8 	bl	d59f4 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7644:	2801      	cmp	r0, #1
   d7646:	d001      	beq.n	d764c <_Z11analogWritetmm+0x28>
   d7648:	2804      	cmp	r0, #4
   d764a:	d106      	bne.n	d765a <_Z11analogWritetmm+0x36>
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d764c:	4632      	mov	r2, r6
   d764e:	4629      	mov	r1, r5
   d7650:	4620      	mov	r0, r4
    }
}
   d7652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d7656:	f7fe b9ed 	b.w	d5a34 <HAL_PWM_Write_With_Frequency_Ext>
   d765a:	bd70      	pop	{r4, r5, r6, pc}

000d765c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d765c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d765e:	4c0c      	ldr	r4, [pc, #48]	; (d7690 <_GLOBAL__sub_I_SPI+0x34>)
   d7660:	4e0c      	ldr	r6, [pc, #48]	; (d7694 <_GLOBAL__sub_I_SPI+0x38>)
   d7662:	4d0d      	ldr	r5, [pc, #52]	; (d7698 <_GLOBAL__sub_I_SPI+0x3c>)
   d7664:	2100      	movs	r1, #0
   d7666:	4620      	mov	r0, r4
   d7668:	f7fe fc7e 	bl	d5f68 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d766c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d766e:	4c0b      	ldr	r4, [pc, #44]	; (d769c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7670:	4632      	mov	r2, r6
   d7672:	4629      	mov	r1, r5
   d7674:	f000 f834 	bl	d76e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7678:	2101      	movs	r1, #1
   d767a:	4620      	mov	r0, r4
   d767c:	f7fe fc74 	bl	d5f68 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7680:	4632      	mov	r2, r6
   d7682:	4629      	mov	r1, r5
   d7684:	4620      	mov	r0, r4
   d7686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d768a:	f000 b829 	b.w	d76e0 <__aeabi_atexit>
   d768e:	bf00      	nop
   d7690:	2003e714 	.word	0x2003e714
   d7694:	2003dc48 	.word	0x2003dc48
   d7698:	000d5f59 	.word	0x000d5f59
   d769c:	2003e724 	.word	0x2003e724

000d76a0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d76a0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d76a2:	4d0b      	ldr	r5, [pc, #44]	; (d76d0 <_Z19__fetch_global_Wirev+0x30>)
   d76a4:	6829      	ldr	r1, [r5, #0]
   d76a6:	f011 0401 	ands.w	r4, r1, #1
   d76aa:	d10f      	bne.n	d76cc <_Z19__fetch_global_Wirev+0x2c>
   d76ac:	4628      	mov	r0, r5
   d76ae:	f7fc fcfc 	bl	d40aa <__cxa_guard_acquire>
   d76b2:	b158      	cbz	r0, d76cc <_Z19__fetch_global_Wirev+0x2c>
   d76b4:	4621      	mov	r1, r4
   d76b6:	4807      	ldr	r0, [pc, #28]	; (d76d4 <_Z19__fetch_global_Wirev+0x34>)
   d76b8:	f7ff f9fc 	bl	d6ab4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d76bc:	4628      	mov	r0, r5
   d76be:	f7fc fcf9 	bl	d40b4 <__cxa_guard_release>
   d76c2:	4a05      	ldr	r2, [pc, #20]	; (d76d8 <_Z19__fetch_global_Wirev+0x38>)
   d76c4:	4905      	ldr	r1, [pc, #20]	; (d76dc <_Z19__fetch_global_Wirev+0x3c>)
   d76c6:	4803      	ldr	r0, [pc, #12]	; (d76d4 <_Z19__fetch_global_Wirev+0x34>)
   d76c8:	f000 f80a 	bl	d76e0 <__aeabi_atexit>
	return wire;
}
   d76cc:	4801      	ldr	r0, [pc, #4]	; (d76d4 <_Z19__fetch_global_Wirev+0x34>)
   d76ce:	bd38      	pop	{r3, r4, r5, pc}
   d76d0:	2003e738 	.word	0x2003e738
   d76d4:	2003e73c 	.word	0x2003e73c
   d76d8:	2003dc48 	.word	0x2003dc48
   d76dc:	000d6a5d 	.word	0x000d6a5d

000d76e0 <__aeabi_atexit>:
   d76e0:	460b      	mov	r3, r1
   d76e2:	4601      	mov	r1, r0
   d76e4:	4618      	mov	r0, r3
   d76e6:	f000 bffb 	b.w	d86e0 <__cxa_atexit>

000d76ea <_ZdlPvj>:
   d76ea:	f7fc bcda 	b.w	d40a2 <_ZdlPv>
	...

000d76f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d76f0:	4b18      	ldr	r3, [pc, #96]	; (d7754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d76f2:	681a      	ldr	r2, [r3, #0]
   d76f4:	07d1      	lsls	r1, r2, #31
   d76f6:	bf5c      	itt	pl
   d76f8:	2201      	movpl	r2, #1
   d76fa:	601a      	strpl	r2, [r3, #0]
   d76fc:	4b16      	ldr	r3, [pc, #88]	; (d7758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d76fe:	681a      	ldr	r2, [r3, #0]
   d7700:	07d2      	lsls	r2, r2, #31
   d7702:	bf5c      	itt	pl
   d7704:	2201      	movpl	r2, #1
   d7706:	601a      	strpl	r2, [r3, #0]
   d7708:	4b14      	ldr	r3, [pc, #80]	; (d775c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d770a:	681a      	ldr	r2, [r3, #0]
   d770c:	07d0      	lsls	r0, r2, #31
   d770e:	bf5c      	itt	pl
   d7710:	2201      	movpl	r2, #1
   d7712:	601a      	strpl	r2, [r3, #0]
   d7714:	4b12      	ldr	r3, [pc, #72]	; (d7760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7716:	681a      	ldr	r2, [r3, #0]
   d7718:	07d1      	lsls	r1, r2, #31
   d771a:	bf5c      	itt	pl
   d771c:	2201      	movpl	r2, #1
   d771e:	601a      	strpl	r2, [r3, #0]
   d7720:	4b10      	ldr	r3, [pc, #64]	; (d7764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7722:	681a      	ldr	r2, [r3, #0]
   d7724:	07d2      	lsls	r2, r2, #31
   d7726:	bf5c      	itt	pl
   d7728:	2201      	movpl	r2, #1
   d772a:	601a      	strpl	r2, [r3, #0]
   d772c:	4b0e      	ldr	r3, [pc, #56]	; (d7768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d772e:	681a      	ldr	r2, [r3, #0]
   d7730:	07d0      	lsls	r0, r2, #31
   d7732:	bf5c      	itt	pl
   d7734:	2201      	movpl	r2, #1
   d7736:	601a      	strpl	r2, [r3, #0]
   d7738:	4b0c      	ldr	r3, [pc, #48]	; (d776c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d1      	lsls	r1, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b0a      	ldr	r3, [pc, #40]	; (d7770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d2      	lsls	r2, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4770      	bx	lr
   d7752:	bf00      	nop
   d7754:	2003e76c 	.word	0x2003e76c
   d7758:	2003e768 	.word	0x2003e768
   d775c:	2003e764 	.word	0x2003e764
   d7760:	2003e760 	.word	0x2003e760
   d7764:	2003e75c 	.word	0x2003e75c
   d7768:	2003e758 	.word	0x2003e758
   d776c:	2003e754 	.word	0x2003e754
   d7770:	2003e750 	.word	0x2003e750

000d7774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7774:	4b24      	ldr	r3, [pc, #144]	; (d7808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7776:	681a      	ldr	r2, [r3, #0]
   d7778:	07d0      	lsls	r0, r2, #31
   d777a:	bf5c      	itt	pl
   d777c:	2201      	movpl	r2, #1
   d777e:	601a      	strpl	r2, [r3, #0]
   d7780:	4b22      	ldr	r3, [pc, #136]	; (d780c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d1      	lsls	r1, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b20      	ldr	r3, [pc, #128]	; (d7810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d2      	lsls	r2, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b1e      	ldr	r3, [pc, #120]	; (d7814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d0      	lsls	r0, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4b1c      	ldr	r3, [pc, #112]	; (d7818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	07d1      	lsls	r1, r2, #31
   d77aa:	bf5c      	itt	pl
   d77ac:	2201      	movpl	r2, #1
   d77ae:	601a      	strpl	r2, [r3, #0]
   d77b0:	4b1a      	ldr	r3, [pc, #104]	; (d781c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d77b2:	681a      	ldr	r2, [r3, #0]
   d77b4:	07d2      	lsls	r2, r2, #31
   d77b6:	bf5c      	itt	pl
   d77b8:	2201      	movpl	r2, #1
   d77ba:	601a      	strpl	r2, [r3, #0]
   d77bc:	4b18      	ldr	r3, [pc, #96]	; (d7820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d77be:	681a      	ldr	r2, [r3, #0]
   d77c0:	07d0      	lsls	r0, r2, #31
   d77c2:	bf5c      	itt	pl
   d77c4:	2201      	movpl	r2, #1
   d77c6:	601a      	strpl	r2, [r3, #0]
   d77c8:	4b16      	ldr	r3, [pc, #88]	; (d7824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d77ca:	681a      	ldr	r2, [r3, #0]
   d77cc:	07d1      	lsls	r1, r2, #31
   d77ce:	bf5c      	itt	pl
   d77d0:	2201      	movpl	r2, #1
   d77d2:	601a      	strpl	r2, [r3, #0]
   d77d4:	4b14      	ldr	r3, [pc, #80]	; (d7828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d77d6:	681a      	ldr	r2, [r3, #0]
   d77d8:	07d2      	lsls	r2, r2, #31
   d77da:	bf5c      	itt	pl
   d77dc:	2201      	movpl	r2, #1
   d77de:	601a      	strpl	r2, [r3, #0]
   d77e0:	4b12      	ldr	r3, [pc, #72]	; (d782c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d77e2:	681a      	ldr	r2, [r3, #0]
   d77e4:	07d0      	lsls	r0, r2, #31
   d77e6:	bf5c      	itt	pl
   d77e8:	2201      	movpl	r2, #1
   d77ea:	601a      	strpl	r2, [r3, #0]
   d77ec:	4b10      	ldr	r3, [pc, #64]	; (d7830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d77ee:	681a      	ldr	r2, [r3, #0]
   d77f0:	07d1      	lsls	r1, r2, #31
   d77f2:	bf5c      	itt	pl
   d77f4:	2201      	movpl	r2, #1
   d77f6:	601a      	strpl	r2, [r3, #0]
   d77f8:	4b0e      	ldr	r3, [pc, #56]	; (d7834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d77fa:	681a      	ldr	r2, [r3, #0]
   d77fc:	07d2      	lsls	r2, r2, #31
   d77fe:	bf5c      	itt	pl
   d7800:	2201      	movpl	r2, #1
   d7802:	601a      	strpl	r2, [r3, #0]
   d7804:	4770      	bx	lr
   d7806:	bf00      	nop
   d7808:	2003e79c 	.word	0x2003e79c
   d780c:	2003e798 	.word	0x2003e798
   d7810:	2003e794 	.word	0x2003e794
   d7814:	2003e790 	.word	0x2003e790
   d7818:	2003e78c 	.word	0x2003e78c
   d781c:	2003e788 	.word	0x2003e788
   d7820:	2003e784 	.word	0x2003e784
   d7824:	2003e780 	.word	0x2003e780
   d7828:	2003e77c 	.word	0x2003e77c
   d782c:	2003e778 	.word	0x2003e778
   d7830:	2003e774 	.word	0x2003e774
   d7834:	2003e770 	.word	0x2003e770

000d7838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7838:	4b24      	ldr	r3, [pc, #144]	; (d78cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d0      	lsls	r0, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4b22      	ldr	r3, [pc, #136]	; (d78d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7846:	681a      	ldr	r2, [r3, #0]
   d7848:	07d1      	lsls	r1, r2, #31
   d784a:	bf5c      	itt	pl
   d784c:	2201      	movpl	r2, #1
   d784e:	601a      	strpl	r2, [r3, #0]
   d7850:	4b20      	ldr	r3, [pc, #128]	; (d78d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7852:	681a      	ldr	r2, [r3, #0]
   d7854:	07d2      	lsls	r2, r2, #31
   d7856:	bf5c      	itt	pl
   d7858:	2201      	movpl	r2, #1
   d785a:	601a      	strpl	r2, [r3, #0]
   d785c:	4b1e      	ldr	r3, [pc, #120]	; (d78d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d785e:	681a      	ldr	r2, [r3, #0]
   d7860:	07d0      	lsls	r0, r2, #31
   d7862:	bf5c      	itt	pl
   d7864:	2201      	movpl	r2, #1
   d7866:	601a      	strpl	r2, [r3, #0]
   d7868:	4b1c      	ldr	r3, [pc, #112]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d786a:	681a      	ldr	r2, [r3, #0]
   d786c:	07d1      	lsls	r1, r2, #31
   d786e:	bf5c      	itt	pl
   d7870:	2201      	movpl	r2, #1
   d7872:	601a      	strpl	r2, [r3, #0]
   d7874:	4b1a      	ldr	r3, [pc, #104]	; (d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d2      	lsls	r2, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b18      	ldr	r3, [pc, #96]	; (d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d0      	lsls	r0, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4b16      	ldr	r3, [pc, #88]	; (d78e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d788e:	681a      	ldr	r2, [r3, #0]
   d7890:	07d1      	lsls	r1, r2, #31
   d7892:	bf5c      	itt	pl
   d7894:	2201      	movpl	r2, #1
   d7896:	601a      	strpl	r2, [r3, #0]
   d7898:	4b14      	ldr	r3, [pc, #80]	; (d78ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d789a:	681a      	ldr	r2, [r3, #0]
   d789c:	07d2      	lsls	r2, r2, #31
   d789e:	bf5c      	itt	pl
   d78a0:	2201      	movpl	r2, #1
   d78a2:	601a      	strpl	r2, [r3, #0]
   d78a4:	4b12      	ldr	r3, [pc, #72]	; (d78f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d78a6:	681a      	ldr	r2, [r3, #0]
   d78a8:	07d0      	lsls	r0, r2, #31
   d78aa:	bf5c      	itt	pl
   d78ac:	2201      	movpl	r2, #1
   d78ae:	601a      	strpl	r2, [r3, #0]
   d78b0:	4b10      	ldr	r3, [pc, #64]	; (d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d78b2:	681a      	ldr	r2, [r3, #0]
   d78b4:	07d1      	lsls	r1, r2, #31
   d78b6:	bf5c      	itt	pl
   d78b8:	2201      	movpl	r2, #1
   d78ba:	601a      	strpl	r2, [r3, #0]
   d78bc:	4b0e      	ldr	r3, [pc, #56]	; (d78f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d78be:	681a      	ldr	r2, [r3, #0]
   d78c0:	07d2      	lsls	r2, r2, #31
   d78c2:	bf5c      	itt	pl
   d78c4:	2201      	movpl	r2, #1
   d78c6:	601a      	strpl	r2, [r3, #0]
   d78c8:	4770      	bx	lr
   d78ca:	bf00      	nop
   d78cc:	2003e7cc 	.word	0x2003e7cc
   d78d0:	2003e7c8 	.word	0x2003e7c8
   d78d4:	2003e7c4 	.word	0x2003e7c4
   d78d8:	2003e7c0 	.word	0x2003e7c0
   d78dc:	2003e7bc 	.word	0x2003e7bc
   d78e0:	2003e7b8 	.word	0x2003e7b8
   d78e4:	2003e7b4 	.word	0x2003e7b4
   d78e8:	2003e7b0 	.word	0x2003e7b0
   d78ec:	2003e7ac 	.word	0x2003e7ac
   d78f0:	2003e7a8 	.word	0x2003e7a8
   d78f4:	2003e7a4 	.word	0x2003e7a4
   d78f8:	2003e7a0 	.word	0x2003e7a0

000d78fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d78fc:	4b18      	ldr	r3, [pc, #96]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d1      	lsls	r1, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b16      	ldr	r3, [pc, #88]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d2      	lsls	r2, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b14      	ldr	r3, [pc, #80]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d0      	lsls	r0, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b12      	ldr	r3, [pc, #72]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d1      	lsls	r1, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4b10      	ldr	r3, [pc, #64]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d2      	lsls	r2, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b0e      	ldr	r3, [pc, #56]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d0      	lsls	r0, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4b0c      	ldr	r3, [pc, #48]	; (d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7946:	681a      	ldr	r2, [r3, #0]
   d7948:	07d1      	lsls	r1, r2, #31
   d794a:	bf5c      	itt	pl
   d794c:	2201      	movpl	r2, #1
   d794e:	601a      	strpl	r2, [r3, #0]
   d7950:	4b0a      	ldr	r3, [pc, #40]	; (d797c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7952:	681a      	ldr	r2, [r3, #0]
   d7954:	07d2      	lsls	r2, r2, #31
   d7956:	bf5c      	itt	pl
   d7958:	2201      	movpl	r2, #1
   d795a:	601a      	strpl	r2, [r3, #0]
   d795c:	4770      	bx	lr
   d795e:	bf00      	nop
   d7960:	2003e7ec 	.word	0x2003e7ec
   d7964:	2003e7e8 	.word	0x2003e7e8
   d7968:	2003e7e4 	.word	0x2003e7e4
   d796c:	2003e7e0 	.word	0x2003e7e0
   d7970:	2003e7dc 	.word	0x2003e7dc
   d7974:	2003e7d8 	.word	0x2003e7d8
   d7978:	2003e7d4 	.word	0x2003e7d4
   d797c:	2003e7d0 	.word	0x2003e7d0

000d7980 <__aeabi_drsub>:
   d7980:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7984:	e002      	b.n	d798c <__adddf3>
   d7986:	bf00      	nop

000d7988 <__aeabi_dsub>:
   d7988:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d798c <__adddf3>:
   d798c:	b530      	push	{r4, r5, lr}
   d798e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7992:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7996:	ea94 0f05 	teq	r4, r5
   d799a:	bf08      	it	eq
   d799c:	ea90 0f02 	teqeq	r0, r2
   d79a0:	bf1f      	itttt	ne
   d79a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d79a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d79aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d79ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d79b2:	f000 80e2 	beq.w	d7b7a <__adddf3+0x1ee>
   d79b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d79ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d79be:	bfb8      	it	lt
   d79c0:	426d      	neglt	r5, r5
   d79c2:	dd0c      	ble.n	d79de <__adddf3+0x52>
   d79c4:	442c      	add	r4, r5
   d79c6:	ea80 0202 	eor.w	r2, r0, r2
   d79ca:	ea81 0303 	eor.w	r3, r1, r3
   d79ce:	ea82 0000 	eor.w	r0, r2, r0
   d79d2:	ea83 0101 	eor.w	r1, r3, r1
   d79d6:	ea80 0202 	eor.w	r2, r0, r2
   d79da:	ea81 0303 	eor.w	r3, r1, r3
   d79de:	2d36      	cmp	r5, #54	; 0x36
   d79e0:	bf88      	it	hi
   d79e2:	bd30      	pophi	{r4, r5, pc}
   d79e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d79e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d79ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d79f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d79f4:	d002      	beq.n	d79fc <__adddf3+0x70>
   d79f6:	4240      	negs	r0, r0
   d79f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d79fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a08:	d002      	beq.n	d7a10 <__adddf3+0x84>
   d7a0a:	4252      	negs	r2, r2
   d7a0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a10:	ea94 0f05 	teq	r4, r5
   d7a14:	f000 80a7 	beq.w	d7b66 <__adddf3+0x1da>
   d7a18:	f1a4 0401 	sub.w	r4, r4, #1
   d7a1c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7a20:	db0d      	blt.n	d7a3e <__adddf3+0xb2>
   d7a22:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7a26:	fa22 f205 	lsr.w	r2, r2, r5
   d7a2a:	1880      	adds	r0, r0, r2
   d7a2c:	f141 0100 	adc.w	r1, r1, #0
   d7a30:	fa03 f20e 	lsl.w	r2, r3, lr
   d7a34:	1880      	adds	r0, r0, r2
   d7a36:	fa43 f305 	asr.w	r3, r3, r5
   d7a3a:	4159      	adcs	r1, r3
   d7a3c:	e00e      	b.n	d7a5c <__adddf3+0xd0>
   d7a3e:	f1a5 0520 	sub.w	r5, r5, #32
   d7a42:	f10e 0e20 	add.w	lr, lr, #32
   d7a46:	2a01      	cmp	r2, #1
   d7a48:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7a4c:	bf28      	it	cs
   d7a4e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7a52:	fa43 f305 	asr.w	r3, r3, r5
   d7a56:	18c0      	adds	r0, r0, r3
   d7a58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7a5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a60:	d507      	bpl.n	d7a72 <__adddf3+0xe6>
   d7a62:	f04f 0e00 	mov.w	lr, #0
   d7a66:	f1dc 0c00 	rsbs	ip, ip, #0
   d7a6a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7a6e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7a72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7a76:	d31b      	bcc.n	d7ab0 <__adddf3+0x124>
   d7a78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7a7c:	d30c      	bcc.n	d7a98 <__adddf3+0x10c>
   d7a7e:	0849      	lsrs	r1, r1, #1
   d7a80:	ea5f 0030 	movs.w	r0, r0, rrx
   d7a84:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7a88:	f104 0401 	add.w	r4, r4, #1
   d7a8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7a90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7a94:	f080 809a 	bcs.w	d7bcc <__adddf3+0x240>
   d7a98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7a9c:	bf08      	it	eq
   d7a9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7aa2:	f150 0000 	adcs.w	r0, r0, #0
   d7aa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7aaa:	ea41 0105 	orr.w	r1, r1, r5
   d7aae:	bd30      	pop	{r4, r5, pc}
   d7ab0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ab4:	4140      	adcs	r0, r0
   d7ab6:	eb41 0101 	adc.w	r1, r1, r1
   d7aba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7abe:	f1a4 0401 	sub.w	r4, r4, #1
   d7ac2:	d1e9      	bne.n	d7a98 <__adddf3+0x10c>
   d7ac4:	f091 0f00 	teq	r1, #0
   d7ac8:	bf04      	itt	eq
   d7aca:	4601      	moveq	r1, r0
   d7acc:	2000      	moveq	r0, #0
   d7ace:	fab1 f381 	clz	r3, r1
   d7ad2:	bf08      	it	eq
   d7ad4:	3320      	addeq	r3, #32
   d7ad6:	f1a3 030b 	sub.w	r3, r3, #11
   d7ada:	f1b3 0220 	subs.w	r2, r3, #32
   d7ade:	da0c      	bge.n	d7afa <__adddf3+0x16e>
   d7ae0:	320c      	adds	r2, #12
   d7ae2:	dd08      	ble.n	d7af6 <__adddf3+0x16a>
   d7ae4:	f102 0c14 	add.w	ip, r2, #20
   d7ae8:	f1c2 020c 	rsb	r2, r2, #12
   d7aec:	fa01 f00c 	lsl.w	r0, r1, ip
   d7af0:	fa21 f102 	lsr.w	r1, r1, r2
   d7af4:	e00c      	b.n	d7b10 <__adddf3+0x184>
   d7af6:	f102 0214 	add.w	r2, r2, #20
   d7afa:	bfd8      	it	le
   d7afc:	f1c2 0c20 	rsble	ip, r2, #32
   d7b00:	fa01 f102 	lsl.w	r1, r1, r2
   d7b04:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b08:	bfdc      	itt	le
   d7b0a:	ea41 010c 	orrle.w	r1, r1, ip
   d7b0e:	4090      	lslle	r0, r2
   d7b10:	1ae4      	subs	r4, r4, r3
   d7b12:	bfa2      	ittt	ge
   d7b14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b18:	4329      	orrge	r1, r5
   d7b1a:	bd30      	popge	{r4, r5, pc}
   d7b1c:	ea6f 0404 	mvn.w	r4, r4
   d7b20:	3c1f      	subs	r4, #31
   d7b22:	da1c      	bge.n	d7b5e <__adddf3+0x1d2>
   d7b24:	340c      	adds	r4, #12
   d7b26:	dc0e      	bgt.n	d7b46 <__adddf3+0x1ba>
   d7b28:	f104 0414 	add.w	r4, r4, #20
   d7b2c:	f1c4 0220 	rsb	r2, r4, #32
   d7b30:	fa20 f004 	lsr.w	r0, r0, r4
   d7b34:	fa01 f302 	lsl.w	r3, r1, r2
   d7b38:	ea40 0003 	orr.w	r0, r0, r3
   d7b3c:	fa21 f304 	lsr.w	r3, r1, r4
   d7b40:	ea45 0103 	orr.w	r1, r5, r3
   d7b44:	bd30      	pop	{r4, r5, pc}
   d7b46:	f1c4 040c 	rsb	r4, r4, #12
   d7b4a:	f1c4 0220 	rsb	r2, r4, #32
   d7b4e:	fa20 f002 	lsr.w	r0, r0, r2
   d7b52:	fa01 f304 	lsl.w	r3, r1, r4
   d7b56:	ea40 0003 	orr.w	r0, r0, r3
   d7b5a:	4629      	mov	r1, r5
   d7b5c:	bd30      	pop	{r4, r5, pc}
   d7b5e:	fa21 f004 	lsr.w	r0, r1, r4
   d7b62:	4629      	mov	r1, r5
   d7b64:	bd30      	pop	{r4, r5, pc}
   d7b66:	f094 0f00 	teq	r4, #0
   d7b6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7b6e:	bf06      	itte	eq
   d7b70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7b74:	3401      	addeq	r4, #1
   d7b76:	3d01      	subne	r5, #1
   d7b78:	e74e      	b.n	d7a18 <__adddf3+0x8c>
   d7b7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7b7e:	bf18      	it	ne
   d7b80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b84:	d029      	beq.n	d7bda <__adddf3+0x24e>
   d7b86:	ea94 0f05 	teq	r4, r5
   d7b8a:	bf08      	it	eq
   d7b8c:	ea90 0f02 	teqeq	r0, r2
   d7b90:	d005      	beq.n	d7b9e <__adddf3+0x212>
   d7b92:	ea54 0c00 	orrs.w	ip, r4, r0
   d7b96:	bf04      	itt	eq
   d7b98:	4619      	moveq	r1, r3
   d7b9a:	4610      	moveq	r0, r2
   d7b9c:	bd30      	pop	{r4, r5, pc}
   d7b9e:	ea91 0f03 	teq	r1, r3
   d7ba2:	bf1e      	ittt	ne
   d7ba4:	2100      	movne	r1, #0
   d7ba6:	2000      	movne	r0, #0
   d7ba8:	bd30      	popne	{r4, r5, pc}
   d7baa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7bae:	d105      	bne.n	d7bbc <__adddf3+0x230>
   d7bb0:	0040      	lsls	r0, r0, #1
   d7bb2:	4149      	adcs	r1, r1
   d7bb4:	bf28      	it	cs
   d7bb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7bba:	bd30      	pop	{r4, r5, pc}
   d7bbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7bc0:	bf3c      	itt	cc
   d7bc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7bc6:	bd30      	popcc	{r4, r5, pc}
   d7bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bcc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7bd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7bd4:	f04f 0000 	mov.w	r0, #0
   d7bd8:	bd30      	pop	{r4, r5, pc}
   d7bda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7bde:	bf1a      	itte	ne
   d7be0:	4619      	movne	r1, r3
   d7be2:	4610      	movne	r0, r2
   d7be4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7be8:	bf1c      	itt	ne
   d7bea:	460b      	movne	r3, r1
   d7bec:	4602      	movne	r2, r0
   d7bee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7bf2:	bf06      	itte	eq
   d7bf4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7bf8:	ea91 0f03 	teqeq	r1, r3
   d7bfc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7c00:	bd30      	pop	{r4, r5, pc}
   d7c02:	bf00      	nop

000d7c04 <__aeabi_ui2d>:
   d7c04:	f090 0f00 	teq	r0, #0
   d7c08:	bf04      	itt	eq
   d7c0a:	2100      	moveq	r1, #0
   d7c0c:	4770      	bxeq	lr
   d7c0e:	b530      	push	{r4, r5, lr}
   d7c10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c18:	f04f 0500 	mov.w	r5, #0
   d7c1c:	f04f 0100 	mov.w	r1, #0
   d7c20:	e750      	b.n	d7ac4 <__adddf3+0x138>
   d7c22:	bf00      	nop

000d7c24 <__aeabi_i2d>:
   d7c24:	f090 0f00 	teq	r0, #0
   d7c28:	bf04      	itt	eq
   d7c2a:	2100      	moveq	r1, #0
   d7c2c:	4770      	bxeq	lr
   d7c2e:	b530      	push	{r4, r5, lr}
   d7c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7c3c:	bf48      	it	mi
   d7c3e:	4240      	negmi	r0, r0
   d7c40:	f04f 0100 	mov.w	r1, #0
   d7c44:	e73e      	b.n	d7ac4 <__adddf3+0x138>
   d7c46:	bf00      	nop

000d7c48 <__aeabi_f2d>:
   d7c48:	0042      	lsls	r2, r0, #1
   d7c4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7c4e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7c52:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7c56:	bf1f      	itttt	ne
   d7c58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7c5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7c64:	4770      	bxne	lr
   d7c66:	f092 0f00 	teq	r2, #0
   d7c6a:	bf14      	ite	ne
   d7c6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7c70:	4770      	bxeq	lr
   d7c72:	b530      	push	{r4, r5, lr}
   d7c74:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7c78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7c80:	e720      	b.n	d7ac4 <__adddf3+0x138>
   d7c82:	bf00      	nop

000d7c84 <__aeabi_ul2d>:
   d7c84:	ea50 0201 	orrs.w	r2, r0, r1
   d7c88:	bf08      	it	eq
   d7c8a:	4770      	bxeq	lr
   d7c8c:	b530      	push	{r4, r5, lr}
   d7c8e:	f04f 0500 	mov.w	r5, #0
   d7c92:	e00a      	b.n	d7caa <__aeabi_l2d+0x16>

000d7c94 <__aeabi_l2d>:
   d7c94:	ea50 0201 	orrs.w	r2, r0, r1
   d7c98:	bf08      	it	eq
   d7c9a:	4770      	bxeq	lr
   d7c9c:	b530      	push	{r4, r5, lr}
   d7c9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7ca2:	d502      	bpl.n	d7caa <__aeabi_l2d+0x16>
   d7ca4:	4240      	negs	r0, r0
   d7ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7caa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7cae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7cb2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7cb6:	f43f aedc 	beq.w	d7a72 <__adddf3+0xe6>
   d7cba:	f04f 0203 	mov.w	r2, #3
   d7cbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cc2:	bf18      	it	ne
   d7cc4:	3203      	addne	r2, #3
   d7cc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7cca:	bf18      	it	ne
   d7ccc:	3203      	addne	r2, #3
   d7cce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7cd2:	f1c2 0320 	rsb	r3, r2, #32
   d7cd6:	fa00 fc03 	lsl.w	ip, r0, r3
   d7cda:	fa20 f002 	lsr.w	r0, r0, r2
   d7cde:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ce2:	ea40 000e 	orr.w	r0, r0, lr
   d7ce6:	fa21 f102 	lsr.w	r1, r1, r2
   d7cea:	4414      	add	r4, r2
   d7cec:	e6c1      	b.n	d7a72 <__adddf3+0xe6>
   d7cee:	bf00      	nop

000d7cf0 <__aeabi_dmul>:
   d7cf0:	b570      	push	{r4, r5, r6, lr}
   d7cf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7cf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7cfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cfe:	bf1d      	ittte	ne
   d7d00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7d04:	ea94 0f0c 	teqne	r4, ip
   d7d08:	ea95 0f0c 	teqne	r5, ip
   d7d0c:	f000 f8de 	bleq	d7ecc <__aeabi_dmul+0x1dc>
   d7d10:	442c      	add	r4, r5
   d7d12:	ea81 0603 	eor.w	r6, r1, r3
   d7d16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7d1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7d1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7d22:	bf18      	it	ne
   d7d24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7d28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7d30:	d038      	beq.n	d7da4 <__aeabi_dmul+0xb4>
   d7d32:	fba0 ce02 	umull	ip, lr, r0, r2
   d7d36:	f04f 0500 	mov.w	r5, #0
   d7d3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7d3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7d42:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7d46:	f04f 0600 	mov.w	r6, #0
   d7d4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7d4e:	f09c 0f00 	teq	ip, #0
   d7d52:	bf18      	it	ne
   d7d54:	f04e 0e01 	orrne.w	lr, lr, #1
   d7d58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7d5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7d64:	d204      	bcs.n	d7d70 <__aeabi_dmul+0x80>
   d7d66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7d6a:	416d      	adcs	r5, r5
   d7d6c:	eb46 0606 	adc.w	r6, r6, r6
   d7d70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7d74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7d78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7d7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7d80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7d84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7d88:	bf88      	it	hi
   d7d8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7d8e:	d81e      	bhi.n	d7dce <__aeabi_dmul+0xde>
   d7d90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7d94:	bf08      	it	eq
   d7d96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7d9a:	f150 0000 	adcs.w	r0, r0, #0
   d7d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7da2:	bd70      	pop	{r4, r5, r6, pc}
   d7da4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7da8:	ea46 0101 	orr.w	r1, r6, r1
   d7dac:	ea40 0002 	orr.w	r0, r0, r2
   d7db0:	ea81 0103 	eor.w	r1, r1, r3
   d7db4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7db8:	bfc2      	ittt	gt
   d7dba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7dbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7dc2:	bd70      	popgt	{r4, r5, r6, pc}
   d7dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7dc8:	f04f 0e00 	mov.w	lr, #0
   d7dcc:	3c01      	subs	r4, #1
   d7dce:	f300 80ab 	bgt.w	d7f28 <__aeabi_dmul+0x238>
   d7dd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7dd6:	bfde      	ittt	le
   d7dd8:	2000      	movle	r0, #0
   d7dda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7dde:	bd70      	pople	{r4, r5, r6, pc}
   d7de0:	f1c4 0400 	rsb	r4, r4, #0
   d7de4:	3c20      	subs	r4, #32
   d7de6:	da35      	bge.n	d7e54 <__aeabi_dmul+0x164>
   d7de8:	340c      	adds	r4, #12
   d7dea:	dc1b      	bgt.n	d7e24 <__aeabi_dmul+0x134>
   d7dec:	f104 0414 	add.w	r4, r4, #20
   d7df0:	f1c4 0520 	rsb	r5, r4, #32
   d7df4:	fa00 f305 	lsl.w	r3, r0, r5
   d7df8:	fa20 f004 	lsr.w	r0, r0, r4
   d7dfc:	fa01 f205 	lsl.w	r2, r1, r5
   d7e00:	ea40 0002 	orr.w	r0, r0, r2
   d7e04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e10:	fa21 f604 	lsr.w	r6, r1, r4
   d7e14:	eb42 0106 	adc.w	r1, r2, r6
   d7e18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e1c:	bf08      	it	eq
   d7e1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e22:	bd70      	pop	{r4, r5, r6, pc}
   d7e24:	f1c4 040c 	rsb	r4, r4, #12
   d7e28:	f1c4 0520 	rsb	r5, r4, #32
   d7e2c:	fa00 f304 	lsl.w	r3, r0, r4
   d7e30:	fa20 f005 	lsr.w	r0, r0, r5
   d7e34:	fa01 f204 	lsl.w	r2, r1, r4
   d7e38:	ea40 0002 	orr.w	r0, r0, r2
   d7e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e44:	f141 0100 	adc.w	r1, r1, #0
   d7e48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e4c:	bf08      	it	eq
   d7e4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e52:	bd70      	pop	{r4, r5, r6, pc}
   d7e54:	f1c4 0520 	rsb	r5, r4, #32
   d7e58:	fa00 f205 	lsl.w	r2, r0, r5
   d7e5c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7e60:	fa20 f304 	lsr.w	r3, r0, r4
   d7e64:	fa01 f205 	lsl.w	r2, r1, r5
   d7e68:	ea43 0302 	orr.w	r3, r3, r2
   d7e6c:	fa21 f004 	lsr.w	r0, r1, r4
   d7e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e74:	fa21 f204 	lsr.w	r2, r1, r4
   d7e78:	ea20 0002 	bic.w	r0, r0, r2
   d7e7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7e80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e84:	bf08      	it	eq
   d7e86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e8a:	bd70      	pop	{r4, r5, r6, pc}
   d7e8c:	f094 0f00 	teq	r4, #0
   d7e90:	d10f      	bne.n	d7eb2 <__aeabi_dmul+0x1c2>
   d7e92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7e96:	0040      	lsls	r0, r0, #1
   d7e98:	eb41 0101 	adc.w	r1, r1, r1
   d7e9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ea0:	bf08      	it	eq
   d7ea2:	3c01      	subeq	r4, #1
   d7ea4:	d0f7      	beq.n	d7e96 <__aeabi_dmul+0x1a6>
   d7ea6:	ea41 0106 	orr.w	r1, r1, r6
   d7eaa:	f095 0f00 	teq	r5, #0
   d7eae:	bf18      	it	ne
   d7eb0:	4770      	bxne	lr
   d7eb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7eb6:	0052      	lsls	r2, r2, #1
   d7eb8:	eb43 0303 	adc.w	r3, r3, r3
   d7ebc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ec0:	bf08      	it	eq
   d7ec2:	3d01      	subeq	r5, #1
   d7ec4:	d0f7      	beq.n	d7eb6 <__aeabi_dmul+0x1c6>
   d7ec6:	ea43 0306 	orr.w	r3, r3, r6
   d7eca:	4770      	bx	lr
   d7ecc:	ea94 0f0c 	teq	r4, ip
   d7ed0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ed4:	bf18      	it	ne
   d7ed6:	ea95 0f0c 	teqne	r5, ip
   d7eda:	d00c      	beq.n	d7ef6 <__aeabi_dmul+0x206>
   d7edc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7ee0:	bf18      	it	ne
   d7ee2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ee6:	d1d1      	bne.n	d7e8c <__aeabi_dmul+0x19c>
   d7ee8:	ea81 0103 	eor.w	r1, r1, r3
   d7eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ef0:	f04f 0000 	mov.w	r0, #0
   d7ef4:	bd70      	pop	{r4, r5, r6, pc}
   d7ef6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7efa:	bf06      	itte	eq
   d7efc:	4610      	moveq	r0, r2
   d7efe:	4619      	moveq	r1, r3
   d7f00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f04:	d019      	beq.n	d7f3a <__aeabi_dmul+0x24a>
   d7f06:	ea94 0f0c 	teq	r4, ip
   d7f0a:	d102      	bne.n	d7f12 <__aeabi_dmul+0x222>
   d7f0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f10:	d113      	bne.n	d7f3a <__aeabi_dmul+0x24a>
   d7f12:	ea95 0f0c 	teq	r5, ip
   d7f16:	d105      	bne.n	d7f24 <__aeabi_dmul+0x234>
   d7f18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7f1c:	bf1c      	itt	ne
   d7f1e:	4610      	movne	r0, r2
   d7f20:	4619      	movne	r1, r3
   d7f22:	d10a      	bne.n	d7f3a <__aeabi_dmul+0x24a>
   d7f24:	ea81 0103 	eor.w	r1, r1, r3
   d7f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f34:	f04f 0000 	mov.w	r0, #0
   d7f38:	bd70      	pop	{r4, r5, r6, pc}
   d7f3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7f42:	bd70      	pop	{r4, r5, r6, pc}

000d7f44 <__aeabi_ddiv>:
   d7f44:	b570      	push	{r4, r5, r6, lr}
   d7f46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f52:	bf1d      	ittte	ne
   d7f54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7f58:	ea94 0f0c 	teqne	r4, ip
   d7f5c:	ea95 0f0c 	teqne	r5, ip
   d7f60:	f000 f8a7 	bleq	d80b2 <__aeabi_ddiv+0x16e>
   d7f64:	eba4 0405 	sub.w	r4, r4, r5
   d7f68:	ea81 0e03 	eor.w	lr, r1, r3
   d7f6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7f70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f74:	f000 8088 	beq.w	d8088 <__aeabi_ddiv+0x144>
   d7f78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7f80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7f84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7f88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7f8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7f90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7f94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7f98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7f9c:	429d      	cmp	r5, r3
   d7f9e:	bf08      	it	eq
   d7fa0:	4296      	cmpeq	r6, r2
   d7fa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7fa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7faa:	d202      	bcs.n	d7fb2 <__aeabi_ddiv+0x6e>
   d7fac:	085b      	lsrs	r3, r3, #1
   d7fae:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fb2:	1ab6      	subs	r6, r6, r2
   d7fb4:	eb65 0503 	sbc.w	r5, r5, r3
   d7fb8:	085b      	lsrs	r3, r3, #1
   d7fba:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7fc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7fc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fce:	bf22      	ittt	cs
   d7fd0:	1ab6      	subcs	r6, r6, r2
   d7fd2:	4675      	movcs	r5, lr
   d7fd4:	ea40 000c 	orrcs.w	r0, r0, ip
   d7fd8:	085b      	lsrs	r3, r3, #1
   d7fda:	ea4f 0232 	mov.w	r2, r2, rrx
   d7fde:	ebb6 0e02 	subs.w	lr, r6, r2
   d7fe2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7fe6:	bf22      	ittt	cs
   d7fe8:	1ab6      	subcs	r6, r6, r2
   d7fea:	4675      	movcs	r5, lr
   d7fec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ff0:	085b      	lsrs	r3, r3, #1
   d7ff2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ff6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ffa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ffe:	bf22      	ittt	cs
   d8000:	1ab6      	subcs	r6, r6, r2
   d8002:	4675      	movcs	r5, lr
   d8004:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8008:	085b      	lsrs	r3, r3, #1
   d800a:	ea4f 0232 	mov.w	r2, r2, rrx
   d800e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8012:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8016:	bf22      	ittt	cs
   d8018:	1ab6      	subcs	r6, r6, r2
   d801a:	4675      	movcs	r5, lr
   d801c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8020:	ea55 0e06 	orrs.w	lr, r5, r6
   d8024:	d018      	beq.n	d8058 <__aeabi_ddiv+0x114>
   d8026:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d802a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d802e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8032:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8036:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d803a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d803e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8042:	d1c0      	bne.n	d7fc6 <__aeabi_ddiv+0x82>
   d8044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8048:	d10b      	bne.n	d8062 <__aeabi_ddiv+0x11e>
   d804a:	ea41 0100 	orr.w	r1, r1, r0
   d804e:	f04f 0000 	mov.w	r0, #0
   d8052:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8056:	e7b6      	b.n	d7fc6 <__aeabi_ddiv+0x82>
   d8058:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d805c:	bf04      	itt	eq
   d805e:	4301      	orreq	r1, r0
   d8060:	2000      	moveq	r0, #0
   d8062:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8066:	bf88      	it	hi
   d8068:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d806c:	f63f aeaf 	bhi.w	d7dce <__aeabi_dmul+0xde>
   d8070:	ebb5 0c03 	subs.w	ip, r5, r3
   d8074:	bf04      	itt	eq
   d8076:	ebb6 0c02 	subseq.w	ip, r6, r2
   d807a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d807e:	f150 0000 	adcs.w	r0, r0, #0
   d8082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8086:	bd70      	pop	{r4, r5, r6, pc}
   d8088:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d808c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8090:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8094:	bfc2      	ittt	gt
   d8096:	ebd4 050c 	rsbsgt	r5, r4, ip
   d809a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d809e:	bd70      	popgt	{r4, r5, r6, pc}
   d80a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80a4:	f04f 0e00 	mov.w	lr, #0
   d80a8:	3c01      	subs	r4, #1
   d80aa:	e690      	b.n	d7dce <__aeabi_dmul+0xde>
   d80ac:	ea45 0e06 	orr.w	lr, r5, r6
   d80b0:	e68d      	b.n	d7dce <__aeabi_dmul+0xde>
   d80b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d80b6:	ea94 0f0c 	teq	r4, ip
   d80ba:	bf08      	it	eq
   d80bc:	ea95 0f0c 	teqeq	r5, ip
   d80c0:	f43f af3b 	beq.w	d7f3a <__aeabi_dmul+0x24a>
   d80c4:	ea94 0f0c 	teq	r4, ip
   d80c8:	d10a      	bne.n	d80e0 <__aeabi_ddiv+0x19c>
   d80ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d80ce:	f47f af34 	bne.w	d7f3a <__aeabi_dmul+0x24a>
   d80d2:	ea95 0f0c 	teq	r5, ip
   d80d6:	f47f af25 	bne.w	d7f24 <__aeabi_dmul+0x234>
   d80da:	4610      	mov	r0, r2
   d80dc:	4619      	mov	r1, r3
   d80de:	e72c      	b.n	d7f3a <__aeabi_dmul+0x24a>
   d80e0:	ea95 0f0c 	teq	r5, ip
   d80e4:	d106      	bne.n	d80f4 <__aeabi_ddiv+0x1b0>
   d80e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d80ea:	f43f aefd 	beq.w	d7ee8 <__aeabi_dmul+0x1f8>
   d80ee:	4610      	mov	r0, r2
   d80f0:	4619      	mov	r1, r3
   d80f2:	e722      	b.n	d7f3a <__aeabi_dmul+0x24a>
   d80f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80f8:	bf18      	it	ne
   d80fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80fe:	f47f aec5 	bne.w	d7e8c <__aeabi_dmul+0x19c>
   d8102:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8106:	f47f af0d 	bne.w	d7f24 <__aeabi_dmul+0x234>
   d810a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d810e:	f47f aeeb 	bne.w	d7ee8 <__aeabi_dmul+0x1f8>
   d8112:	e712      	b.n	d7f3a <__aeabi_dmul+0x24a>

000d8114 <__gedf2>:
   d8114:	f04f 3cff 	mov.w	ip, #4294967295
   d8118:	e006      	b.n	d8128 <__cmpdf2+0x4>
   d811a:	bf00      	nop

000d811c <__ledf2>:
   d811c:	f04f 0c01 	mov.w	ip, #1
   d8120:	e002      	b.n	d8128 <__cmpdf2+0x4>
   d8122:	bf00      	nop

000d8124 <__cmpdf2>:
   d8124:	f04f 0c01 	mov.w	ip, #1
   d8128:	f84d cd04 	str.w	ip, [sp, #-4]!
   d812c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8134:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8138:	bf18      	it	ne
   d813a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d813e:	d01b      	beq.n	d8178 <__cmpdf2+0x54>
   d8140:	b001      	add	sp, #4
   d8142:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8146:	bf0c      	ite	eq
   d8148:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d814c:	ea91 0f03 	teqne	r1, r3
   d8150:	bf02      	ittt	eq
   d8152:	ea90 0f02 	teqeq	r0, r2
   d8156:	2000      	moveq	r0, #0
   d8158:	4770      	bxeq	lr
   d815a:	f110 0f00 	cmn.w	r0, #0
   d815e:	ea91 0f03 	teq	r1, r3
   d8162:	bf58      	it	pl
   d8164:	4299      	cmppl	r1, r3
   d8166:	bf08      	it	eq
   d8168:	4290      	cmpeq	r0, r2
   d816a:	bf2c      	ite	cs
   d816c:	17d8      	asrcs	r0, r3, #31
   d816e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8172:	f040 0001 	orr.w	r0, r0, #1
   d8176:	4770      	bx	lr
   d8178:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d817c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8180:	d102      	bne.n	d8188 <__cmpdf2+0x64>
   d8182:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8186:	d107      	bne.n	d8198 <__cmpdf2+0x74>
   d8188:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d818c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8190:	d1d6      	bne.n	d8140 <__cmpdf2+0x1c>
   d8192:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8196:	d0d3      	beq.n	d8140 <__cmpdf2+0x1c>
   d8198:	f85d 0b04 	ldr.w	r0, [sp], #4
   d819c:	4770      	bx	lr
   d819e:	bf00      	nop

000d81a0 <__aeabi_cdrcmple>:
   d81a0:	4684      	mov	ip, r0
   d81a2:	4610      	mov	r0, r2
   d81a4:	4662      	mov	r2, ip
   d81a6:	468c      	mov	ip, r1
   d81a8:	4619      	mov	r1, r3
   d81aa:	4663      	mov	r3, ip
   d81ac:	e000      	b.n	d81b0 <__aeabi_cdcmpeq>
   d81ae:	bf00      	nop

000d81b0 <__aeabi_cdcmpeq>:
   d81b0:	b501      	push	{r0, lr}
   d81b2:	f7ff ffb7 	bl	d8124 <__cmpdf2>
   d81b6:	2800      	cmp	r0, #0
   d81b8:	bf48      	it	mi
   d81ba:	f110 0f00 	cmnmi.w	r0, #0
   d81be:	bd01      	pop	{r0, pc}

000d81c0 <__aeabi_dcmpeq>:
   d81c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81c4:	f7ff fff4 	bl	d81b0 <__aeabi_cdcmpeq>
   d81c8:	bf0c      	ite	eq
   d81ca:	2001      	moveq	r0, #1
   d81cc:	2000      	movne	r0, #0
   d81ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d81d2:	bf00      	nop

000d81d4 <__aeabi_dcmplt>:
   d81d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81d8:	f7ff ffea 	bl	d81b0 <__aeabi_cdcmpeq>
   d81dc:	bf34      	ite	cc
   d81de:	2001      	movcc	r0, #1
   d81e0:	2000      	movcs	r0, #0
   d81e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d81e6:	bf00      	nop

000d81e8 <__aeabi_dcmple>:
   d81e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d81ec:	f7ff ffe0 	bl	d81b0 <__aeabi_cdcmpeq>
   d81f0:	bf94      	ite	ls
   d81f2:	2001      	movls	r0, #1
   d81f4:	2000      	movhi	r0, #0
   d81f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d81fa:	bf00      	nop

000d81fc <__aeabi_dcmpge>:
   d81fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8200:	f7ff ffce 	bl	d81a0 <__aeabi_cdrcmple>
   d8204:	bf94      	ite	ls
   d8206:	2001      	movls	r0, #1
   d8208:	2000      	movhi	r0, #0
   d820a:	f85d fb08 	ldr.w	pc, [sp], #8
   d820e:	bf00      	nop

000d8210 <__aeabi_dcmpgt>:
   d8210:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8214:	f7ff ffc4 	bl	d81a0 <__aeabi_cdrcmple>
   d8218:	bf34      	ite	cc
   d821a:	2001      	movcc	r0, #1
   d821c:	2000      	movcs	r0, #0
   d821e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8222:	bf00      	nop

000d8224 <__aeabi_dcmpun>:
   d8224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d822c:	d102      	bne.n	d8234 <__aeabi_dcmpun+0x10>
   d822e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8232:	d10a      	bne.n	d824a <__aeabi_dcmpun+0x26>
   d8234:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d823c:	d102      	bne.n	d8244 <__aeabi_dcmpun+0x20>
   d823e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8242:	d102      	bne.n	d824a <__aeabi_dcmpun+0x26>
   d8244:	f04f 0000 	mov.w	r0, #0
   d8248:	4770      	bx	lr
   d824a:	f04f 0001 	mov.w	r0, #1
   d824e:	4770      	bx	lr

000d8250 <__aeabi_d2iz>:
   d8250:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8254:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8258:	d215      	bcs.n	d8286 <__aeabi_d2iz+0x36>
   d825a:	d511      	bpl.n	d8280 <__aeabi_d2iz+0x30>
   d825c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8260:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8264:	d912      	bls.n	d828c <__aeabi_d2iz+0x3c>
   d8266:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d826a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d826e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8276:	fa23 f002 	lsr.w	r0, r3, r2
   d827a:	bf18      	it	ne
   d827c:	4240      	negne	r0, r0
   d827e:	4770      	bx	lr
   d8280:	f04f 0000 	mov.w	r0, #0
   d8284:	4770      	bx	lr
   d8286:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d828a:	d105      	bne.n	d8298 <__aeabi_d2iz+0x48>
   d828c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8290:	bf08      	it	eq
   d8292:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8296:	4770      	bx	lr
   d8298:	f04f 0000 	mov.w	r0, #0
   d829c:	4770      	bx	lr
   d829e:	bf00      	nop

000d82a0 <__aeabi_d2uiz>:
   d82a0:	004a      	lsls	r2, r1, #1
   d82a2:	d211      	bcs.n	d82c8 <__aeabi_d2uiz+0x28>
   d82a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d82a8:	d211      	bcs.n	d82ce <__aeabi_d2uiz+0x2e>
   d82aa:	d50d      	bpl.n	d82c8 <__aeabi_d2uiz+0x28>
   d82ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d82b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d82b4:	d40e      	bmi.n	d82d4 <__aeabi_d2uiz+0x34>
   d82b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d82ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d82be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d82c2:	fa23 f002 	lsr.w	r0, r3, r2
   d82c6:	4770      	bx	lr
   d82c8:	f04f 0000 	mov.w	r0, #0
   d82cc:	4770      	bx	lr
   d82ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d82d2:	d102      	bne.n	d82da <__aeabi_d2uiz+0x3a>
   d82d4:	f04f 30ff 	mov.w	r0, #4294967295
   d82d8:	4770      	bx	lr
   d82da:	f04f 0000 	mov.w	r0, #0
   d82de:	4770      	bx	lr

000d82e0 <__aeabi_d2f>:
   d82e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d82e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d82e8:	bf24      	itt	cs
   d82ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d82ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d82f2:	d90d      	bls.n	d8310 <__aeabi_d2f+0x30>
   d82f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d82f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d82fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8300:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8304:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8308:	bf08      	it	eq
   d830a:	f020 0001 	biceq.w	r0, r0, #1
   d830e:	4770      	bx	lr
   d8310:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8314:	d121      	bne.n	d835a <__aeabi_d2f+0x7a>
   d8316:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d831a:	bfbc      	itt	lt
   d831c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8320:	4770      	bxlt	lr
   d8322:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8326:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d832a:	f1c2 0218 	rsb	r2, r2, #24
   d832e:	f1c2 0c20 	rsb	ip, r2, #32
   d8332:	fa10 f30c 	lsls.w	r3, r0, ip
   d8336:	fa20 f002 	lsr.w	r0, r0, r2
   d833a:	bf18      	it	ne
   d833c:	f040 0001 	orrne.w	r0, r0, #1
   d8340:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8344:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8348:	fa03 fc0c 	lsl.w	ip, r3, ip
   d834c:	ea40 000c 	orr.w	r0, r0, ip
   d8350:	fa23 f302 	lsr.w	r3, r3, r2
   d8354:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8358:	e7cc      	b.n	d82f4 <__aeabi_d2f+0x14>
   d835a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d835e:	d107      	bne.n	d8370 <__aeabi_d2f+0x90>
   d8360:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8364:	bf1e      	ittt	ne
   d8366:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d836a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d836e:	4770      	bxne	lr
   d8370:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8374:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8378:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d837c:	4770      	bx	lr
   d837e:	bf00      	nop

000d8380 <__aeabi_uldivmod>:
   d8380:	b953      	cbnz	r3, d8398 <__aeabi_uldivmod+0x18>
   d8382:	b94a      	cbnz	r2, d8398 <__aeabi_uldivmod+0x18>
   d8384:	2900      	cmp	r1, #0
   d8386:	bf08      	it	eq
   d8388:	2800      	cmpeq	r0, #0
   d838a:	bf1c      	itt	ne
   d838c:	f04f 31ff 	movne.w	r1, #4294967295
   d8390:	f04f 30ff 	movne.w	r0, #4294967295
   d8394:	f000 b9a2 	b.w	d86dc <__aeabi_idiv0>
   d8398:	f1ad 0c08 	sub.w	ip, sp, #8
   d839c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d83a0:	f000 f82a 	bl	d83f8 <__udivmoddi4>
   d83a4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d83a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d83ac:	b004      	add	sp, #16
   d83ae:	4770      	bx	lr

000d83b0 <__aeabi_d2ulz>:
   d83b0:	b5d0      	push	{r4, r6, r7, lr}
   d83b2:	2200      	movs	r2, #0
   d83b4:	4b0e      	ldr	r3, [pc, #56]	; (d83f0 <__aeabi_d2ulz+0x40>)
   d83b6:	4606      	mov	r6, r0
   d83b8:	460f      	mov	r7, r1
   d83ba:	f7ff fc99 	bl	d7cf0 <__aeabi_dmul>
   d83be:	f7ff ff6f 	bl	d82a0 <__aeabi_d2uiz>
   d83c2:	4604      	mov	r4, r0
   d83c4:	f7ff fc1e 	bl	d7c04 <__aeabi_ui2d>
   d83c8:	2200      	movs	r2, #0
   d83ca:	4b0a      	ldr	r3, [pc, #40]	; (d83f4 <__aeabi_d2ulz+0x44>)
   d83cc:	f7ff fc90 	bl	d7cf0 <__aeabi_dmul>
   d83d0:	4602      	mov	r2, r0
   d83d2:	460b      	mov	r3, r1
   d83d4:	4630      	mov	r0, r6
   d83d6:	4639      	mov	r1, r7
   d83d8:	f7ff fad6 	bl	d7988 <__aeabi_dsub>
   d83dc:	f7ff ff60 	bl	d82a0 <__aeabi_d2uiz>
   d83e0:	4623      	mov	r3, r4
   d83e2:	2200      	movs	r2, #0
   d83e4:	ea42 0200 	orr.w	r2, r2, r0
   d83e8:	4610      	mov	r0, r2
   d83ea:	4619      	mov	r1, r3
   d83ec:	bdd0      	pop	{r4, r6, r7, pc}
   d83ee:	bf00      	nop
   d83f0:	3df00000 	.word	0x3df00000
   d83f4:	41f00000 	.word	0x41f00000

000d83f8 <__udivmoddi4>:
   d83f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83fc:	468c      	mov	ip, r1
   d83fe:	460e      	mov	r6, r1
   d8400:	4604      	mov	r4, r0
   d8402:	9d08      	ldr	r5, [sp, #32]
   d8404:	2b00      	cmp	r3, #0
   d8406:	d150      	bne.n	d84aa <__udivmoddi4+0xb2>
   d8408:	428a      	cmp	r2, r1
   d840a:	4617      	mov	r7, r2
   d840c:	d96c      	bls.n	d84e8 <__udivmoddi4+0xf0>
   d840e:	fab2 fe82 	clz	lr, r2
   d8412:	f1be 0f00 	cmp.w	lr, #0
   d8416:	d00b      	beq.n	d8430 <__udivmoddi4+0x38>
   d8418:	f1ce 0420 	rsb	r4, lr, #32
   d841c:	fa20 f404 	lsr.w	r4, r0, r4
   d8420:	fa01 f60e 	lsl.w	r6, r1, lr
   d8424:	ea44 0c06 	orr.w	ip, r4, r6
   d8428:	fa02 f70e 	lsl.w	r7, r2, lr
   d842c:	fa00 f40e 	lsl.w	r4, r0, lr
   d8430:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8434:	0c22      	lsrs	r2, r4, #16
   d8436:	fbbc f0f9 	udiv	r0, ip, r9
   d843a:	fa1f f887 	uxth.w	r8, r7
   d843e:	fb09 c610 	mls	r6, r9, r0, ip
   d8442:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8446:	fb00 f308 	mul.w	r3, r0, r8
   d844a:	42b3      	cmp	r3, r6
   d844c:	d909      	bls.n	d8462 <__udivmoddi4+0x6a>
   d844e:	19f6      	adds	r6, r6, r7
   d8450:	f100 32ff 	add.w	r2, r0, #4294967295
   d8454:	f080 8122 	bcs.w	d869c <__udivmoddi4+0x2a4>
   d8458:	42b3      	cmp	r3, r6
   d845a:	f240 811f 	bls.w	d869c <__udivmoddi4+0x2a4>
   d845e:	3802      	subs	r0, #2
   d8460:	443e      	add	r6, r7
   d8462:	1af6      	subs	r6, r6, r3
   d8464:	b2a2      	uxth	r2, r4
   d8466:	fbb6 f3f9 	udiv	r3, r6, r9
   d846a:	fb09 6613 	mls	r6, r9, r3, r6
   d846e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8472:	fb03 f808 	mul.w	r8, r3, r8
   d8476:	45a0      	cmp	r8, r4
   d8478:	d909      	bls.n	d848e <__udivmoddi4+0x96>
   d847a:	19e4      	adds	r4, r4, r7
   d847c:	f103 32ff 	add.w	r2, r3, #4294967295
   d8480:	f080 810a 	bcs.w	d8698 <__udivmoddi4+0x2a0>
   d8484:	45a0      	cmp	r8, r4
   d8486:	f240 8107 	bls.w	d8698 <__udivmoddi4+0x2a0>
   d848a:	3b02      	subs	r3, #2
   d848c:	443c      	add	r4, r7
   d848e:	ebc8 0404 	rsb	r4, r8, r4
   d8492:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8496:	2100      	movs	r1, #0
   d8498:	2d00      	cmp	r5, #0
   d849a:	d062      	beq.n	d8562 <__udivmoddi4+0x16a>
   d849c:	fa24 f40e 	lsr.w	r4, r4, lr
   d84a0:	2300      	movs	r3, #0
   d84a2:	602c      	str	r4, [r5, #0]
   d84a4:	606b      	str	r3, [r5, #4]
   d84a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84aa:	428b      	cmp	r3, r1
   d84ac:	d907      	bls.n	d84be <__udivmoddi4+0xc6>
   d84ae:	2d00      	cmp	r5, #0
   d84b0:	d055      	beq.n	d855e <__udivmoddi4+0x166>
   d84b2:	2100      	movs	r1, #0
   d84b4:	e885 0041 	stmia.w	r5, {r0, r6}
   d84b8:	4608      	mov	r0, r1
   d84ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84be:	fab3 f183 	clz	r1, r3
   d84c2:	2900      	cmp	r1, #0
   d84c4:	f040 8090 	bne.w	d85e8 <__udivmoddi4+0x1f0>
   d84c8:	42b3      	cmp	r3, r6
   d84ca:	d302      	bcc.n	d84d2 <__udivmoddi4+0xda>
   d84cc:	4282      	cmp	r2, r0
   d84ce:	f200 80f8 	bhi.w	d86c2 <__udivmoddi4+0x2ca>
   d84d2:	1a84      	subs	r4, r0, r2
   d84d4:	eb66 0603 	sbc.w	r6, r6, r3
   d84d8:	2001      	movs	r0, #1
   d84da:	46b4      	mov	ip, r6
   d84dc:	2d00      	cmp	r5, #0
   d84de:	d040      	beq.n	d8562 <__udivmoddi4+0x16a>
   d84e0:	e885 1010 	stmia.w	r5, {r4, ip}
   d84e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84e8:	b912      	cbnz	r2, d84f0 <__udivmoddi4+0xf8>
   d84ea:	2701      	movs	r7, #1
   d84ec:	fbb7 f7f2 	udiv	r7, r7, r2
   d84f0:	fab7 fe87 	clz	lr, r7
   d84f4:	f1be 0f00 	cmp.w	lr, #0
   d84f8:	d135      	bne.n	d8566 <__udivmoddi4+0x16e>
   d84fa:	1bf3      	subs	r3, r6, r7
   d84fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8500:	fa1f fc87 	uxth.w	ip, r7
   d8504:	2101      	movs	r1, #1
   d8506:	fbb3 f0f8 	udiv	r0, r3, r8
   d850a:	0c22      	lsrs	r2, r4, #16
   d850c:	fb08 3610 	mls	r6, r8, r0, r3
   d8510:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8514:	fb0c f300 	mul.w	r3, ip, r0
   d8518:	42b3      	cmp	r3, r6
   d851a:	d907      	bls.n	d852c <__udivmoddi4+0x134>
   d851c:	19f6      	adds	r6, r6, r7
   d851e:	f100 32ff 	add.w	r2, r0, #4294967295
   d8522:	d202      	bcs.n	d852a <__udivmoddi4+0x132>
   d8524:	42b3      	cmp	r3, r6
   d8526:	f200 80ce 	bhi.w	d86c6 <__udivmoddi4+0x2ce>
   d852a:	4610      	mov	r0, r2
   d852c:	1af6      	subs	r6, r6, r3
   d852e:	b2a2      	uxth	r2, r4
   d8530:	fbb6 f3f8 	udiv	r3, r6, r8
   d8534:	fb08 6613 	mls	r6, r8, r3, r6
   d8538:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d853c:	fb0c fc03 	mul.w	ip, ip, r3
   d8540:	45a4      	cmp	ip, r4
   d8542:	d907      	bls.n	d8554 <__udivmoddi4+0x15c>
   d8544:	19e4      	adds	r4, r4, r7
   d8546:	f103 32ff 	add.w	r2, r3, #4294967295
   d854a:	d202      	bcs.n	d8552 <__udivmoddi4+0x15a>
   d854c:	45a4      	cmp	ip, r4
   d854e:	f200 80b5 	bhi.w	d86bc <__udivmoddi4+0x2c4>
   d8552:	4613      	mov	r3, r2
   d8554:	ebcc 0404 	rsb	r4, ip, r4
   d8558:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d855c:	e79c      	b.n	d8498 <__udivmoddi4+0xa0>
   d855e:	4629      	mov	r1, r5
   d8560:	4628      	mov	r0, r5
   d8562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8566:	f1ce 0120 	rsb	r1, lr, #32
   d856a:	fa06 f30e 	lsl.w	r3, r6, lr
   d856e:	fa07 f70e 	lsl.w	r7, r7, lr
   d8572:	fa20 f901 	lsr.w	r9, r0, r1
   d8576:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d857a:	40ce      	lsrs	r6, r1
   d857c:	ea49 0903 	orr.w	r9, r9, r3
   d8580:	fbb6 faf8 	udiv	sl, r6, r8
   d8584:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d8588:	fb08 661a 	mls	r6, r8, sl, r6
   d858c:	fa1f fc87 	uxth.w	ip, r7
   d8590:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d8594:	fb0a f20c 	mul.w	r2, sl, ip
   d8598:	429a      	cmp	r2, r3
   d859a:	fa00 f40e 	lsl.w	r4, r0, lr
   d859e:	d90a      	bls.n	d85b6 <__udivmoddi4+0x1be>
   d85a0:	19db      	adds	r3, r3, r7
   d85a2:	f10a 31ff 	add.w	r1, sl, #4294967295
   d85a6:	f080 8087 	bcs.w	d86b8 <__udivmoddi4+0x2c0>
   d85aa:	429a      	cmp	r2, r3
   d85ac:	f240 8084 	bls.w	d86b8 <__udivmoddi4+0x2c0>
   d85b0:	f1aa 0a02 	sub.w	sl, sl, #2
   d85b4:	443b      	add	r3, r7
   d85b6:	1a9b      	subs	r3, r3, r2
   d85b8:	fa1f f989 	uxth.w	r9, r9
   d85bc:	fbb3 f1f8 	udiv	r1, r3, r8
   d85c0:	fb08 3311 	mls	r3, r8, r1, r3
   d85c4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d85c8:	fb01 f60c 	mul.w	r6, r1, ip
   d85cc:	429e      	cmp	r6, r3
   d85ce:	d907      	bls.n	d85e0 <__udivmoddi4+0x1e8>
   d85d0:	19db      	adds	r3, r3, r7
   d85d2:	f101 32ff 	add.w	r2, r1, #4294967295
   d85d6:	d26b      	bcs.n	d86b0 <__udivmoddi4+0x2b8>
   d85d8:	429e      	cmp	r6, r3
   d85da:	d969      	bls.n	d86b0 <__udivmoddi4+0x2b8>
   d85dc:	3902      	subs	r1, #2
   d85de:	443b      	add	r3, r7
   d85e0:	1b9b      	subs	r3, r3, r6
   d85e2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d85e6:	e78e      	b.n	d8506 <__udivmoddi4+0x10e>
   d85e8:	f1c1 0e20 	rsb	lr, r1, #32
   d85ec:	fa22 f40e 	lsr.w	r4, r2, lr
   d85f0:	408b      	lsls	r3, r1
   d85f2:	4323      	orrs	r3, r4
   d85f4:	fa20 f70e 	lsr.w	r7, r0, lr
   d85f8:	fa06 f401 	lsl.w	r4, r6, r1
   d85fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8600:	fa26 f60e 	lsr.w	r6, r6, lr
   d8604:	433c      	orrs	r4, r7
   d8606:	fbb6 f9fc 	udiv	r9, r6, ip
   d860a:	0c27      	lsrs	r7, r4, #16
   d860c:	fb0c 6619 	mls	r6, ip, r9, r6
   d8610:	fa1f f883 	uxth.w	r8, r3
   d8614:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8618:	fb09 f708 	mul.w	r7, r9, r8
   d861c:	42b7      	cmp	r7, r6
   d861e:	fa02 f201 	lsl.w	r2, r2, r1
   d8622:	fa00 fa01 	lsl.w	sl, r0, r1
   d8626:	d908      	bls.n	d863a <__udivmoddi4+0x242>
   d8628:	18f6      	adds	r6, r6, r3
   d862a:	f109 30ff 	add.w	r0, r9, #4294967295
   d862e:	d241      	bcs.n	d86b4 <__udivmoddi4+0x2bc>
   d8630:	42b7      	cmp	r7, r6
   d8632:	d93f      	bls.n	d86b4 <__udivmoddi4+0x2bc>
   d8634:	f1a9 0902 	sub.w	r9, r9, #2
   d8638:	441e      	add	r6, r3
   d863a:	1bf6      	subs	r6, r6, r7
   d863c:	b2a0      	uxth	r0, r4
   d863e:	fbb6 f4fc 	udiv	r4, r6, ip
   d8642:	fb0c 6614 	mls	r6, ip, r4, r6
   d8646:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d864a:	fb04 f808 	mul.w	r8, r4, r8
   d864e:	45b8      	cmp	r8, r7
   d8650:	d907      	bls.n	d8662 <__udivmoddi4+0x26a>
   d8652:	18ff      	adds	r7, r7, r3
   d8654:	f104 30ff 	add.w	r0, r4, #4294967295
   d8658:	d228      	bcs.n	d86ac <__udivmoddi4+0x2b4>
   d865a:	45b8      	cmp	r8, r7
   d865c:	d926      	bls.n	d86ac <__udivmoddi4+0x2b4>
   d865e:	3c02      	subs	r4, #2
   d8660:	441f      	add	r7, r3
   d8662:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d8666:	ebc8 0707 	rsb	r7, r8, r7
   d866a:	fba0 8902 	umull	r8, r9, r0, r2
   d866e:	454f      	cmp	r7, r9
   d8670:	4644      	mov	r4, r8
   d8672:	464e      	mov	r6, r9
   d8674:	d314      	bcc.n	d86a0 <__udivmoddi4+0x2a8>
   d8676:	d029      	beq.n	d86cc <__udivmoddi4+0x2d4>
   d8678:	b365      	cbz	r5, d86d4 <__udivmoddi4+0x2dc>
   d867a:	ebba 0304 	subs.w	r3, sl, r4
   d867e:	eb67 0706 	sbc.w	r7, r7, r6
   d8682:	fa07 fe0e 	lsl.w	lr, r7, lr
   d8686:	40cb      	lsrs	r3, r1
   d8688:	40cf      	lsrs	r7, r1
   d868a:	ea4e 0303 	orr.w	r3, lr, r3
   d868e:	e885 0088 	stmia.w	r5, {r3, r7}
   d8692:	2100      	movs	r1, #0
   d8694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8698:	4613      	mov	r3, r2
   d869a:	e6f8      	b.n	d848e <__udivmoddi4+0x96>
   d869c:	4610      	mov	r0, r2
   d869e:	e6e0      	b.n	d8462 <__udivmoddi4+0x6a>
   d86a0:	ebb8 0402 	subs.w	r4, r8, r2
   d86a4:	eb69 0603 	sbc.w	r6, r9, r3
   d86a8:	3801      	subs	r0, #1
   d86aa:	e7e5      	b.n	d8678 <__udivmoddi4+0x280>
   d86ac:	4604      	mov	r4, r0
   d86ae:	e7d8      	b.n	d8662 <__udivmoddi4+0x26a>
   d86b0:	4611      	mov	r1, r2
   d86b2:	e795      	b.n	d85e0 <__udivmoddi4+0x1e8>
   d86b4:	4681      	mov	r9, r0
   d86b6:	e7c0      	b.n	d863a <__udivmoddi4+0x242>
   d86b8:	468a      	mov	sl, r1
   d86ba:	e77c      	b.n	d85b6 <__udivmoddi4+0x1be>
   d86bc:	3b02      	subs	r3, #2
   d86be:	443c      	add	r4, r7
   d86c0:	e748      	b.n	d8554 <__udivmoddi4+0x15c>
   d86c2:	4608      	mov	r0, r1
   d86c4:	e70a      	b.n	d84dc <__udivmoddi4+0xe4>
   d86c6:	3802      	subs	r0, #2
   d86c8:	443e      	add	r6, r7
   d86ca:	e72f      	b.n	d852c <__udivmoddi4+0x134>
   d86cc:	45c2      	cmp	sl, r8
   d86ce:	d3e7      	bcc.n	d86a0 <__udivmoddi4+0x2a8>
   d86d0:	463e      	mov	r6, r7
   d86d2:	e7d1      	b.n	d8678 <__udivmoddi4+0x280>
   d86d4:	4629      	mov	r1, r5
   d86d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86da:	bf00      	nop

000d86dc <__aeabi_idiv0>:
   d86dc:	4770      	bx	lr
   d86de:	bf00      	nop

000d86e0 <__cxa_atexit>:
   d86e0:	b510      	push	{r4, lr}
   d86e2:	4c05      	ldr	r4, [pc, #20]	; (d86f8 <__cxa_atexit+0x18>)
   d86e4:	4613      	mov	r3, r2
   d86e6:	b12c      	cbz	r4, d86f4 <__cxa_atexit+0x14>
   d86e8:	460a      	mov	r2, r1
   d86ea:	4601      	mov	r1, r0
   d86ec:	2002      	movs	r0, #2
   d86ee:	f3af 8000 	nop.w
   d86f2:	bd10      	pop	{r4, pc}
   d86f4:	4620      	mov	r0, r4
   d86f6:	bd10      	pop	{r4, pc}
   d86f8:	00000000 	.word	0x00000000

000d86fc <memcpy>:
   d86fc:	b510      	push	{r4, lr}
   d86fe:	1e43      	subs	r3, r0, #1
   d8700:	440a      	add	r2, r1
   d8702:	4291      	cmp	r1, r2
   d8704:	d004      	beq.n	d8710 <memcpy+0x14>
   d8706:	f811 4b01 	ldrb.w	r4, [r1], #1
   d870a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d870e:	e7f8      	b.n	d8702 <memcpy+0x6>
   d8710:	bd10      	pop	{r4, pc}

000d8712 <memset>:
   d8712:	4402      	add	r2, r0
   d8714:	4603      	mov	r3, r0
   d8716:	4293      	cmp	r3, r2
   d8718:	d002      	beq.n	d8720 <memset+0xe>
   d871a:	f803 1b01 	strb.w	r1, [r3], #1
   d871e:	e7fa      	b.n	d8716 <memset+0x4>
   d8720:	4770      	bx	lr
	...

000d8724 <srand>:
   d8724:	b538      	push	{r3, r4, r5, lr}
   d8726:	4b12      	ldr	r3, [pc, #72]	; (d8770 <srand+0x4c>)
   d8728:	681c      	ldr	r4, [r3, #0]
   d872a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d872c:	4605      	mov	r5, r0
   d872e:	b9d3      	cbnz	r3, d8766 <srand+0x42>
   d8730:	2018      	movs	r0, #24
   d8732:	f7fd fbb3 	bl	d5e9c <malloc>
   d8736:	f243 330e 	movw	r3, #13070	; 0x330e
   d873a:	63a0      	str	r0, [r4, #56]	; 0x38
   d873c:	8003      	strh	r3, [r0, #0]
   d873e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8742:	8043      	strh	r3, [r0, #2]
   d8744:	f241 2334 	movw	r3, #4660	; 0x1234
   d8748:	8083      	strh	r3, [r0, #4]
   d874a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d874e:	80c3      	strh	r3, [r0, #6]
   d8750:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8754:	8103      	strh	r3, [r0, #8]
   d8756:	2305      	movs	r3, #5
   d8758:	8143      	strh	r3, [r0, #10]
   d875a:	230b      	movs	r3, #11
   d875c:	8183      	strh	r3, [r0, #12]
   d875e:	2201      	movs	r2, #1
   d8760:	2300      	movs	r3, #0
   d8762:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8768:	2200      	movs	r2, #0
   d876a:	611d      	str	r5, [r3, #16]
   d876c:	615a      	str	r2, [r3, #20]
   d876e:	bd38      	pop	{r3, r4, r5, pc}
   d8770:	2003dc44 	.word	0x2003dc44

000d8774 <strcmp>:
   d8774:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8778:	f811 3b01 	ldrb.w	r3, [r1], #1
   d877c:	2a01      	cmp	r2, #1
   d877e:	bf28      	it	cs
   d8780:	429a      	cmpcs	r2, r3
   d8782:	d0f7      	beq.n	d8774 <strcmp>
   d8784:	1ad0      	subs	r0, r2, r3
   d8786:	4770      	bx	lr

000d8788 <strcpy>:
   d8788:	4603      	mov	r3, r0
   d878a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d878e:	f803 2b01 	strb.w	r2, [r3], #1
   d8792:	2a00      	cmp	r2, #0
   d8794:	d1f9      	bne.n	d878a <strcpy+0x2>
   d8796:	4770      	bx	lr

000d8798 <strlen>:
   d8798:	4603      	mov	r3, r0
   d879a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d879e:	2a00      	cmp	r2, #0
   d87a0:	d1fb      	bne.n	d879a <strlen+0x2>
   d87a2:	1a18      	subs	r0, r3, r0
   d87a4:	3801      	subs	r0, #1
   d87a6:	4770      	bx	lr

000d87a8 <dynalib_user>:
   d87a8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d87b8:	0000 0000 4544 4f4d 4f00 4646 4d00 444f     ....DEMO.OFF.MOD
   d87c8:	2045 004c 4f4d 4544 5420 4d00 444f 2045     E L.MODE T.MODE 
   d87d8:	0055 2020 6300 6168 676e 4d65 5451 0054     U.  .changeMQTT.
   d87e8:	6863 6e61 6567 654e 7774 726f 006b 754c     changeNetwork.Lu
   d87f8:	696d 616e 6972 7361 4300 6e6f 6365 6174     minarias.Conecta
   d8808:	646e 206f 6f63 206e 6573 7672 7265 4d20     ndo con server M
   d8818:	5451 0054 6e61 7479 6968 676e 6100 6772     QTT.anything.arg
   d8828:	6e6f 6c43 6569 746e 6300 6168 676e 4d65     onClient.changeM
   d8838:	646f 0065 002f 754c 696d 616e 6972 0061     ode./.Luminaria.
   d8848:	6f43 656e 7463 6e61 6f64 6320 6e6f 7320     Conectando con s
   d8858:	7265 6576 2072 514d 5454 4320 6e6f 6966     erver MQTT Confi
   d8868:	0067 6f43 6e6e 7865 6f69 206e 514d 5454     g.Connexion MQTT
   d8878:	4320 4e4f 4946 2047 7865 7469 736f 0061      CONFIG exitosa.
   d8888:	6f43 6e6e 7865 6f69 206e 514d 5454 6520     Connexion MQTT e
   d8898:	6978 6f74 6173 4300 6e6f 6365 6174 646e     xitosa.Conectand
   d88a8:	206f 6f63 206e 6573 736e 726f 7365 4920     o con sensores I
   d88b8:	414e 3132 2e39 2e2e 0021 694d 6964 6e65     NA219...!.Midien
   d88c8:	6f64 5620 4c4f 4154 454a 7920 4320 524f     do VOLTAJE y COR
   d88d8:	4952 4e45 4554 6320 6e6f 4920 414e 3132     RIENTE con INA21
   d88e8:	2039 2e2e 002e 6c65 6569 6563 3172 3039     9 ....eliecer190
   d88f8:	0038 5241 5554 4f52 5620 4c45 5a41 5551     8.ARTURO VELAZQU
   d8908:	5a45 6e00 7765 6144 6174 5200 5353 3a49     EZ.newData.RSSI:
   d8918:	0020 3032 2e39 3831 2e32 3132 2e38 3731      .209.182.218.17
   d8928:	0035 3931 2e32 3631 2e38 2e30 0036 0400     5.192.168.0.6...
   d8938:	514d 5454 0004 4d06 4951 6473 0370 0000     MQTT...MQIsdp...
   d8948:	24b8 0000 1194 0000 0258 0000 06a4 0000     .$......X.......
   d8958:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8968:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8978:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8988:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8998:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d89a8:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d89b8:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d89c8:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d89d8:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d89e8:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d89f8:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a08:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8a18:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d8a28:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8a38:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8a48:	0258 0000 0672 0000 0258 0000 24ea 0000     X...r...X....$..
   d8a58:	11c6 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8a68:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a78:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a88:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8a98:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8aa8:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8ab8:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8ac8:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8ad8:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8ae8:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8af8:	0672 0000 028a 0000 0226 0000 0226 0000     r.......&...&...
   d8b08:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8b18:	0226 0000 0226 0000 06a4 0000 0258 0000     &...&.......X...
   d8b28:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8b38:	0226 0000 0258 0000 06a4 0000 0226 0000     &...X.......&...
   d8b48:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8b58:	0672 0000 0258 0000 24ea 0000 1194 0000     r...X....$......
   d8b68:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8b78:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8b88:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8b98:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8ba8:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8bb8:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8bc8:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8bd8:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8be8:	0258 0000 0672 0000 028a 0000 0226 0000     X...r.......&...
   d8bf8:	0226 0000 0258 0000 0226 0000 06a4 0000     &...X...&.......
   d8c08:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c18:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c28:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8c38:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8c48:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8c58:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8c68:	0258 0000 2580 0000 1194 0000 0258 0000     X....%......X...
   d8c78:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8c88:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8c98:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ca8:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8cb8:	0258 0000 0226 0000 06a4 0000 0258 0000     X...&.......X...
   d8cc8:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8cd8:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8ce8:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8cf8:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8d08:	0226 0000 0226 0000 0258 0000 0226 0000     &...&...X...&...
   d8d18:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8d28:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8d38:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8d48:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8d58:	0226 0000 0258 0000 06a4 0000 0258 0000     &...X.......X...
   d8d68:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8d78:	24ea 0000 1194 0000 0258 0000 0672 0000     .$......X...r...
   d8d88:	028a 0000 0226 0000 0226 0000 0258 0000     ....&...&...X...
   d8d98:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8da8:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8db8:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8dc8:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8dd8:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8de8:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8df8:	0258 0000 06a4 0000 0226 0000 0258 0000     X.......&...X...
   d8e08:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8e18:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8e28:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8e38:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8e48:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8e58:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8e68:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d8e78:	0226 0000 06a4 0000 0258 0000 254e 0000     &.......X...N%..
   d8e88:	1194 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8e98:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ea8:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8eb8:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8ec8:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8ed8:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8ee8:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8ef8:	0672 0000 0258 0000 06a4 0000 0258 0000     r...X.......X...
   d8f08:	0672 0000 028a 0000 0672 0000 0258 0000     r.......r...X...
   d8f18:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8f28:	0258 0000 0226 0000 0226 0000 0258 0000     X...&...&...X...
   d8f38:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8f48:	0226 0000 028a 0000 0226 0000 0226 0000     &.......&...&...
   d8f58:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8f68:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8f78:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8f88:	06a4 0000 0258 0000 4f4d 4544 4d20 7b00     ....X...MODE M.{
   d8f98:	2200 6469 3a22 2200 3065 6630 6563 3836     ."id":."e00fce68
   d8fa8:	6164 6635 3564 6463 3930 3864 3032 3837     da5fd5cd09d82078
   d8fb8:	0022 002c 6e22 6d61 2265 003a 4222 6269     ".,."name":."Bib
   d8fc8:	696c 746f 6365 2261 2200 6f6d 6564 3a22     lioteca"."mode":
   d8fd8:	2200 6164 6174 3a22 2200 656c 2264 003a     ."data":."led":.
   d8fe8:	7622 6c6f 6174 6567 3a22 2200 7563 7272     "voltage":."curr
   d8ff8:	6e65 2274 003a 007d 7022 2276 003a 6222     ent":.}."pv":."b
   d9008:	7461 6574 7972 3a22 0000 0000               attery":....

000d9014 <_ZTVN5spark13EthernetClassE>:
	...
   d901c:	5f3b 000d 5f31 000d 5f27 000d 5f1d 000d     ;_..1_..'_..._..
   d902c:	5f11 000d 5f05 000d 5ef9 000d 5ef1 000d     ._..._...^...^..
   d903c:	5ee7 000d 5edd 000d 7455 000d               .^...^..Ut..

000d9048 <_ZTV8SPIClass>:
	...
   d9050:	5f59 000d 5f5b 000d 616e 006e 766f 0066     Y_..[_..nan.ovf.
   d9060:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   d9070:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d9080:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d9090:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d90a0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d90b0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d90c0:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d90d0:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d90e0:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d90f0:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d9100:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   d9110:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   d9120:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d9130:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d9140:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   d9150:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   d9160:	6373 6974 656d 0000                         sctime..

000d9168 <_ZTV9IPAddress>:
	...
   d9170:	6735 000d 6725 000d 6727 000d               5g..%g..'g..

000d917c <_ZTV9USBSerial>:
	...
   d9184:	684d 000d 689d 000d 68ab 000d 6335 000d     Mh...h...h..5c..
   d9194:	6889 000d 684f 000d 6865 000d 6897 000d     .h..Oh..eh...h..
   d91a4:	687b 000d 6849 000d                         {h..Ih..

000d91ac <_ZTV11USARTSerial>:
	...
   d91b4:	6959 000d 69a9 000d 69b7 000d 6335 000d     Yi...i...i..5c..
   d91c4:	696d 000d 698f 000d 697b 000d 69a3 000d     mi...i..{i...i..
   d91d4:	695b 000d 695f 000d                         [i.._i..

000d91dc <_ZTV7TwoWire>:
	...
   d91e4:	6a5d 000d 6aa7 000d 6a7f 000d 6a5f 000d     ]j...j...j.._j..
   d91f4:	6a87 000d 6a8f 000d 6a97 000d 6a9f 000d     .j...j...j...j..

000d9204 <_ZTVN5spark9MeshClassE>:
	...
   d920c:	6b79 000d 6b6f 000d 6b65 000d 6b5b 000d     yk..ok..ek..[k..
   d921c:	6b4f 000d 6b43 000d 6b37 000d 6b2f 000d     Ok..Ck..7k../k..
   d922c:	6b25 000d 6b1b 000d 7455 000d               %k...k..Ut..

000d9238 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9240:	6d05 000d 6d0b 000d 71f3 000d 6d19 000d     .m...m...q...m..
   d9250:	6d07 000d                                   .m..

000d9254 <_ZTV9TCPClient>:
	...
   d925c:	4751 000d 4785 000d 6c7d 000d 6c97 000d     QG...G..}l...l..
   d926c:	7099 000d 6deb 000d 6dbd 000d 6cc1 000d     .p...m...m...l..
   d927c:	6f75 000d 6e71 000d 6e1f 000d 7069 000d     uo..qn...n..ip..
   d928c:	6cc3 000d 6cfb 000d 6ca9 000d 6d1d 000d     .l...l...l...m..
   d929c:	6d9d 000d 6977 6972 676e 7200 6365 2076     .m..wiring.recv 
   d92ac:	7265 6f72 2072 203d 6425 0000               error = %d..

000d92b8 <_ZTVN5spark9WiFiClassE>:
	...
   d92c0:	72bf 000d 72b5 000d 72ab 000d 4185 000d     .r...r...r...A..
   d92d0:	418f 000d 729f 000d 7293 000d 728b 000d     .A...r...r...r..
   d92e0:	7281 000d 7277 000d 7455 000d               .r..wr..Ut..

000d92ec <_ZTV10WiFiSignal>:
	...
   d92f4:	720b 000d 7269 000d 720d 000d 72fd 000d     .r..ir...r...r..
   d9304:	7211 000d 72c9 000d 723d 000d               .r...r..=r..

000d9310 <_ZTVN5spark12NetworkClassE>:
	...
   d9318:	73ed 000d 73f7 000d 7401 000d 740b 000d     .s...s...t...t..
   d9328:	7415 000d 7421 000d 742d 000d 7439 000d     .t..!t..-t..9t..
   d9338:	7441 000d 744b 000d 7455 000d               At..Kt..Ut..

000d9344 <__sf_fake_stdin>:
	...

000d9364 <__sf_fake_stdout>:
	...

000d9384 <__sf_fake_stderr>:
	...
   d93a4:	0043                                        C.

000d93a6 <link_const_variable_data_end>:
	...

000d93a8 <link_constructors_location>:
   d93a8:	000d40bb 	.word	0x000d40bb
   d93ac:	000d46b1 	.word	0x000d46b1
   d93b0:	000d4fab 	.word	0x000d4fab
   d93b4:	000d5117 	.word	0x000d5117
   d93b8:	000d5975 	.word	0x000d5975
   d93bc:	000d5f45 	.word	0x000d5f45
   d93c0:	000d5f99 	.word	0x000d5f99
   d93c4:	000d6325 	.word	0x000d6325
   d93c8:	000d65ed 	.word	0x000d65ed
   d93cc:	000d65fd 	.word	0x000d65fd
   d93d0:	000d6635 	.word	0x000d6635
   d93d4:	000d6c2d 	.word	0x000d6c2d
   d93d8:	000d73d9 	.word	0x000d73d9
   d93dc:	000d7521 	.word	0x000d7521
   d93e0:	000d765d 	.word	0x000d765d
   d93e4:	000d76f1 	.word	0x000d76f1
   d93e8:	000d7775 	.word	0x000d7775
   d93ec:	000d7839 	.word	0x000d7839
   d93f0:	000d78fd 	.word	0x000d78fd

000d93f4 <link_constructors_end>:
	...
