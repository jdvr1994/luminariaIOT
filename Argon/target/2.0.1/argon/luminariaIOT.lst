
d:/Descargas/Luminarias/CodigoArgon/luminariaIOT/target/2.0.1/argon/luminariaIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d93c0  000d93c0  000093c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d93c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003de40  000d93cc  0001de40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000948  2003dea8  2003dea8  0002dea8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9434  000d9434  00029434  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d945c  000d945c  0002945c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015cf91  00000000  00000000  00029460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000179be  00000000  00000000  001863f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002cb7e  00000000  00000000  0019ddaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c30  00000000  00000000  001ca92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007758  00000000  00000000  001cd55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039c21  00000000  00000000  001d4cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003b82e  00000000  00000000  0020e8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00107cd5  00000000  00000000  0024a104  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007adc  00000000  00000000  00351ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb93 	bl	d875c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb9b 	bl	d8778 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de40 	.word	0x2003de40
   d404c:	000d93cc 	.word	0x000d93cc
   d4050:	2003dea8 	.word	0x2003dea8
   d4054:	2003dea8 	.word	0x2003dea8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fbeb 	bl	d683c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d938c 	.word	0x000d938c
   d4080:	000d93b4 	.word	0x000d93b4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba84 	b.w	d4590 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fad7 	bl	d463c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bb95 	b.w	d67c0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bf77 	b.w	d5f88 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bf75 	b.w	d5f88 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bf7b 	b.w	d5f98 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bf79 	b.w	d5f98 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8callbackPcPhj>:
#define DIR_IP_SERVER 0

//=============================================================
//=============== RECEIVE MESSAGES MAIN MQTT===================
//=============================================================
void callback(char* topic, byte* payload, unsigned int length) {
   d40b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char p[length + 1];
   d40ba:	f102 0308 	add.w	r3, r2, #8
   d40be:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   d40c2:	af00      	add	r7, sp, #0
    char p[length + 1];
   d40c4:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   d40c8:	4614      	mov	r4, r2
   d40ca:	4605      	mov	r5, r0
    memcpy(p, payload, length);
   d40cc:	4668      	mov	r0, sp
   d40ce:	f004 fb45 	bl	d875c <memcpy>
    p[length] = NULL;

    if (!strcmp(p, "DEMO"))
   d40d2:	491f      	ldr	r1, [pc, #124]	; (d4150 <_Z8callbackPcPhj+0x98>)
    p[length] = NULL;
   d40d4:	2300      	movs	r3, #0
    if (!strcmp(p, "DEMO"))
   d40d6:	4668      	mov	r0, sp
    p[length] = NULL;
   d40d8:	f80d 3004 	strb.w	r3, [sp, r4]
    if (!strcmp(p, "DEMO"))
   d40dc:	f004 fb78 	bl	d87d0 <strcmp>
    char p[length + 1];
   d40e0:	466e      	mov	r6, sp
    if (!strcmp(p, "DEMO"))
   d40e2:	4601      	mov	r1, r0
   d40e4:	b9b0      	cbnz	r0, d4114 <_Z8callbackPcPhj+0x5c>
    else if (!strcmp(p, "MODE T"))
        lightController.sendCommand(3);  // Send T command
    else if (!strcmp(p, "MODE U"))
        lightController.sendCommand(4);  // Send U command
    else
        lightController.sendCommand(5);  // Send M command
   d40e6:	481b      	ldr	r0, [pc, #108]	; (d4154 <_Z8callbackPcPhj+0x9c>)
   d40e8:	f001 f8fe 	bl	d52e8 <_ZN8LightIOT11sendCommandEh>
    
        
    Serial.print(topic);Serial.print("  ");
   d40ec:	f002 fcc8 	bl	d6a80 <_Z16_fetch_usbserialv>
   d40f0:	4629      	mov	r1, r5
   d40f2:	f002 f9f3 	bl	d64dc <_ZN5Print5printEPKc>
   d40f6:	f002 fcc3 	bl	d6a80 <_Z16_fetch_usbserialv>
   d40fa:	4917      	ldr	r1, [pc, #92]	; (d4158 <_Z8callbackPcPhj+0xa0>)
   d40fc:	f002 f9ee 	bl	d64dc <_ZN5Print5printEPKc>
    Serial.println(p);
   d4100:	f002 fcbe 	bl	d6a80 <_Z16_fetch_usbserialv>
   d4104:	4631      	mov	r1, r6
   d4106:	f002 f9fc 	bl	d6502 <_ZN5Print7printlnEPKc>
    delay(100);
   d410a:	2064      	movs	r0, #100	; 0x64
   d410c:	f002 fb16 	bl	d673c <delay>
}
   d4110:	46bd      	mov	sp, r7
   d4112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (!strcmp(p, "OFF"))
   d4114:	4911      	ldr	r1, [pc, #68]	; (d415c <_Z8callbackPcPhj+0xa4>)
   d4116:	4668      	mov	r0, sp
   d4118:	f004 fb5a 	bl	d87d0 <strcmp>
   d411c:	b908      	cbnz	r0, d4122 <_Z8callbackPcPhj+0x6a>
        lightController.sendCommand(1);  //  Send OFF command
   d411e:	2101      	movs	r1, #1
   d4120:	e7e1      	b.n	d40e6 <_Z8callbackPcPhj+0x2e>
    else if (!strcmp(p, "MODE L"))
   d4122:	490f      	ldr	r1, [pc, #60]	; (d4160 <_Z8callbackPcPhj+0xa8>)
   d4124:	4668      	mov	r0, sp
   d4126:	f004 fb53 	bl	d87d0 <strcmp>
   d412a:	b908      	cbnz	r0, d4130 <_Z8callbackPcPhj+0x78>
        lightController.sendCommand(2);  // Send L command
   d412c:	2102      	movs	r1, #2
   d412e:	e7da      	b.n	d40e6 <_Z8callbackPcPhj+0x2e>
    else if (!strcmp(p, "MODE T"))
   d4130:	490c      	ldr	r1, [pc, #48]	; (d4164 <_Z8callbackPcPhj+0xac>)
   d4132:	4668      	mov	r0, sp
   d4134:	f004 fb4c 	bl	d87d0 <strcmp>
   d4138:	b908      	cbnz	r0, d413e <_Z8callbackPcPhj+0x86>
        lightController.sendCommand(3);  // Send T command
   d413a:	2103      	movs	r1, #3
   d413c:	e7d3      	b.n	d40e6 <_Z8callbackPcPhj+0x2e>
    else if (!strcmp(p, "MODE U"))
   d413e:	490a      	ldr	r1, [pc, #40]	; (d4168 <_Z8callbackPcPhj+0xb0>)
   d4140:	4668      	mov	r0, sp
   d4142:	f004 fb45 	bl	d87d0 <strcmp>
   d4146:	b908      	cbnz	r0, d414c <_Z8callbackPcPhj+0x94>
        lightController.sendCommand(4);  // Send U command
   d4148:	2104      	movs	r1, #4
   d414a:	e7cc      	b.n	d40e6 <_Z8callbackPcPhj+0x2e>
        lightController.sendCommand(5);  // Send M command
   d414c:	2105      	movs	r1, #5
   d414e:	e7ca      	b.n	d40e6 <_Z8callbackPcPhj+0x2e>
   d4150:	000d8840 	.word	0x000d8840
   d4154:	2003df88 	.word	0x2003df88
   d4158:	000d885e 	.word	0x000d885e
   d415c:	000d8845 	.word	0x000d8845
   d4160:	000d8849 	.word	0x000d8849
   d4164:	000d8850 	.word	0x000d8850
   d4168:	000d8857 	.word	0x000d8857

000d416c <_ZN8LightIOTD1Ev>:
    #define INA219_BATTERY                         (0x44)
    #define INA219_PANEL                         (0x41)
    #define INA219_LED                         (0x40)

// This is your main class that users will import into their application
class LightIOT
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f500 60cb 	add.w	r0, r0, #1624	; 0x658
   d4174:	f002 f846 	bl	d6204 <_ZN6StringD1Ev>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d417c:	b510      	push	{r4, lr}
   d417e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4180:	6800      	ldr	r0, [r0, #0]
   d4182:	b108      	cbz	r0, d4188 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4184:	f001 ff08 	bl	d5f98 <free>
class SystemClass {
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}

000d418c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d418c:	2200      	movs	r2, #0
   d418e:	6840      	ldr	r0, [r0, #4]
   d4190:	4611      	mov	r1, r2
   d4192:	f001 be99 	b.w	d5ec8 <network_ready>

000d4196 <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4196:	2300      	movs	r3, #0
   d4198:	6840      	ldr	r0, [r0, #4]
   d419a:	461a      	mov	r2, r3
   d419c:	4619      	mov	r1, r3
   d419e:	f001 be9b 	b.w	d5ed8 <network_on>

000d41a2 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>:

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
   d41a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d41a6:	4680      	mov	r8, r0
   d41a8:	b095      	sub	sp, #84	; 0x54
   d41aa:	4614      	mov	r4, r2
   d41ac:	4699      	mov	r9, r3
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d41ae:	460d      	mov	r5, r1
   d41b0:	b329      	cbz	r1, d41fe <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x5c>
   d41b2:	4608      	mov	r0, r1
   d41b4:	f004 fb1e 	bl	d87f4 <strlen>
   d41b8:	4607      	mov	r7, r0
   d41ba:	b314      	cbz	r4, d4202 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x60>
   d41bc:	4620      	mov	r0, r4
   d41be:	f004 fb19 	bl	d87f4 <strlen>
   d41c2:	4606      	mov	r6, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d41c4:	2238      	movs	r2, #56	; 0x38
   d41c6:	2100      	movs	r1, #0
   d41c8:	a806      	add	r0, sp, #24
   d41ca:	f004 fad5 	bl	d8778 <memset>
        creds.size = sizeof(creds);
   d41ce:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d41d0:	e9cd 3501 	strd	r3, r5, [sp, #4]
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
   d41d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d41d6:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41da:	2300      	movs	r3, #0
   d41dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
        creds.password_len = passwordLen;
   d41e0:	9605      	str	r6, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41e2:	aa01      	add	r2, sp, #4
   d41e4:	4619      	mov	r1, r3
        creds.password = password;
   d41e6:	e9cd 7403 	strd	r7, r4, [sp, #12]
        creds.security = WLanSecurityType(security);
   d41ea:	f88d 9018 	strb.w	r9, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41ee:	f001 fe93 	bl	d5f18 <network_set_credentials>
    }
   d41f2:	fab0 f080 	clz	r0, r0
   d41f6:	0940      	lsrs	r0, r0, #5
   d41f8:	b015      	add	sp, #84	; 0x54
   d41fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d41fe:	460f      	mov	r7, r1
   d4200:	e7db      	b.n	d41ba <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x18>
   d4202:	4626      	mov	r6, r4
   d4204:	e7de      	b.n	d41c4 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x22>

000d4206 <_ZN5spark9WiFiClass14setCredentialsEPKc>:
    bool setCredentials(const char *ssid) {
   d4206:	b507      	push	{r0, r1, r2, lr}
        return setCredentials(ssid, NULL, UNSEC);
   d4208:	2300      	movs	r3, #0
   d420a:	9300      	str	r3, [sp, #0]
   d420c:	461a      	mov	r2, r3
   d420e:	f7ff ffc8 	bl	d41a2 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    }
   d4212:	b003      	add	sp, #12
   d4214:	f85d fb04 	ldr.w	pc, [sp], #4

000d4218 <_Z14callbackConfigPcPhj>:

//=============================================================
//=============== RECEIVE MESSAGES CONFIG MQTT=================
//=============================================================
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char p[length + 1];
   d421c:	f102 0308 	add.w	r3, r2, #8
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4220:	b08a      	sub	sp, #40	; 0x28
    char p[length + 1];
   d4222:	f023 0307 	bic.w	r3, r3, #7
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d4226:	af02      	add	r7, sp, #8
    char p[length + 1];
   d4228:	ebad 0d03 	sub.w	sp, sp, r3
   d422c:	ae02      	add	r6, sp, #8
void callbackConfig(char* topic, byte* payload, unsigned int length) {
   d422e:	4614      	mov	r4, r2
   d4230:	4680      	mov	r8, r0
    memcpy(p, payload, length);
   d4232:	4630      	mov	r0, r6
   d4234:	f004 fa92 	bl	d875c <memcpy>
    p[length] = NULL;
   d4238:	2300      	movs	r3, #0

    
    if(strcmp(topic, "changeMQTT")==0){
   d423a:	4939      	ldr	r1, [pc, #228]	; (d4320 <_Z14callbackConfigPcPhj+0x108>)
    p[length] = NULL;
   d423c:	5533      	strb	r3, [r6, r4]
    if(strcmp(topic, "changeMQTT")==0){
   d423e:	4640      	mov	r0, r8
   d4240:	f004 fac6 	bl	d87d0 <strcmp>
   d4244:	4604      	mov	r4, r0
   d4246:	b998      	cbnz	r0, d4270 <_Z14callbackConfigPcPhj+0x58>
        String myIpString(p);
   d4248:	4631      	mov	r1, r6
   d424a:	4638      	mov	r0, r7
   d424c:	f002 f825 	bl	d629a <_ZN6StringC1EPKc>
        EEPROM.put(DIR_IP_SERVER, myIpString);
   d4250:	f003 fa66 	bl	d7720 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4254:	2210      	movs	r2, #16
   d4256:	4639      	mov	r1, r7
   d4258:	4620      	mov	r0, r4
   d425a:	f001 fc99 	bl	d5b90 <HAL_EEPROM_Put>
        client.setBroker(p, 1883);
   d425e:	4831      	ldr	r0, [pc, #196]	; (d4324 <_Z14callbackConfigPcPhj+0x10c>)
   d4260:	f240 725b 	movw	r2, #1883	; 0x75b
   d4264:	4631      	mov	r1, r6
   d4266:	f000 fc0b 	bl	d4a80 <_ZN4MQTT9setBrokerEPct>
        String myIpString(p);
   d426a:	4638      	mov	r0, r7
   d426c:	f001 ffca 	bl	d6204 <_ZN6StringD1Ev>
    }

    if(strcmp(topic, "changeNetwork")==0){
   d4270:	492d      	ldr	r1, [pc, #180]	; (d4328 <_Z14callbackConfigPcPhj+0x110>)
   d4272:	4640      	mov	r0, r8
   d4274:	f004 faac 	bl	d87d0 <strcmp>
   d4278:	4605      	mov	r5, r0
   d427a:	bb98      	cbnz	r0, d42e4 <_Z14callbackConfigPcPhj+0xcc>
        String credentials[2];
   d427c:	492b      	ldr	r1, [pc, #172]	; (d432c <_Z14callbackConfigPcPhj+0x114>)
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d427e:	4c2c      	ldr	r4, [pc, #176]	; (d4330 <_Z14callbackConfigPcPhj+0x118>)
   d4280:	4638      	mov	r0, r7
   d4282:	f002 f80a 	bl	d629a <_ZN6StringC1EPKc>
   d4286:	4929      	ldr	r1, [pc, #164]	; (d432c <_Z14callbackConfigPcPhj+0x114>)
   d4288:	f107 0010 	add.w	r0, r7, #16
   d428c:	f002 f805 	bl	d629a <_ZN6StringC1EPKc>
        lightController.getCredentials(credentials,p);
   d4290:	4828      	ldr	r0, [pc, #160]	; (d4334 <_Z14callbackConfigPcPhj+0x11c>)
   d4292:	4632      	mov	r2, r6
   d4294:	4639      	mov	r1, r7
   d4296:	f000 ff7f 	bl	d5198 <_ZN8LightIOT14getCredentialsEP6StringPc>
   d429a:	6860      	ldr	r0, [r4, #4]
   d429c:	462a      	mov	r2, r5
   d429e:	2102      	movs	r1, #2
   d42a0:	f001 fe0a 	bl	d5eb8 <network_disconnect>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d42a4:	462b      	mov	r3, r5
   d42a6:	462a      	mov	r2, r5
   d42a8:	4629      	mov	r1, r5
   d42aa:	6860      	ldr	r0, [r4, #4]
   d42ac:	f001 fe3c 	bl	d5f28 <network_clear_credentials>

        WiFi.disconnect();

        WiFi.clearCredentials();
        WiFi.setCredentials("Luminarias");
   d42b0:	4921      	ldr	r1, [pc, #132]	; (d4338 <_Z14callbackConfigPcPhj+0x120>)
   d42b2:	4620      	mov	r0, r4
   d42b4:	f7ff ffa7 	bl	d4206 <_ZN5spark9WiFiClass14setCredentialsEPKc>
        if(credentials[1].length()==0)  WiFi.setCredentials(credentials[0]);
   d42b8:	69bb      	ldr	r3, [r7, #24]
   d42ba:	bb4b      	cbnz	r3, d4310 <_Z14callbackConfigPcPhj+0xf8>
   d42bc:	6839      	ldr	r1, [r7, #0]
   d42be:	4620      	mov	r0, r4
   d42c0:	f7ff ffa1 	bl	d4206 <_ZN5spark9WiFiClass14setCredentialsEPKc>
        else WiFi.setCredentials(credentials[0],credentials[1]);
        //Activamos wifi e intentamos conexion
        WiFi.on();
   d42c4:	481a      	ldr	r0, [pc, #104]	; (d4330 <_Z14callbackConfigPcPhj+0x118>)
   d42c6:	f7ff ff66 	bl	d4196 <_ZN5spark9WiFiClass2onEv>
        network_connect(*this, flags, 0, NULL);
   d42ca:	2300      	movs	r3, #0
   d42cc:	6860      	ldr	r0, [r4, #4]
   d42ce:	461a      	mov	r2, r3
   d42d0:	4619      	mov	r1, r3
   d42d2:	f001 fde1 	bl	d5e98 <network_connect>
        String credentials[2];
   d42d6:	f107 0010 	add.w	r0, r7, #16
   d42da:	f001 ff93 	bl	d6204 <_ZN6StringD1Ev>
   d42de:	4638      	mov	r0, r7
   d42e0:	f001 ff90 	bl	d6204 <_ZN6StringD1Ev>
        WiFi.connect();
    }

    Serial.print(topic);Serial.print("  ");
   d42e4:	f002 fbcc 	bl	d6a80 <_Z16_fetch_usbserialv>
   d42e8:	4641      	mov	r1, r8
   d42ea:	f002 f8f7 	bl	d64dc <_ZN5Print5printEPKc>
   d42ee:	f002 fbc7 	bl	d6a80 <_Z16_fetch_usbserialv>
   d42f2:	4912      	ldr	r1, [pc, #72]	; (d433c <_Z14callbackConfigPcPhj+0x124>)
   d42f4:	f002 f8f2 	bl	d64dc <_ZN5Print5printEPKc>
    Serial.println(p);
   d42f8:	f002 fbc2 	bl	d6a80 <_Z16_fetch_usbserialv>
   d42fc:	4631      	mov	r1, r6
   d42fe:	f002 f900 	bl	d6502 <_ZN5Print7printlnEPKc>
    delay(100);
   d4302:	2064      	movs	r0, #100	; 0x64
   d4304:	f002 fa1a 	bl	d673c <delay>
}
   d4308:	3720      	adds	r7, #32
   d430a:	46bd      	mov	sp, r7
   d430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return setCredentials(ssid, password, WPA2);
   d4310:	693a      	ldr	r2, [r7, #16]
   d4312:	6839      	ldr	r1, [r7, #0]
   d4314:	9500      	str	r5, [sp, #0]
   d4316:	2303      	movs	r3, #3
   d4318:	4620      	mov	r0, r4
   d431a:	f7ff ff42 	bl	d41a2 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
   d431e:	e7d1      	b.n	d42c4 <_Z14callbackConfigPcPhj+0xac>
   d4320:	000d8861 	.word	0x000d8861
   d4324:	2003dec4 	.word	0x2003dec4
   d4328:	000d886c 	.word	0x000d886c
   d432c:	000d8860 	.word	0x000d8860
   d4330:	2003e7b0 	.word	0x2003e7b0
   d4334:	2003df88 	.word	0x2003df88
   d4338:	000d887a 	.word	0x000d887a
   d433c:	000d885e 	.word	0x000d885e

000d4340 <_Z17connectMqttServerv>:

//=============================================================
//=================== MAIN MQTT CONNECTION ====================
//=============================================================

bool connectMqttServer(){
   d4340:	b590      	push	{r4, r7, lr}
   d4342:	b09d      	sub	sp, #116	; 0x74
   d4344:	af00      	add	r7, sp, #0
    bool state = false;
    Serial.println("Conectando con server MQTT");
   d4346:	f002 fb9b 	bl	d6a80 <_Z16_fetch_usbserialv>
   d434a:	4962      	ldr	r1, [pc, #392]	; (d44d4 <_Z17connectMqttServerv+0x194>)
   d434c:	f002 f8d9 	bl	d6502 <_ZN5Print7printlnEPKc>
    
    
    String myIpString;
   d4350:	4961      	ldr	r1, [pc, #388]	; (d44d8 <_Z17connectMqttServerv+0x198>)
   d4352:	4638      	mov	r0, r7
   d4354:	f001 ffa1 	bl	d629a <_ZN6StringC1EPKc>
    EEPROM.get(DIR_IP_SERVER, myIpString);
   d4358:	f003 f9e2 	bl	d7720 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d435c:	2210      	movs	r2, #16
   d435e:	4639      	mov	r1, r7
   d4360:	2000      	movs	r0, #0
   d4362:	f001 fc0d 	bl	d5b80 <HAL_EEPROM_Get>
    if(myIpString.length()==0) myIpString = "192.68.185.27";
   d4366:	68bb      	ldr	r3, [r7, #8]
   d4368:	b91b      	cbnz	r3, d4372 <_Z17connectMqttServerv+0x32>
   d436a:	495c      	ldr	r1, [pc, #368]	; (d44dc <_Z17connectMqttServerv+0x19c>)
   d436c:	4638      	mov	r0, r7
   d436e:	f001 ffc2 	bl	d62f6 <_ZN6StringaSEPKc>
    char p[myIpString.length()+1];
   d4372:	68ba      	ldr	r2, [r7, #8]
   d4374:	f102 0308 	add.w	r3, r2, #8
   d4378:	f023 0307 	bic.w	r3, r3, #7
   d437c:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4380:	4669      	mov	r1, sp
   d4382:	2300      	movs	r3, #0
   d4384:	4638      	mov	r0, r7
   d4386:	f002 f84c 	bl	d6422 <_ZNK6String8getBytesEPhjj>
    myIpString.toCharArray(p, myIpString.length());
    client.setBroker(p, 1883);
   d438a:	f240 725b 	movw	r2, #1883	; 0x75b
   d438e:	4669      	mov	r1, sp
   d4390:	4853      	ldr	r0, [pc, #332]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d4392:	f000 fb75 	bl	d4a80 <_ZN4MQTT9setBrokerEPct>

    // connect to the server
    Serial.println(System.deviceID());
   d4396:	f002 fb73 	bl	d6a80 <_Z16_fetch_usbserialv>
   d439a:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d439c:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d43a0:	f001 fde2 	bl	d5f68 <spark_deviceID>
   d43a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   d43a6:	4620      	mov	r0, r4
   d43a8:	f002 f8ab 	bl	d6502 <_ZN5Print7printlnEPKc>
   d43ac:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d43b0:	f001 ff28 	bl	d6204 <_ZN6StringD1Ev>
   d43b4:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d43b8:	f001 fdd6 	bl	d5f68 <spark_deviceID>
    client.connect("argonClient",System.deviceID(), "anything");
   d43bc:	4b49      	ldr	r3, [pc, #292]	; (d44e4 <_Z17connectMqttServerv+0x1a4>)
   d43be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   d43c0:	4949      	ldr	r1, [pc, #292]	; (d44e8 <_Z17connectMqttServerv+0x1a8>)
   d43c2:	4847      	ldr	r0, [pc, #284]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d43c4:	f000 fc4a 	bl	d4c5c <_ZN4MQTT7connectEPKcS1_S1_>
   d43c8:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d43cc:	f001 ff1a 	bl	d6204 <_ZN6StringD1Ev>
    
    String baseTopic = "changeMode";
   d43d0:	4946      	ldr	r1, [pc, #280]	; (d44ec <_Z17connectMqttServerv+0x1ac>)
   d43d2:	f107 0010 	add.w	r0, r7, #16
   d43d6:	f001 ff60 	bl	d629a <_ZN6StringC1EPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d43da:	f107 0110 	add.w	r1, r7, #16
   d43de:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d43e2:	f001 ff7d 	bl	d62e0 <_ZN6StringC1ERKS_>
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d43e6:	4942      	ldr	r1, [pc, #264]	; (d44f0 <_Z17connectMqttServerv+0x1b0>)
   d43e8:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d43ec:	f001 fff2 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d43f0:	4604      	mov	r4, r0
   d43f2:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d43f6:	f001 fdb7 	bl	d5f68 <spark_deviceID>
   d43fa:	f107 0160 	add.w	r1, r7, #96	; 0x60
   d43fe:	4620      	mov	r0, r4
   d4400:	f001 ffdc 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d4404:	4601      	mov	r1, r0
   d4406:	f107 0020 	add.w	r0, r7, #32
   d440a:	f001 ff69 	bl	d62e0 <_ZN6StringC1ERKS_>
   d440e:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d4412:	f001 fef7 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4416:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d441a:	f001 fef3 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d441e:	f107 0110 	add.w	r1, r7, #16
   d4422:	f107 0040 	add.w	r0, r7, #64	; 0x40
   d4426:	f001 ff5b 	bl	d62e0 <_ZN6StringC1ERKS_>
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d442a:	4931      	ldr	r1, [pc, #196]	; (d44f0 <_Z17connectMqttServerv+0x1b0>)
   d442c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   d4430:	f001 ffd0 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d4434:	492f      	ldr	r1, [pc, #188]	; (d44f4 <_Z17connectMqttServerv+0x1b4>)
   d4436:	4604      	mov	r4, r0
   d4438:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d443c:	f001 ff2d 	bl	d629a <_ZN6StringC1EPKc>
   d4440:	f107 0150 	add.w	r1, r7, #80	; 0x50
   d4444:	4620      	mov	r0, r4
   d4446:	f001 ffb9 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d444a:	220a      	movs	r2, #10
   d444c:	4604      	mov	r4, r0
   d444e:	2101      	movs	r1, #1
   d4450:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d4454:	f001 ff61 	bl	d631a <_ZN6StringC1Eih>
   d4458:	f107 0160 	add.w	r1, r7, #96	; 0x60
   d445c:	4620      	mov	r0, r4
   d445e:	f001 ffad 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d4462:	4601      	mov	r1, r0
   d4464:	f107 0030 	add.w	r0, r7, #48	; 0x30
   d4468:	f001 ff3a 	bl	d62e0 <_ZN6StringC1ERKS_>
   d446c:	f107 0060 	add.w	r0, r7, #96	; 0x60
   d4470:	f001 fec8 	bl	d6204 <_ZN6StringD1Ev>
   d4474:	f107 0050 	add.w	r0, r7, #80	; 0x50
   d4478:	f001 fec4 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d447c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   d4480:	f001 fec0 	bl	d6204 <_ZN6StringD1Ev>

    // publish/subscribe
    if (client.isConnected()) {
   d4484:	4816      	ldr	r0, [pc, #88]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d4486:	f000 faed 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d448a:	4604      	mov	r4, r0
   d448c:	b170      	cbz	r0, d44ac <_Z17connectMqttServerv+0x16c>
        client.subscribe(baseTopic, MQTT::QOS2);
   d448e:	6939      	ldr	r1, [r7, #16]
   d4490:	4813      	ldr	r0, [pc, #76]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d4492:	2202      	movs	r2, #2
   d4494:	f000 fdbe 	bl	d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceID, MQTT::QOS2);
   d4498:	6a39      	ldr	r1, [r7, #32]
   d449a:	4811      	ldr	r0, [pc, #68]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d449c:	2202      	movs	r2, #2
   d449e:	f000 fdb9 	bl	d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        client.subscribe(topicDeviceName, MQTT::QOS2);
   d44a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
   d44a4:	480e      	ldr	r0, [pc, #56]	; (d44e0 <_Z17connectMqttServerv+0x1a0>)
   d44a6:	2202      	movs	r2, #2
   d44a8:	f000 fdb4 	bl	d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
    String topicDeviceName = baseTopic + "/" + String("Luminaria") + String(LIGHT_NUMBER);
   d44ac:	f107 0030 	add.w	r0, r7, #48	; 0x30
   d44b0:	f001 fea8 	bl	d6204 <_ZN6StringD1Ev>
    String topicDeviceID = baseTopic+ "/" + System.deviceID();
   d44b4:	f107 0020 	add.w	r0, r7, #32
   d44b8:	f001 fea4 	bl	d6204 <_ZN6StringD1Ev>
    String baseTopic = "changeMode";
   d44bc:	f107 0010 	add.w	r0, r7, #16
   d44c0:	f001 fea0 	bl	d6204 <_ZN6StringD1Ev>
    String myIpString;
   d44c4:	4638      	mov	r0, r7
   d44c6:	f001 fe9d 	bl	d6204 <_ZN6StringD1Ev>
        state = true;
    }

    return state;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	3774      	adds	r7, #116	; 0x74
   d44ce:	46bd      	mov	sp, r7
   d44d0:	bd90      	pop	{r4, r7, pc}
   d44d2:	bf00      	nop
   d44d4:	000d8885 	.word	0x000d8885
   d44d8:	000d8860 	.word	0x000d8860
   d44dc:	000d88a0 	.word	0x000d88a0
   d44e0:	2003dec4 	.word	0x2003dec4
   d44e4:	000d88ae 	.word	0x000d88ae
   d44e8:	000d88b7 	.word	0x000d88b7
   d44ec:	000d88c3 	.word	0x000d88c3
   d44f0:	000d88ce 	.word	0x000d88ce
   d44f4:	000d88d0 	.word	0x000d88d0

000d44f8 <_Z17connectMqttConfigv>:

//=============================================================
//=================== CONFIG MQTT CONNECTION ==================
//=============================================================
bool connectMqttConfig(){
   d44f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool state = false;
    Serial.println("Conectando con server MQTT Config");
   d44fa:	f002 fac1 	bl	d6a80 <_Z16_fetch_usbserialv>
   d44fe:	4910      	ldr	r1, [pc, #64]	; (d4540 <_Z17connectMqttConfigv+0x48>)
   d4500:	f001 ffff 	bl	d6502 <_ZN5Print7printlnEPKc>
   d4504:	4668      	mov	r0, sp
   d4506:	f001 fd2f 	bl	d5f68 <spark_deviceID>
    // connect to the server
    clientConfig.connect("argonClient",System.deviceID(), "anything");
   d450a:	4b0e      	ldr	r3, [pc, #56]	; (d4544 <_Z17connectMqttConfigv+0x4c>)
   d450c:	9a00      	ldr	r2, [sp, #0]
   d450e:	490e      	ldr	r1, [pc, #56]	; (d4548 <_Z17connectMqttConfigv+0x50>)
   d4510:	480e      	ldr	r0, [pc, #56]	; (d454c <_Z17connectMqttConfigv+0x54>)
   d4512:	f000 fba3 	bl	d4c5c <_ZN4MQTT7connectEPKcS1_S1_>
   d4516:	4668      	mov	r0, sp
   d4518:	f001 fe74 	bl	d6204 <_ZN6StringD1Ev>

    // publish/subscribe
    if (clientConfig.isConnected()) {
   d451c:	480b      	ldr	r0, [pc, #44]	; (d454c <_Z17connectMqttConfigv+0x54>)
   d451e:	f000 faa1 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4522:	4604      	mov	r4, r0
   d4524:	b148      	cbz	r0, d453a <_Z17connectMqttConfigv+0x42>
        clientConfig.subscribe("changeNetwork", MQTT::QOS2);
   d4526:	490a      	ldr	r1, [pc, #40]	; (d4550 <_Z17connectMqttConfigv+0x58>)
   d4528:	4808      	ldr	r0, [pc, #32]	; (d454c <_Z17connectMqttConfigv+0x54>)
   d452a:	2202      	movs	r2, #2
   d452c:	f000 fd72 	bl	d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        clientConfig.subscribe("changeMQTT", MQTT::QOS2);
   d4530:	4908      	ldr	r1, [pc, #32]	; (d4554 <_Z17connectMqttConfigv+0x5c>)
   d4532:	4806      	ldr	r0, [pc, #24]	; (d454c <_Z17connectMqttConfigv+0x54>)
   d4534:	2202      	movs	r2, #2
   d4536:	f000 fd6d 	bl	d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
        state = true;
    }

    return state;
   d453a:	4620      	mov	r0, r4
   d453c:	b004      	add	sp, #16
   d453e:	bd10      	pop	{r4, pc}
   d4540:	000d88da 	.word	0x000d88da
   d4544:	000d88ae 	.word	0x000d88ae
   d4548:	000d88b7 	.word	0x000d88b7
   d454c:	2003df1c 	.word	0x2003df1c
   d4550:	000d886c 	.word	0x000d886c
   d4554:	000d8861 	.word	0x000d8861

000d4558 <_Z20rutineConnectionMQTTv>:
void rutineConnectionMQTT(){
   d4558:	b508      	push	{r3, lr}
    if(!connectMqttServer()) {
   d455a:	f7ff fef1 	bl	d4340 <_Z17connectMqttServerv>
   d455e:	b970      	cbnz	r0, d457e <_Z20rutineConnectionMQTTv+0x26>
        if(!connectMqttConfig()){
   d4560:	f7ff ffca 	bl	d44f8 <_Z17connectMqttConfigv>
   d4564:	2800      	cmp	r0, #0
   d4566:	d0f8      	beq.n	d455a <_Z20rutineConnectionMQTTv+0x2>
        }else Serial.println("Connexion MQTT CONFIG exitosa");
   d4568:	f002 fa8a 	bl	d6a80 <_Z16_fetch_usbserialv>
   d456c:	4906      	ldr	r1, [pc, #24]	; (d4588 <_Z20rutineConnectionMQTTv+0x30>)
    }else Serial.println("Connexion MQTT exitosa");
   d456e:	f001 ffc8 	bl	d6502 <_ZN5Print7printlnEPKc>
}
   d4572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1000);
   d4576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d457a:	f002 b8df 	b.w	d673c <delay>
    }else Serial.println("Connexion MQTT exitosa");
   d457e:	f002 fa7f 	bl	d6a80 <_Z16_fetch_usbserialv>
   d4582:	4902      	ldr	r1, [pc, #8]	; (d458c <_Z20rutineConnectionMQTTv+0x34>)
   d4584:	e7f3      	b.n	d456e <_Z20rutineConnectionMQTTv+0x16>
   d4586:	bf00      	nop
   d4588:	000d88fc 	.word	0x000d88fc
   d458c:	000d891a 	.word	0x000d891a

000d4590 <setup>:
void setup() {    
   d4590:	b538      	push	{r3, r4, r5, lr}
    pinMode(D7,OUTPUT);
   d4592:	2101      	movs	r1, #1
   d4594:	2007      	movs	r0, #7
   d4596:	f003 f853 	bl	d7640 <pinMode>
    Serial.begin(115200);
   d459a:	f002 fa71 	bl	d6a80 <_Z16_fetch_usbserialv>
   d459e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d45a2:	f002 fa61 	bl	d6a68 <_ZN9USBSerial5beginEl>
    Serial.println("Conectando con sensores INA219...!");
   d45a6:	f002 fa6b 	bl	d6a80 <_Z16_fetch_usbserialv>
   d45aa:	491f      	ldr	r1, [pc, #124]	; (d4628 <setup+0x98>)
    WiFi.setCredentials("Luminarias");
   d45ac:	4c1f      	ldr	r4, [pc, #124]	; (d462c <setup+0x9c>)
    Serial.println("Conectando con sensores INA219...!");
   d45ae:	f001 ffa8 	bl	d6502 <_ZN5Print7printlnEPKc>
    lightController.begin();
   d45b2:	481f      	ldr	r0, [pc, #124]	; (d4630 <setup+0xa0>)
   d45b4:	f000 fdde 	bl	d5174 <_ZN8LightIOT5beginEv>
    Serial.println("Midiendo VOLTAJE y CORRIENTE con INA219 ...");
   d45b8:	f002 fa62 	bl	d6a80 <_Z16_fetch_usbserialv>
   d45bc:	491d      	ldr	r1, [pc, #116]	; (d4634 <setup+0xa4>)
   d45be:	f001 ffa0 	bl	d6502 <_ZN5Print7printlnEPKc>
    WiFi.setCredentials("Luminarias");
   d45c2:	491d      	ldr	r1, [pc, #116]	; (d4638 <setup+0xa8>)
   d45c4:	4620      	mov	r0, r4
   d45c6:	f7ff fe1e 	bl	d4206 <_ZN5spark9WiFiClass14setCredentialsEPKc>
        WiFi.on();
   d45ca:	4620      	mov	r0, r4
   d45cc:	f7ff fde3 	bl	d4196 <_ZN5spark9WiFiClass2onEv>
        network_connect(*this, flags, 0, NULL);
   d45d0:	2300      	movs	r3, #0
   d45d2:	6860      	ldr	r0, [r4, #4]
   d45d4:	461a      	mov	r2, r3
   d45d6:	4619      	mov	r1, r3
   d45d8:	f001 fc5e 	bl	d5e98 <network_connect>
        waitUntil(WiFi.ready); 
   d45dc:	4625      	mov	r5, r4
   d45de:	4628      	mov	r0, r5
   d45e0:	f7ff fdd4 	bl	d418c <_ZN5spark9WiFiClass5readyEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45e4:	b910      	cbnz	r0, d45ec <setup+0x5c>
            spark_process();
   d45e6:	f001 fcb7 	bl	d5f58 <spark_process>
        while (_while() && !_condition()) {
   d45ea:	e7f8      	b.n	d45de <setup+0x4e>
   d45ec:	480f      	ldr	r0, [pc, #60]	; (d462c <setup+0x9c>)
   d45ee:	f7ff fdcd 	bl	d418c <_ZN5spark9WiFiClass5readyEv>
    Serial.println(WiFi.SSID());
   d45f2:	f002 fa45 	bl	d6a80 <_Z16_fetch_usbserialv>
        return (WLanConfig*)network_config(*this, 0, NULL);
   d45f6:	2200      	movs	r2, #0
   d45f8:	4611      	mov	r1, r2
   d45fa:	4605      	mov	r5, r0
   d45fc:	6860      	ldr	r0, [r4, #4]
   d45fe:	f001 fc43 	bl	d5e88 <network_config>
   d4602:	f100 015d 	add.w	r1, r0, #93	; 0x5d
   d4606:	4628      	mov	r0, r5
   d4608:	f001 ff7b 	bl	d6502 <_ZN5Print7printlnEPKc>
    digitalWrite(D7,HIGH);
   d460c:	2007      	movs	r0, #7
   d460e:	2101      	movs	r1, #1
   d4610:	f003 f827 	bl	d7662 <digitalWrite>
    if(WiFi.ready()) rutineConnectionMQTT();
   d4614:	4805      	ldr	r0, [pc, #20]	; (d462c <setup+0x9c>)
   d4616:	f7ff fdb9 	bl	d418c <_ZN5spark9WiFiClass5readyEv>
   d461a:	b118      	cbz	r0, d4624 <setup+0x94>
}
   d461c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(WiFi.ready()) rutineConnectionMQTT();
   d4620:	f7ff bf9a 	b.w	d4558 <_Z20rutineConnectionMQTTv>
}
   d4624:	bd38      	pop	{r3, r4, r5, pc}
   d4626:	bf00      	nop
   d4628:	000d8931 	.word	0x000d8931
   d462c:	2003e7b0 	.word	0x2003e7b0
   d4630:	2003df88 	.word	0x2003df88
   d4634:	000d8954 	.word	0x000d8954
   d4638:	000d887a 	.word	0x000d887a

000d463c <loop>:
void loop() {
   d463c:	b530      	push	{r4, r5, lr}
    if(client.isConnected())   client.loop();
   d463e:	483e      	ldr	r0, [pc, #248]	; (d4738 <loop+0xfc>)
void loop() {
   d4640:	b08f      	sub	sp, #60	; 0x3c
    if(client.isConnected())   client.loop();
   d4642:	f000 fa0f 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4646:	2800      	cmp	r0, #0
   d4648:	d065      	beq.n	d4716 <loop+0xda>
   d464a:	483b      	ldr	r0, [pc, #236]	; (d4738 <loop+0xfc>)
    else if(clientConfig.isConnected())   clientConfig.loop();
   d464c:	f000 fbd3 	bl	d4df6 <_ZN4MQTT4loopEv>
    lightController.measuring(vAverage,cAverage);
   d4650:	4d3a      	ldr	r5, [pc, #232]	; (d473c <loop+0x100>)
   d4652:	4c3b      	ldr	r4, [pc, #236]	; (d4740 <loop+0x104>)
   d4654:	483b      	ldr	r0, [pc, #236]	; (d4744 <loop+0x108>)
   d4656:	462a      	mov	r2, r5
   d4658:	4621      	mov	r1, r4
   d465a:	f000 fe73 	bl	d5344 <_ZN8LightIOT9measuringEPfS0_>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d465e:	f001 fa7f 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
    if(t > last_t + interval) {
   d4662:	4a39      	ldr	r2, [pc, #228]	; (d4748 <loop+0x10c>)
   d4664:	6813      	ldr	r3, [r2, #0]
   d4666:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   d466a:	3308      	adds	r3, #8
   d466c:	4283      	cmp	r3, r0
   d466e:	d250      	bcs.n	d4712 <loop+0xd6>
        lightController.getAverage(vAverage,cAverage);
   d4670:	4621      	mov	r1, r4
    	last_t = t;
   d4672:	6010      	str	r0, [r2, #0]
        lightController.getAverage(vAverage,cAverage);
   d4674:	462a      	mov	r2, r5
   d4676:	4833      	ldr	r0, [pc, #204]	; (d4744 <loop+0x108>)
   d4678:	f000 fec8 	bl	d540c <_ZN8LightIOT10getAverageEPfS0_>
        lightController.resetModeForError(vAverage[0],cAverage[0]);
   d467c:	edd5 0a00 	vldr	s1, [r5]
   d4680:	ed94 0a00 	vldr	s0, [r4]
   d4684:	482f      	ldr	r0, [pc, #188]	; (d4744 <loop+0x108>)
   d4686:	f001 f909 	bl	d589c <_ZN8LightIOT17resetModeForErrorEff>
        Serial.println(vAverage[0]);
   d468a:	f002 f9f9 	bl	d6a80 <_Z16_fetch_usbserialv>
   d468e:	ed94 0a00 	vldr	s0, [r4]
   d4692:	2102      	movs	r1, #2
   d4694:	f002 f831 	bl	d66fa <_ZN5Print7printlnEfi>
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d4698:	492a      	ldr	r1, [pc, #168]	; (d4744 <loop+0x108>)
   d469a:	462b      	mov	r3, r5
   d469c:	4622      	mov	r2, r4
   d469e:	a801      	add	r0, sp, #4
   d46a0:	f000 ff08 	bl	d54b4 <_ZN8LightIOT13sensorsToJSONEPfS0_>
        lightController.resetAverage(vAverage,cAverage);
   d46a4:	4827      	ldr	r0, [pc, #156]	; (d4744 <loop+0x108>)
   d46a6:	462a      	mov	r2, r5
   d46a8:	4621      	mov	r1, r4
   d46aa:	f000 fef8 	bl	d549e <_ZN8LightIOT12resetAverageEPfS0_>
    	if (client.isConnected()) {
   d46ae:	4822      	ldr	r0, [pc, #136]	; (d4738 <loop+0xfc>)
   d46b0:	f000 f9d8 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d46b4:	b350      	cbz	r0, d470c <loop+0xd0>
            client.publish("newData",dataJson);
   d46b6:	9a01      	ldr	r2, [sp, #4]
   d46b8:	4924      	ldr	r1, [pc, #144]	; (d474c <loop+0x110>)
   d46ba:	481f      	ldr	r0, [pc, #124]	; (d4738 <loop+0xfc>)
   d46bc:	f000 fb53 	bl	d4d66 <_ZN4MQTT7publishEPKcS1_>
            digitalWrite(D7,!digitalRead(D7)); 
   d46c0:	2007      	movs	r0, #7
   d46c2:	f002 ffe7 	bl	d7694 <digitalRead>
   d46c6:	fab0 f180 	clz	r1, r0
   d46ca:	0949      	lsrs	r1, r1, #5
   d46cc:	2007      	movs	r0, #7
   d46ce:	f002 ffc8 	bl	d7662 <digitalWrite>
            int rssi = WiFi.RSSI();
   d46d2:	491f      	ldr	r1, [pc, #124]	; (d4750 <loop+0x114>)
   d46d4:	a805      	add	r0, sp, #20
   d46d6:	f002 fe91 	bl	d73fc <_ZN5spark9WiFiClass4RSSIEv>
   d46da:	a805      	add	r0, sp, #20
   d46dc:	f002 fe6a 	bl	d73b4 <_ZNK10WiFiSignalcvaEv>
   d46e0:	4604      	mov	r4, r0
            Serial.print("RSSI: ");Serial.println(rssi);
   d46e2:	f002 f9cd 	bl	d6a80 <_Z16_fetch_usbserialv>
   d46e6:	491b      	ldr	r1, [pc, #108]	; (d4754 <loop+0x118>)
   d46e8:	f001 fef8 	bl	d64dc <_ZN5Print5printEPKc>
   d46ec:	f002 f9c8 	bl	d6a80 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d46f0:	2c00      	cmp	r4, #0
   d46f2:	4605      	mov	r5, r0
   d46f4:	da1d      	bge.n	d4732 <loop+0xf6>
            t = print('-');
   d46f6:	212d      	movs	r1, #45	; 0x2d
   d46f8:	f001 fef4 	bl	d64e4 <_ZN5Print5printEc>
            val = -n;
   d46fc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d46fe:	220a      	movs	r2, #10
   d4700:	4628      	mov	r0, r5
   d4702:	f001 ff08 	bl	d6516 <_ZN5Print11printNumberEmh>
        n += println();
   d4706:	4628      	mov	r0, r5
   d4708:	f001 feef 	bl	d64ea <_ZN5Print7printlnEv>
        String dataJson = lightController.sensorsToJSON(vAverage,cAverage);
   d470c:	a801      	add	r0, sp, #4
   d470e:	f001 fd79 	bl	d6204 <_ZN6StringD1Ev>
}
   d4712:	b00f      	add	sp, #60	; 0x3c
   d4714:	bd30      	pop	{r4, r5, pc}
    else if(clientConfig.isConnected())   clientConfig.loop();
   d4716:	4810      	ldr	r0, [pc, #64]	; (d4758 <loop+0x11c>)
   d4718:	f000 f9a4 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d471c:	b108      	cbz	r0, d4722 <loop+0xe6>
   d471e:	480e      	ldr	r0, [pc, #56]	; (d4758 <loop+0x11c>)
   d4720:	e794      	b.n	d464c <loop+0x10>
    else if(WiFi.ready()) rutineConnectionMQTT();
   d4722:	480b      	ldr	r0, [pc, #44]	; (d4750 <loop+0x114>)
   d4724:	f7ff fd32 	bl	d418c <_ZN5spark9WiFiClass5readyEv>
   d4728:	2800      	cmp	r0, #0
   d472a:	d091      	beq.n	d4650 <loop+0x14>
   d472c:	f7ff ff14 	bl	d4558 <_Z20rutineConnectionMQTTv>
   d4730:	e78e      	b.n	d4650 <loop+0x14>
            val = n;
   d4732:	4621      	mov	r1, r4
   d4734:	e7e3      	b.n	d46fe <loop+0xc2>
   d4736:	bf00      	nop
   d4738:	2003dec4 	.word	0x2003dec4
   d473c:	2003deb8 	.word	0x2003deb8
   d4740:	2003e600 	.word	0x2003e600
   d4744:	2003df88 	.word	0x2003df88
   d4748:	2003df84 	.word	0x2003df84
   d474c:	000d8980 	.word	0x000d8980
   d4750:	2003e7b0 	.word	0x2003e7b0
   d4754:	000d8988 	.word	0x000d8988
   d4758:	2003df1c 	.word	0x2003df1c

000d475c <_GLOBAL__sub_I_SystemMode>:
   d475c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d475e:	4d22      	ldr	r5, [pc, #136]	; (d47e8 <_GLOBAL__sub_I_SystemMode+0x8c>)
    SleepResult() {}
   d4760:	4b22      	ldr	r3, [pc, #136]	; (d47ec <_GLOBAL__sub_I_SystemMode+0x90>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4762:	4c23      	ldr	r4, [pc, #140]	; (d47f0 <_GLOBAL__sub_I_SystemMode+0x94>)
   d4764:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4766:	2600      	movs	r6, #0
   d4768:	602e      	str	r6, [r5, #0]
   d476a:	80ae      	strh	r6, [r5, #4]
    SleepResult() {}
   d476c:	71ae      	strb	r6, [r5, #6]
        set_system_mode(mode);
   d476e:	2002      	movs	r0, #2
   d4770:	f001 fb5e 	bl	d5e30 <set_system_mode>
   d4774:	4622      	mov	r2, r4
   d4776:	491f      	ldr	r1, [pc, #124]	; (d47f4 <_GLOBAL__sub_I_SystemMode+0x98>)
   d4778:	4628      	mov	r0, r5
LightIOT lightController(LIGHT_NUMBER);
   d477a:	4d1f      	ldr	r5, [pc, #124]	; (d47f8 <_GLOBAL__sub_I_SystemMode+0x9c>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d477c:	f003 f826 	bl	d77cc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4780:	4631      	mov	r1, r6
   d4782:	2001      	movs	r0, #1
   d4784:	f001 fb64 	bl	d5e50 <system_thread_set_state>
LightIOT lightController(LIGHT_NUMBER);
   d4788:	2101      	movs	r1, #1
   d478a:	4628      	mov	r0, r5
   d478c:	f000 fc94 	bl	d50b8 <_ZN8LightIOTC1Ei>
   d4790:	4628      	mov	r0, r5
MQTT client("209.182.218.175", 1883, callback);
   d4792:	4d1a      	ldr	r5, [pc, #104]	; (d47fc <_GLOBAL__sub_I_SystemMode+0xa0>)
LightIOT lightController(LIGHT_NUMBER);
   d4794:	491a      	ldr	r1, [pc, #104]	; (d4800 <_GLOBAL__sub_I_SystemMode+0xa4>)
MQTT client("209.182.218.175", 1883, callback);
   d4796:	4e1b      	ldr	r6, [pc, #108]	; (d4804 <_GLOBAL__sub_I_SystemMode+0xa8>)
LightIOT lightController(LIGHT_NUMBER);
   d4798:	4622      	mov	r2, r4
   d479a:	f003 f817 	bl	d77cc <__aeabi_atexit>
MQTT client("209.182.218.175", 1883, callback);
   d479e:	4b1a      	ldr	r3, [pc, #104]	; (d4808 <_GLOBAL__sub_I_SystemMode+0xac>)
   d47a0:	491a      	ldr	r1, [pc, #104]	; (d480c <_GLOBAL__sub_I_SystemMode+0xb0>)
   d47a2:	f240 725b 	movw	r2, #1883	; 0x75b
   d47a6:	4628      	mov	r0, r5
   d47a8:	f000 f860 	bl	d486c <_ZN4MQTTC1EPctPFvS0_PhjE>
   d47ac:	4628      	mov	r0, r5
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d47ae:	4d18      	ldr	r5, [pc, #96]	; (d4810 <_GLOBAL__sub_I_SystemMode+0xb4>)
MQTT client("209.182.218.175", 1883, callback);
   d47b0:	4622      	mov	r2, r4
   d47b2:	4631      	mov	r1, r6
   d47b4:	f003 f80a 	bl	d77cc <__aeabi_atexit>
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d47b8:	4b16      	ldr	r3, [pc, #88]	; (d4814 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d47ba:	4917      	ldr	r1, [pc, #92]	; (d4818 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d47bc:	f240 725b 	movw	r2, #1883	; 0x75b
   d47c0:	4628      	mov	r0, r5
   d47c2:	f000 f853 	bl	d486c <_ZN4MQTTC1EPctPFvS0_PhjE>
   d47c6:	4628      	mov	r0, r5
String ipServer="192.68.185.27";
   d47c8:	4d14      	ldr	r5, [pc, #80]	; (d481c <_GLOBAL__sub_I_SystemMode+0xc0>)
MQTT clientConfig("192.168.1.6", 1883, callbackConfig);
   d47ca:	4622      	mov	r2, r4
   d47cc:	4631      	mov	r1, r6
   d47ce:	f002 fffd 	bl	d77cc <__aeabi_atexit>
String ipServer="192.68.185.27";
   d47d2:	4913      	ldr	r1, [pc, #76]	; (d4820 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d47d4:	4628      	mov	r0, r5
   d47d6:	f001 fd60 	bl	d629a <_ZN6StringC1EPKc>
   d47da:	4622      	mov	r2, r4
   d47dc:	4628      	mov	r0, r5
   d47de:	4911      	ldr	r1, [pc, #68]	; (d4824 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d47e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String ipServer="192.68.185.27";
   d47e4:	f002 bff2 	b.w	d77cc <__aeabi_atexit>
   d47e8:	2003deac 	.word	0x2003deac
   d47ec:	ffff0000 	.word	0xffff0000
   d47f0:	2003dea8 	.word	0x2003dea8
   d47f4:	000d417d 	.word	0x000d417d
   d47f8:	2003df88 	.word	0x2003df88
   d47fc:	2003dec4 	.word	0x2003dec4
   d4800:	000d416d 	.word	0x000d416d
   d4804:	000d5069 	.word	0x000d5069
   d4808:	000d40b9 	.word	0x000d40b9
   d480c:	000d898f 	.word	0x000d898f
   d4810:	2003df1c 	.word	0x2003df1c
   d4814:	000d4219 	.word	0x000d4219
   d4818:	000d899f 	.word	0x000d899f
   d481c:	2003df74 	.word	0x2003df74
   d4820:	000d88a0 	.word	0x000d88a0
   d4824:	000d6205 	.word	0x000d6205

000d4828 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4828:	b538      	push	{r3, r4, r5, lr}
   d482a:	461d      	mov	r5, r3
    this->callback = callback;
   d482c:	9b05      	ldr	r3, [sp, #20]
   d482e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d4830:	2300      	movs	r3, #0
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4832:	4604      	mov	r4, r0
    this->qoscallback = NULL;
   d4834:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d4836:	b102      	cbz	r2, d483a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d4838:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d483a:	b119      	cbz	r1, d4844 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d483c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4840:	f001 fd59 	bl	d62f6 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4844:	9b04      	ldr	r3, [sp, #16]
   d4846:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4848:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d484a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d484c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4850:	2bff      	cmp	r3, #255	; 0xff
   d4852:	bfb8      	it	lt
   d4854:	23ff      	movlt	r3, #255	; 0xff
   d4856:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d485a:	b108      	cbz	r0, d4860 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d485c:	f7ff fc21 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4860:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4864:	f7ff fc19 	bl	d409a <_Znaj>
   d4868:	61e0      	str	r0, [r4, #28]
}
   d486a:	bd38      	pop	{r3, r4, r5, pc}

000d486c <_ZN4MQTTC1EPctPFvS0_PhjE>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d486c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4870:	4604      	mov	r4, r0
   d4872:	2600      	movs	r6, #0
   d4874:	4617      	mov	r7, r2
   d4876:	4698      	mov	r8, r3
   d4878:	460d      	mov	r5, r1
   d487a:	f002 fcf3 	bl	d7264 <_ZN9TCPClientC1Ev>
   d487e:	490b      	ldr	r1, [pc, #44]	; (d48ac <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d4880:	61e6      	str	r6, [r4, #28]
   d4882:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4886:	f001 fd08 	bl	d629a <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d488a:	23ff      	movs	r3, #255	; 0xff
   d488c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   d4890:	230f      	movs	r3, #15
   d4892:	9300      	str	r3, [sp, #0]
   d4894:	4620      	mov	r0, r4
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4896:	64a6      	str	r6, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4898:	463b      	mov	r3, r7
   d489a:	4632      	mov	r2, r6
   d489c:	4629      	mov	r1, r5
   d489e:	f7ff ffc3 	bl	d4828 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d48a2:	4620      	mov	r0, r4
   d48a4:	b004      	add	sp, #16
   d48a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48aa:	bf00      	nop
   d48ac:	000d8860 	.word	0x000d8860

000d48b0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d48b0:	b510      	push	{r4, lr}
   d48b2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d48b4:	4620      	mov	r0, r4
   d48b6:	f002 fc31 	bl	d711c <_ZN9TCPClient9availableEv>
   d48ba:	2800      	cmp	r0, #0
   d48bc:	d0fa      	beq.n	d48b4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d48be:	4620      	mov	r0, r4
   d48c0:	f002 fae5 	bl	d6e8e <_ZN9TCPClient4readEv>
}
   d48c4:	b2c0      	uxtb	r0, r0
   d48c6:	bd10      	pop	{r4, pc}

000d48c8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d48c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48cc:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d48ce:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d48d0:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d48d2:	f7ff ffed 	bl	d48b0 <_ZN4MQTT8readByteEv>
   d48d6:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d48d8:	69eb      	ldr	r3, [r5, #28]
   d48da:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d48de:	f04f 0901 	mov.w	r9, #1
   d48e2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d48e6:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d48ea:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d48ec:	4628      	mov	r0, r5
   d48ee:	f7ff ffdf 	bl	d48b0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d48f2:	4626      	mov	r6, r4
   d48f4:	69eb      	ldr	r3, [r5, #28]
   d48f6:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d48f8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d48fc:	fb13 f309 	smulbb	r3, r3, r9
   d4900:	4498      	add	r8, r3
        buffer[len++] = digit;
   d4902:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4904:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4906:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4908:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d490c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4910:	d4ec      	bmi.n	d48ec <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d4912:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4914:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4918:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d491a:	d124      	bne.n	d4966 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d491c:	4628      	mov	r0, r5
   d491e:	69ef      	ldr	r7, [r5, #28]
   d4920:	f7ff ffc6 	bl	d48b0 <_ZN4MQTT8readByteEv>
   d4924:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4926:	4628      	mov	r0, r5
   d4928:	69ef      	ldr	r7, [r5, #28]
   d492a:	1cf4      	adds	r4, r6, #3
   d492c:	f7ff ffc0 	bl	d48b0 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4930:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d4932:	b2b6      	uxth	r6, r6
   d4934:	b2a4      	uxth	r4, r4
   d4936:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4938:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d493a:	b2b6      	uxth	r6, r6
   d493c:	46b1      	mov	r9, r6
   d493e:	4627      	mov	r7, r4
   d4940:	45c1      	cmp	r9, r8
   d4942:	d212      	bcs.n	d496a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4944:	4628      	mov	r0, r5
   d4946:	f7ff ffb3 	bl	d48b0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d494a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d494e:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d4950:	bf88      	it	hi
   d4952:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4954:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4958:	bf88      	it	hi
   d495a:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d495c:	3701      	adds	r7, #1
   d495e:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d4960:	fa1f f989 	uxth.w	r9, r9
   d4964:	e7ec      	b.n	d4940 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4966:	2600      	movs	r6, #0
   d4968:	e7e7      	b.n	d493a <_ZN4MQTT10readPacketEPh+0x72>
   d496a:	eba8 0006 	sub.w	r0, r8, r6
   d496e:	45b0      	cmp	r8, r6
   d4970:	bf2c      	ite	cs
   d4972:	4606      	movcs	r6, r0
   d4974:	2600      	movcc	r6, #0
   d4976:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d4978:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d497c:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d497e:	42a0      	cmp	r0, r4
   d4980:	bf2c      	ite	cs
   d4982:	4620      	movcs	r0, r4
   d4984:	2000      	movcc	r0, #0
   d4986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d498a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d498a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d498c:	468c      	mov	ip, r1
   d498e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4990:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4992:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4994:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d4996:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4998:	a802      	add	r0, sp, #8
        digit = len % 128;
   d499a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d499e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d49a2:	f103 0401 	add.w	r4, r3, #1
   d49a6:	4403      	add	r3, r0
            digit |= 0x80;
   d49a8:	bf88      	it	hi
   d49aa:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d49ae:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d49b2:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d49b6:	b2e4      	uxtb	r4, r4
   d49b8:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d49bc:	d810      	bhi.n	d49e0 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d49be:	f1c4 0304 	rsb	r3, r4, #4
   d49c2:	18d1      	adds	r1, r2, r3
   d49c4:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d49c8:	f1c4 0305 	rsb	r3, r4, #5
   d49cc:	4413      	add	r3, r2
   d49ce:	a801      	add	r0, sp, #4
   d49d0:	3205      	adds	r2, #5
   d49d2:	4293      	cmp	r3, r2
   d49d4:	d006      	beq.n	d49e4 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d49d6:	f810 5b01 	ldrb.w	r5, [r0], #1
   d49da:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d49de:	e7f8      	b.n	d49d2 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d49e0:	4623      	mov	r3, r4
   d49e2:	e7d8      	b.n	d4996 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d49e4:	1c72      	adds	r2, r6, #1
   d49e6:	4422      	add	r2, r4
   d49e8:	4638      	mov	r0, r7
   d49ea:	f002 f979 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
   d49ee:	4605      	mov	r5, r0
   d49f0:	f001 f8b6 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d49f4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d49f6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d49f8:	4432      	add	r2, r6
   d49fa:	b2a8      	uxth	r0, r5
}
   d49fc:	1a13      	subs	r3, r2, r0
   d49fe:	4258      	negs	r0, r3
   d4a00:	4158      	adcs	r0, r3
   d4a02:	b003      	add	sp, #12
   d4a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a06 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4a06:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d4a08:	69c3      	ldr	r3, [r0, #28]
   d4a0a:	22e0      	movs	r2, #224	; 0xe0
   d4a0c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4a0e:	69c3      	ldr	r3, [r0, #28]
   d4a10:	2200      	movs	r2, #0
   d4a12:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d4a14:	69c1      	ldr	r1, [r0, #28]
void MQTT::disconnect() {
   d4a16:	4604      	mov	r4, r0
    _client.write(buffer,2);
   d4a18:	2202      	movs	r2, #2
   d4a1a:	f002 f961 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f002 fbd6 	bl	d71d0 <_ZN9TCPClient4stopEv>
   d4a24:	f001 f89c 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4a28:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
   d4a2c:	bd10      	pop	{r4, pc}

000d4a2e <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4a2e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a32:	4604      	mov	r4, r0
    pos += 2;
   d4a34:	b298      	uxth	r0, r3
   d4a36:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4a38:	5ccd      	ldrb	r5, [r1, r3]
   d4a3a:	b155      	cbz	r5, d4a52 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d4a3c:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4a40:	4286      	cmp	r6, r0
   d4a42:	f103 0701 	add.w	r7, r3, #1
   d4a46:	d904      	bls.n	d4a52 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d4a48:	1c46      	adds	r6, r0, #1
   d4a4a:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d4a4c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d4a4e:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d4a50:	e7f2      	b.n	d4a38 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4a52:	b299      	uxth	r1, r3
   d4a54:	1a44      	subs	r4, r0, r1
   d4a56:	4422      	add	r2, r4
   d4a58:	1209      	asrs	r1, r1, #8
   d4a5a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d4a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a64 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4a64:	b538      	push	{r3, r4, r5, lr}
   d4a66:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d4a68:	f002 f950 	bl	d6d0c <_ZN9TCPClient9connectedEv>
   d4a6c:	2800      	cmp	r0, #0
   d4a6e:	bf14      	ite	ne
   d4a70:	2501      	movne	r5, #1
   d4a72:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d4a74:	d102      	bne.n	d4a7c <_ZN4MQTT11isConnectedEv+0x18>
   d4a76:	4620      	mov	r0, r4
   d4a78:	f002 fbaa 	bl	d71d0 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	bd38      	pop	{r3, r4, r5, pc}

000d4a80 <_ZN4MQTT9setBrokerEPct>:
void MQTT::setBroker(char* domain, uint16_t port) {
   d4a80:	b570      	push	{r4, r5, r6, lr}
   d4a82:	4604      	mov	r4, r0
   d4a84:	460e      	mov	r6, r1
   d4a86:	4615      	mov	r5, r2
    if(isConnected()) {
   d4a88:	f7ff ffec 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4a8c:	b110      	cbz	r0, d4a94 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d4a8e:	4620      	mov	r0, r4
   d4a90:	f7ff ffb9 	bl	d4a06 <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   d4a94:	4631      	mov	r1, r6
   d4a96:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4a9a:	f001 fc2c 	bl	d62f6 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d4aa2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   d4aa6:	bd70      	pop	{r4, r5, r6, pc}

000d4aa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4aac:	b086      	sub	sp, #24
   d4aae:	4604      	mov	r4, r0
   d4ab0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   d4ab4:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
   d4ab8:	4689      	mov	r9, r1
   d4aba:	4617      	mov	r7, r2
   d4abc:	461e      	mov	r6, r3
    if (!isConnected()) {
   d4abe:	f7ff ffd1 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4ac2:	4605      	mov	r5, r0
   d4ac4:	2800      	cmp	r0, #0
   d4ac6:	f040 80c3 	bne.w	d4c50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
   d4aca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4acc:	2900      	cmp	r1, #0
   d4ace:	f040 8087 	bne.w	d4be0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            result = _client.connect(this->domain.c_str(), this->port);
   d4ad2:	4603      	mov	r3, r0
   d4ad4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4ad8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4ada:	4620      	mov	r0, r4
   d4adc:	f002 fa1c 	bl	d6f18 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4ae0:	2800      	cmp	r0, #0
   d4ae2:	d079      	beq.n	d4bd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
            nextMsgId = 1;
   d4ae4:	2301      	movs	r3, #1
   d4ae6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4ae8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4aec:	69e2      	ldr	r2, [r4, #28]
   d4aee:	2b04      	cmp	r3, #4
   d4af0:	f040 8081 	bne.w	d4bf6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14e>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4af4:	4b57      	ldr	r3, [pc, #348]	; (d4c54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
   d4af6:	6818      	ldr	r0, [r3, #0]
   d4af8:	8899      	ldrh	r1, [r3, #4]
   d4afa:	799b      	ldrb	r3, [r3, #6]
   d4afc:	f8ad 1004 	strh.w	r1, [sp, #4]
   d4b00:	f88d 3006 	strb.w	r3, [sp, #6]
   d4b04:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4b06:	f8c2 0005 	str.w	r0, [r2, #5]
   d4b0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d4b0e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d4b12:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4b16:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4b18:	230c      	movs	r3, #12
            if (willTopic) {
   d4b1a:	f1b8 0f00 	cmp.w	r8, #0
   d4b1e:	d07e      	beq.n	d4c1e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4b20:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   d4b24:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d4b28:	0140      	lsls	r0, r0, #5
   d4b2a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d4b2e:	f040 0006 	orr.w	r0, r0, #6
   d4b32:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4b34:	f1ba 0f00 	cmp.w	sl, #0
   d4b38:	d101      	bne.n	d4b3e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
              v = v&0xfd;
   d4b3a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d4b3e:	b11f      	cbz	r7, d4b48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
                if(pass != NULL) {
   d4b40:	2e00      	cmp	r6, #0
   d4b42:	d16e      	bne.n	d4c22 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
   d4b44:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4b48:	69e2      	ldr	r2, [r4, #28]
   d4b4a:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d4b4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4b4e:	69e1      	ldr	r1, [r4, #28]
   d4b50:	1c58      	adds	r0, r3, #1
   d4b52:	1212      	asrs	r2, r2, #8
   d4b54:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4b56:	1c9a      	adds	r2, r3, #2
   d4b58:	69e1      	ldr	r1, [r4, #28]
   d4b5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4b5c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4b5e:	3303      	adds	r3, #3
   d4b60:	69e2      	ldr	r2, [r4, #28]
   d4b62:	4649      	mov	r1, r9
   d4b64:	4620      	mov	r0, r4
   d4b66:	f7ff ff62 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
   d4b6a:	4603      	mov	r3, r0
            if (willTopic) {
   d4b6c:	f1b8 0f00 	cmp.w	r8, #0
   d4b70:	d00b      	beq.n	d4b8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                length = writeString(willTopic, buffer, length);
   d4b72:	69e2      	ldr	r2, [r4, #28]
   d4b74:	4641      	mov	r1, r8
   d4b76:	4620      	mov	r0, r4
   d4b78:	f7ff ff59 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4b7c:	69e2      	ldr	r2, [r4, #28]
   d4b7e:	9911      	ldr	r1, [sp, #68]	; 0x44
                length = writeString(willTopic, buffer, length);
   d4b80:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d4b82:	4620      	mov	r0, r4
   d4b84:	f7ff ff53 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
   d4b88:	4603      	mov	r3, r0
            if(user != NULL) {
   d4b8a:	b167      	cbz	r7, d4ba6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                length = writeString(user,buffer,length);
   d4b8c:	69e2      	ldr	r2, [r4, #28]
   d4b8e:	4639      	mov	r1, r7
   d4b90:	4620      	mov	r0, r4
   d4b92:	f7ff ff4c 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
   d4b96:	4603      	mov	r3, r0
                if(pass != NULL) {
   d4b98:	b12e      	cbz	r6, d4ba6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                    length = writeString(pass,buffer,length);
   d4b9a:	69e2      	ldr	r2, [r4, #28]
   d4b9c:	4631      	mov	r1, r6
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff ff45 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
   d4ba4:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d4ba6:	3b05      	subs	r3, #5
   d4ba8:	69e2      	ldr	r2, [r4, #28]
   d4baa:	b29b      	uxth	r3, r3
   d4bac:	2110      	movs	r1, #16
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff feeb 	bl	d498a <_ZN4MQTT5writeEhPht>
   d4bb4:	f000 ffd4 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d4bb8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4bbc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f002 faab 	bl	d711c <_ZN9TCPClient9availableEv>
   d4bc6:	bb78      	cbnz	r0, d4c28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
   d4bc8:	f000 ffca 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4bcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4bce:	1ac0      	subs	r0, r0, r3
   d4bd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4bd2:	4373      	muls	r3, r6
   d4bd4:	4298      	cmp	r0, r3
   d4bd6:	d9f3      	bls.n	d4bc0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x118>
        _client.stop();
   d4bd8:	4620      	mov	r0, r4
   d4bda:	f002 faf9 	bl	d71d0 <_ZN9TCPClient4stopEv>
   d4bde:	e033      	b.n	d4c48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
   d4be0:	4668      	mov	r0, sp
   d4be2:	f001 fee5 	bl	d69b0 <_ZN9IPAddressC1EPKh>
   d4be6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4bea:	462b      	mov	r3, r5
   d4bec:	4669      	mov	r1, sp
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f002 fa18 	bl	d7024 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4bf4:	e774      	b.n	d4ae0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4bf6:	4b18      	ldr	r3, [pc, #96]	; (d4c58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>)
   d4bf8:	6818      	ldr	r0, [r3, #0]
   d4bfa:	6859      	ldr	r1, [r3, #4]
   d4bfc:	7a1b      	ldrb	r3, [r3, #8]
   d4bfe:	46ec      	mov	ip, sp
   d4c00:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d4c04:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4c08:	466b      	mov	r3, sp
   d4c0a:	cb03      	ldmia	r3!, {r0, r1}
   d4c0c:	f8c2 0005 	str.w	r0, [r2, #5]
   d4c10:	f8c2 1009 	str.w	r1, [r2, #9]
   d4c14:	f89c 3000 	ldrb.w	r3, [ip]
   d4c18:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4c1a:	230e      	movs	r3, #14
   d4c1c:	e77d      	b.n	d4b1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x72>
                v = 0x02;
   d4c1e:	2002      	movs	r0, #2
   d4c20:	e788      	b.n	d4b34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8c>
                    v = v|(0x80>>1);
   d4c22:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d4c26:	e78f      	b.n	d4b48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
            uint16_t len = readPacket(&llen);
   d4c28:	4669      	mov	r1, sp
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	f7ff fe4c 	bl	d48c8 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d4c30:	2804      	cmp	r0, #4
   d4c32:	d1d1      	bne.n	d4bd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
                if (buffer[3] == CONN_ACCEPT) {
   d4c34:	69e3      	ldr	r3, [r4, #28]
   d4c36:	78de      	ldrb	r6, [r3, #3]
   d4c38:	2e00      	cmp	r6, #0
   d4c3a:	d1cd      	bne.n	d4bd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
   d4c3c:	f000 ff90 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4c40:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4c42:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4c44:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   d4c48:	4628      	mov	r0, r5
   d4c4a:	b006      	add	sp, #24
   d4c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d4c50:	2500      	movs	r5, #0
   d4c52:	e7f9      	b.n	d4c48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
   d4c54:	000d89ab 	.word	0x000d89ab
   d4c58:	000d89b2 	.word	0x000d89b2

000d4c5c <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4c5c:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4c5e:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4c62:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4c64:	2401      	movs	r4, #1
   d4c66:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   d4c6a:	2400      	movs	r4, #0
   d4c6c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d4c70:	e9cd 4400 	strd	r4, r4, [sp]
   d4c74:	f7ff ff18 	bl	d4aa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4c78:	b006      	add	sp, #24
   d4c7a:	bd10      	pop	{r4, pc}

000d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4c7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c80:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d4c84:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d4c88:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4c8c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
   d4c90:	4604      	mov	r4, r0
   d4c92:	468b      	mov	fp, r1
   d4c94:	4616      	mov	r6, r2
   d4c96:	461f      	mov	r7, r3
    if (isConnected()) {
   d4c98:	f7ff fee4 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4c9c:	2800      	cmp	r0, #0
   d4c9e:	d050      	beq.n	d4d42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
   d4ca0:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4ca4:	69e0      	ldr	r0, [r4, #28]
   d4ca6:	2100      	movs	r1, #0
   d4ca8:	f003 fd66 	bl	d8778 <memset>
        length = writeString(topic, buffer, length);
   d4cac:	2305      	movs	r3, #5
   d4cae:	69e2      	ldr	r2, [r4, #28]
   d4cb0:	4659      	mov	r1, fp
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	f7ff febb 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d4cb8:	1e6b      	subs	r3, r5, #1
   d4cba:	2b01      	cmp	r3, #1
   d4cbc:	d815      	bhi.n	d4cea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
   d4cbe:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4cc0:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
   d4cc2:	3301      	adds	r3, #1
   d4cc4:	b29b      	uxth	r3, r3
   d4cc6:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4cc8:	121b      	asrs	r3, r3, #8
   d4cca:	5413      	strb	r3, [r2, r0]
   d4ccc:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d4cce:	69e3      	ldr	r3, [r4, #28]
   d4cd0:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4cd2:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d4cd4:	3002      	adds	r0, #2
   d4cd6:	545a      	strb	r2, [r3, r1]
   d4cd8:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4cda:	f1b8 0f00 	cmp.w	r8, #0
   d4cde:	d004      	beq.n	d4cea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
   d4ce0:	8c23      	ldrh	r3, [r4, #32]
   d4ce2:	1c5a      	adds	r2, r3, #1
   d4ce4:	8422      	strh	r2, [r4, #32]
   d4ce6:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4cea:	2100      	movs	r1, #0
   d4cec:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4cee:	428f      	cmp	r7, r1
   d4cf0:	69e2      	ldr	r2, [r4, #28]
   d4cf2:	b29b      	uxth	r3, r3
   d4cf4:	d90a      	bls.n	d4d0c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
   d4cf6:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d4cfa:	459c      	cmp	ip, r3
   d4cfc:	d906      	bls.n	d4d0c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
   d4cfe:	f816 c001 	ldrb.w	ip, [r6, r1]
   d4d02:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4d06:	3101      	adds	r1, #1
   d4d08:	b289      	uxth	r1, r1
   d4d0a:	e7ef      	b.n	d4cec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
   d4d0c:	f1ba 0f00 	cmp.w	sl, #0
   d4d10:	bf0c      	ite	eq
   d4d12:	2130      	moveq	r1, #48	; 0x30
   d4d14:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d4d16:	f1b9 0f00 	cmp.w	r9, #0
   d4d1a:	d001      	beq.n	d4d20 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
   d4d1c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d4d20:	2d02      	cmp	r5, #2
   d4d22:	d109      	bne.n	d4d38 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
   d4d24:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d4d28:	3b05      	subs	r3, #5
   d4d2a:	b29b      	uxth	r3, r3
   d4d2c:	4620      	mov	r0, r4
}
   d4d2e:	b001      	add	sp, #4
   d4d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
   d4d34:	f7ff be29 	b.w	d498a <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
   d4d38:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4d3a:	bf08      	it	eq
   d4d3c:	f041 0102 	orreq.w	r1, r1, #2
   d4d40:	e7f2      	b.n	d4d28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
   d4d42:	b001      	add	sp, #4
   d4d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d48 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4d4a:	9c08      	ldr	r4, [sp, #32]
   d4d4c:	9403      	str	r4, [sp, #12]
   d4d4e:	2400      	movs	r4, #0
   d4d50:	9402      	str	r4, [sp, #8]
   d4d52:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4d56:	9401      	str	r4, [sp, #4]
   d4d58:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4d5c:	9400      	str	r4, [sp, #0]
   d4d5e:	f7ff ff8d 	bl	d4c7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4d62:	b004      	add	sp, #16
   d4d64:	bd10      	pop	{r4, pc}

000d4d66 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d4d66:	b530      	push	{r4, r5, lr}
   d4d68:	b087      	sub	sp, #28
   d4d6a:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4d6c:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d4d6e:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4d70:	9204      	str	r2, [sp, #16]
   d4d72:	f003 fd3f 	bl	d87f4 <strlen>
   d4d76:	2500      	movs	r5, #0
   d4d78:	4603      	mov	r3, r0
   d4d7a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4d7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d4d82:	9500      	str	r5, [sp, #0]
   d4d84:	4620      	mov	r0, r4
   d4d86:	f7ff ffdf 	bl	d4d48 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4d8a:	b007      	add	sp, #28
   d4d8c:	bd30      	pop	{r4, r5, pc}

000d4d8e <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d4d8e:	b538      	push	{r3, r4, r5, lr}
   d4d90:	4604      	mov	r4, r0
   d4d92:	460d      	mov	r5, r1
    if (isConnected()) {
   d4d94:	f7ff fe66 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4d98:	b190      	cbz	r0, d4dc0 <_ZN4MQTT14publishReleaseEt+0x32>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4d9a:	69e3      	ldr	r3, [r4, #28]
   d4d9c:	2262      	movs	r2, #98	; 0x62
   d4d9e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4da0:	69e3      	ldr	r3, [r4, #28]
   d4da2:	2202      	movs	r2, #2
   d4da4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4da6:	69e3      	ldr	r3, [r4, #28]
   d4da8:	122a      	asrs	r2, r5, #8
   d4daa:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4dac:	69e3      	ldr	r3, [r4, #28]
   d4dae:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4db0:	69e1      	ldr	r1, [r4, #28]
   d4db2:	2204      	movs	r2, #4
   d4db4:	4620      	mov	r0, r4
   d4db6:	f001 ff93 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
   d4dba:	3800      	subs	r0, #0
   d4dbc:	bf18      	it	ne
   d4dbe:	2001      	movne	r0, #1
}
   d4dc0:	bd38      	pop	{r3, r4, r5, pc}

000d4dc2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d4dc2:	b538      	push	{r3, r4, r5, lr}
   d4dc4:	4604      	mov	r4, r0
   d4dc6:	460d      	mov	r5, r1
    if (isConnected()) {
   d4dc8:	f7ff fe4c 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4dcc:	b190      	cbz	r0, d4df4 <_ZN4MQTT15publishCompleteEt+0x32>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4dce:	69e3      	ldr	r3, [r4, #28]
   d4dd0:	2272      	movs	r2, #114	; 0x72
   d4dd2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4dd4:	69e3      	ldr	r3, [r4, #28]
   d4dd6:	2202      	movs	r2, #2
   d4dd8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4dda:	69e3      	ldr	r3, [r4, #28]
   d4ddc:	122a      	asrs	r2, r5, #8
   d4dde:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4de0:	69e3      	ldr	r3, [r4, #28]
   d4de2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d4de4:	69e1      	ldr	r1, [r4, #28]
   d4de6:	2204      	movs	r2, #4
   d4de8:	4620      	mov	r0, r4
   d4dea:	f001 ff79 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
   d4dee:	3800      	subs	r0, #0
   d4df0:	bf18      	it	ne
   d4df2:	2001      	movne	r0, #1
}
   d4df4:	bd38      	pop	{r3, r4, r5, pc}

000d4df6 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d4df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dfa:	ed2d 8b02 	vpush	{d8}
   d4dfe:	b087      	sub	sp, #28
   d4e00:	af00      	add	r7, sp, #0
   d4e02:	4604      	mov	r4, r0
    if (isConnected()) {
   d4e04:	f7ff fe2e 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d4e08:	4681      	mov	r9, r0
   d4e0a:	b1b0      	cbz	r0, d4e3a <_ZN4MQTT4loopEv+0x44>
   d4e0c:	f000 fea8 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4e10:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e16:	4353      	muls	r3, r2
   d4e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4e1a:	1a82      	subs	r2, r0, r2
   d4e1c:	429a      	cmp	r2, r3
   d4e1e:	4606      	mov	r6, r0
   d4e20:	d803      	bhi.n	d4e2a <_ZN4MQTT4loopEv+0x34>
   d4e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4e24:	1a82      	subs	r2, r0, r2
   d4e26:	4293      	cmp	r3, r2
   d4e28:	d21d      	bcs.n	d4e66 <_ZN4MQTT4loopEv+0x70>
            if (pingOutstanding) {
   d4e2a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4e2e:	b15b      	cbz	r3, d4e48 <_ZN4MQTT4loopEv+0x52>
                _client.stop();
   d4e30:	4620      	mov	r0, r4
   d4e32:	f002 f9cd 	bl	d71d0 <_ZN9TCPClient4stopEv>
                return false;
   d4e36:	f04f 0900 	mov.w	r9, #0
}
   d4e3a:	4648      	mov	r0, r9
   d4e3c:	371c      	adds	r7, #28
   d4e3e:	46bd      	mov	sp, r7
   d4e40:	ecbd 8b02 	vpop	{d8}
   d4e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4e48:	69e2      	ldr	r2, [r4, #28]
   d4e4a:	21c0      	movs	r1, #192	; 0xc0
   d4e4c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4e4e:	69e2      	ldr	r2, [r4, #28]
   d4e50:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4e52:	69e1      	ldr	r1, [r4, #28]
   d4e54:	2202      	movs	r2, #2
   d4e56:	4620      	mov	r0, r4
   d4e58:	f001 ff42 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d4e5c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d4e60:	2301      	movs	r3, #1
   d4e62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d4e66:	4620      	mov	r0, r4
   d4e68:	f002 f958 	bl	d711c <_ZN9TCPClient9availableEv>
   d4e6c:	2800      	cmp	r0, #0
   d4e6e:	d0e4      	beq.n	d4e3a <_ZN4MQTT4loopEv+0x44>
            uint16_t len = readPacket(&llen);
   d4e70:	f107 0117 	add.w	r1, r7, #23
   d4e74:	4620      	mov	r0, r4
   d4e76:	f7ff fd27 	bl	d48c8 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d4e7a:	4683      	mov	fp, r0
   d4e7c:	2800      	cmp	r0, #0
   d4e7e:	d0dc      	beq.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                uint8_t type = buffer[0]&0xF0;
   d4e80:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d4e82:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4e84:	7819      	ldrb	r1, [r3, #0]
   d4e86:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4e8a:	2a30      	cmp	r2, #48	; 0x30
   d4e8c:	d17f      	bne.n	d4f8e <_ZN4MQTT4loopEv+0x198>
                    if (callback) {
   d4e8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d4e92:	f1ba 0f00 	cmp.w	sl, #0
   d4e96:	d0d0      	beq.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4e98:	f897 c017 	ldrb.w	ip, [r7, #23]
                        }
   d4e9c:	466a      	mov	r2, sp
   d4e9e:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4ea2:	eb03 020c 	add.w	r2, r3, ip
   d4ea6:	7855      	ldrb	r5, [r2, #1]
   d4ea8:	7891      	ldrb	r1, [r2, #2]
   d4eaa:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d4eae:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d4eb0:	f105 0208 	add.w	r2, r5, #8
   d4eb4:	4669      	mov	r1, sp
   d4eb6:	08d2      	lsrs	r2, r2, #3
   d4eb8:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d4ebc:	4695      	mov	sp, r2
   d4ebe:	f10c 0203 	add.w	r2, ip, #3
   d4ec2:	60fa      	str	r2, [r7, #12]
   d4ec4:	eb03 0e02 	add.w	lr, r3, r2
   d4ec8:	eb0d 0205 	add.w	r2, sp, r5
   d4ecc:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4ece:	f8c7 d008 	str.w	sp, [r7, #8]
   d4ed2:	607a      	str	r2, [r7, #4]
   d4ed4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d4ed8:	428a      	cmp	r2, r1
   d4eda:	d006      	beq.n	d4eea <_ZN4MQTT4loopEv+0xf4>
                            topic[i] = buffer[llen+3+i];
   d4edc:	460a      	mov	r2, r1
   d4ede:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d4ee2:	f802 8b01 	strb.w	r8, [r2], #1
   d4ee6:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d4ee8:	e7f4      	b.n	d4ed4 <_ZN4MQTT4loopEv+0xde>
                        topic[tl] = 0;
   d4eea:	2200      	movs	r2, #0
   d4eec:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4eee:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4ef2:	68f9      	ldr	r1, [r7, #12]
   d4ef4:	f008 0806 	and.w	r8, r8, #6
   d4ef8:	ebab 020c 	sub.w	r2, fp, ip
   d4efc:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4efe:	f1b8 0f02 	cmp.w	r8, #2
   d4f02:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f06:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4f08:	d125      	bne.n	d4f56 <_ZN4MQTT4loopEv+0x160>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f0a:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4f0e:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d4f10:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f12:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d4f16:	f10c 0105 	add.w	r1, ip, #5
   d4f1a:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d4f1c:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f1e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4f22:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4f24:	69e3      	ldr	r3, [r4, #28]
   d4f26:	2240      	movs	r2, #64	; 0x40
   d4f28:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4f2a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4f2c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d4f30:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4f34:	69e3      	ldr	r3, [r4, #28]
   d4f36:	ea4f 222b 	mov.w	r2, fp, asr #8
   d4f3a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4f3c:	69e3      	ldr	r3, [r4, #28]
   d4f3e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d4f42:	69e1      	ldr	r1, [r4, #28]
   d4f44:	2204      	movs	r2, #4
   d4f46:	4620      	mov	r0, r4
   d4f48:	f001 feca 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d4f4c:	6266      	str	r6, [r4, #36]	; 0x24
   d4f4e:	ee18 3a10 	vmov	r3, s16
   d4f52:	469d      	mov	sp, r3
   d4f54:	e771      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4f56:	f1b8 0f04 	cmp.w	r8, #4
   d4f5a:	d115      	bne.n	d4f88 <_ZN4MQTT4loopEv+0x192>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f5c:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4f60:	4419      	add	r1, r3
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4f62:	3a02      	subs	r2, #2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f64:	f891 b001 	ldrb.w	fp, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
   d4f68:	f10c 0105 	add.w	r1, ip, #5
   d4f6c:	4429      	add	r1, r5
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4f6e:	4419      	add	r1, r3
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f70:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d4f74:	47d0      	blx	sl
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4f76:	69e3      	ldr	r3, [r4, #28]
   d4f78:	2250      	movs	r2, #80	; 0x50
   d4f7a:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d4f7c:	69e3      	ldr	r3, [r4, #28]
   d4f7e:	2202      	movs	r2, #2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4f80:	fa1f fb8b 	uxth.w	fp, fp
              							buffer[1] = 2;
   d4f84:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d4f86:	e7d5      	b.n	d4f34 <_ZN4MQTT4loopEv+0x13e>
                            callback(topic,payload,len-llen-3-tl);
   d4f88:	4419      	add	r1, r3
   d4f8a:	47d0      	blx	sl
   d4f8c:	e7df      	b.n	d4f4e <_ZN4MQTT4loopEv+0x158>
                } else if (type == MQTTPUBREC) {
   d4f8e:	2a50      	cmp	r2, #80	; 0x50
   d4f90:	d108      	bne.n	d4fa4 <_ZN4MQTT4loopEv+0x1ae>
                    msgId = (buffer[2] << 8) + buffer[3];
   d4f92:	789a      	ldrb	r2, [r3, #2]
   d4f94:	78d9      	ldrb	r1, [r3, #3]
   d4f96:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d4f9a:	b289      	uxth	r1, r1
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	f7ff fef6 	bl	d4d8e <_ZN4MQTT14publishReleaseEt>
   d4fa2:	e74a      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                } else if (type == MQTTPUBACK) {
   d4fa4:	2a40      	cmp	r2, #64	; 0x40
   d4fa6:	d112      	bne.n	d4fce <_ZN4MQTT4loopEv+0x1d8>
                  if (qoscallback) {
   d4fa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d4faa:	2a00      	cmp	r2, #0
   d4fac:	f43f af45 	beq.w	d4e3a <_ZN4MQTT4loopEv+0x44>
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4fb0:	f1bb 0f04 	cmp.w	fp, #4
   d4fb4:	f47f af41 	bne.w	d4e3a <_ZN4MQTT4loopEv+0x44>
   d4fb8:	f011 0f06 	tst.w	r1, #6
   d4fbc:	f47f af3d 	bne.w	d4e3a <_ZN4MQTT4loopEv+0x44>
                          msgId = (buffer[2]<<8)+buffer[3];
   d4fc0:	7899      	ldrb	r1, [r3, #2]
   d4fc2:	78d8      	ldrb	r0, [r3, #3]
   d4fc4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                          this->qoscallback(msgId);
   d4fc8:	b280      	uxth	r0, r0
   d4fca:	4790      	blx	r2
   d4fcc:	e735      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                } else if (type == MQTTPUBREL) {
   d4fce:	2a60      	cmp	r2, #96	; 0x60
   d4fd0:	d108      	bne.n	d4fe4 <_ZN4MQTT4loopEv+0x1ee>
                  msgId = (buffer[2] << 8) + buffer[3];
   d4fd2:	789a      	ldrb	r2, [r3, #2]
   d4fd4:	78d9      	ldrb	r1, [r3, #3]
   d4fd6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                  this->publishComplete(msgId);
   d4fda:	b289      	uxth	r1, r1
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f7ff fef0 	bl	d4dc2 <_ZN4MQTT15publishCompleteEt>
   d4fe2:	e72a      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                } else if (type == MQTTPUBCOMP) {
   d4fe4:	2a70      	cmp	r2, #112	; 0x70
   d4fe6:	d0df      	beq.n	d4fa8 <_ZN4MQTT4loopEv+0x1b2>
                } else if (type == MQTTSUBACK) {
   d4fe8:	2a90      	cmp	r2, #144	; 0x90
   d4fea:	f43f af26 	beq.w	d4e3a <_ZN4MQTT4loopEv+0x44>
                } else if (type == MQTTPINGREQ) {
   d4fee:	2ac0      	cmp	r2, #192	; 0xc0
   d4ff0:	d10a      	bne.n	d5008 <_ZN4MQTT4loopEv+0x212>
                    buffer[0] = MQTTPINGRESP;
   d4ff2:	22d0      	movs	r2, #208	; 0xd0
   d4ff4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4ff6:	69e3      	ldr	r3, [r4, #28]
   d4ff8:	2200      	movs	r2, #0
   d4ffa:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4ffc:	69e1      	ldr	r1, [r4, #28]
   d4ffe:	2202      	movs	r2, #2
   d5000:	4620      	mov	r0, r4
   d5002:	f001 fe6d 	bl	d6ce0 <_ZN9TCPClient5writeEPKhj>
   d5006:	e718      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>
                } else if (type == MQTTPINGRESP) {
   d5008:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d500a:	bf04      	itt	eq
   d500c:	2300      	moveq	r3, #0
   d500e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d5012:	e712      	b.n	d4e3a <_ZN4MQTT4loopEv+0x44>

000d5014 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5014:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5016:	4604      	mov	r4, r0
   d5018:	9101      	str	r1, [sp, #4]
   d501a:	4615      	mov	r5, r2
    if (isConnected()) {
   d501c:	f7ff fd22 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d5020:	b1f8      	cbz	r0, d5062 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        nextMsgId++;
   d5022:	8c23      	ldrh	r3, [r4, #32]
        if (nextMsgId == 0) {
   d5024:	9901      	ldr	r1, [sp, #4]
        nextMsgId++;
   d5026:	3301      	adds	r3, #1
   d5028:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d502a:	b1c3      	cbz	r3, d505e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
            nextMsgId = 1;
   d502c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d502e:	8c23      	ldrh	r3, [r4, #32]
   d5030:	69e2      	ldr	r2, [r4, #28]
   d5032:	121b      	asrs	r3, r3, #8
   d5034:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5036:	69e3      	ldr	r3, [r4, #28]
   d5038:	8c22      	ldrh	r2, [r4, #32]
   d503a:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d503c:	69e2      	ldr	r2, [r4, #28]
   d503e:	2307      	movs	r3, #7
   d5040:	4620      	mov	r0, r4
   d5042:	f7ff fcf4 	bl	d4a2e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5046:	69e3      	ldr	r3, [r4, #28]
   d5048:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d504a:	3804      	subs	r0, #4
   d504c:	69e2      	ldr	r2, [r4, #28]
   d504e:	b283      	uxth	r3, r0
   d5050:	2182      	movs	r1, #130	; 0x82
   d5052:	4620      	mov	r0, r4
}
   d5054:	b003      	add	sp, #12
   d5056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d505a:	f7ff bc96 	b.w	d498a <_ZN4MQTT5writeEhPht>
            nextMsgId = 1;
   d505e:	2301      	movs	r3, #1
   d5060:	e7e4      	b.n	d502c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
}
   d5062:	b003      	add	sp, #12
   d5064:	bd30      	pop	{r4, r5, pc}
	...

000d5068 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5068:	b538      	push	{r3, r4, r5, lr}
   d506a:	4605      	mov	r5, r0
    if (isConnected()) {
   d506c:	f7ff fcfa 	bl	d4a64 <_ZN4MQTT11isConnectedEv>
   d5070:	b110      	cbz	r0, d5078 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5072:	4628      	mov	r0, r5
   d5074:	f7ff fcc7 	bl	d4a06 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5078:	69e8      	ldr	r0, [r5, #28]
   d507a:	b108      	cbz	r0, d5080 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d507c:	f7ff f811 	bl	d40a2 <_ZdaPv>
MQTT::~MQTT() {
   d5080:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d5084:	f001 f8be 	bl	d6204 <_ZN6StringD1Ev>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5088:	69ac      	ldr	r4, [r5, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d508a:	4b0a      	ldr	r3, [pc, #40]	; (d50b4 <_ZN4MQTTD1Ev+0x4c>)
   d508c:	602b      	str	r3, [r5, #0]
   d508e:	b17c      	cbz	r4, d50b0 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5090:	6863      	ldr	r3, [r4, #4]
   d5092:	3b01      	subs	r3, #1
   d5094:	6063      	str	r3, [r4, #4]
   d5096:	b95b      	cbnz	r3, d50b0 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d5098:	6823      	ldr	r3, [r4, #0]
   d509a:	4620      	mov	r0, r4
   d509c:	689b      	ldr	r3, [r3, #8]
   d509e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50a0:	68a3      	ldr	r3, [r4, #8]
   d50a2:	3b01      	subs	r3, #1
   d50a4:	60a3      	str	r3, [r4, #8]
   d50a6:	b91b      	cbnz	r3, d50b0 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d50a8:	6823      	ldr	r3, [r4, #0]
   d50aa:	4620      	mov	r0, r4
   d50ac:	68db      	ldr	r3, [r3, #12]
   d50ae:	4798      	blx	r3
}
   d50b0:	4628      	mov	r0, r5
   d50b2:	bd38      	pop	{r3, r4, r5, pc}
   d50b4:	000d91c4 	.word	0x000d91c4

000d50b8 <_ZN8LightIOTC1Ei>:
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);

/**
 * Constructor.
 */
LightIOT::LightIOT(int argonNumber){
   d50b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d50be:	460e      	mov	r6, r1
   d50c0:	4924      	ldr	r1, [pc, #144]	; (d5154 <_ZN8LightIOTC1Ei+0x9c>)
   d50c2:	4604      	mov	r4, r0
   d50c4:	f003 fb4a 	bl	d875c <memcpy>
   d50c8:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d50cc:	18a0      	adds	r0, r4, r2
   d50ce:	4922      	ldr	r1, [pc, #136]	; (d5158 <_ZN8LightIOTC1Ei+0xa0>)
   d50d0:	f003 fb44 	bl	d875c <memcpy>
   d50d4:	4921      	ldr	r1, [pc, #132]	; (d515c <_ZN8LightIOTC1Ei+0xa4>)
   d50d6:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d50da:	f504 7006 	add.w	r0, r4, #536	; 0x218
   d50de:	f003 fb3d 	bl	d875c <memcpy>
   d50e2:	491f      	ldr	r1, [pc, #124]	; (d5160 <_ZN8LightIOTC1Ei+0xa8>)
   d50e4:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d50e8:	f504 7049 	add.w	r0, r4, #804	; 0x324
   d50ec:	f003 fb36 	bl	d875c <memcpy>
   d50f0:	491c      	ldr	r1, [pc, #112]	; (d5164 <_ZN8LightIOTC1Ei+0xac>)
   d50f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d50f6:	f504 6086 	add.w	r0, r4, #1072	; 0x430
   d50fa:	2500      	movs	r5, #0
   d50fc:	f003 fb2e 	bl	d875c <memcpy>
   d5100:	2701      	movs	r7, #1
   d5102:	f44f 7286 	mov.w	r2, #268	; 0x10c
   d5106:	4918      	ldr	r1, [pc, #96]	; (d5168 <_ZN8LightIOTC1Ei+0xb0>)
   d5108:	f204 503c 	addw	r0, r4, #1340	; 0x53c
   d510c:	f003 fb26 	bl	d875c <memcpy>
   d5110:	4916      	ldr	r1, [pc, #88]	; (d516c <_ZN8LightIOTC1Ei+0xb4>)
   d5112:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   d5116:	f8c4 7650 	str.w	r7, [r4, #1616]	; 0x650
   d511a:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   d511e:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
   d5122:	f001 f8ba 	bl	d629a <_ZN6StringC1EPKc>
  _argonNumber = argonNumber;
   d5126:	f8c4 664c 	str.w	r6, [r4, #1612]	; 0x64c

  switch (_argonNumber){
   d512a:	3e01      	subs	r6, #1
   d512c:	2e09      	cmp	r6, #9
LightIOT::LightIOT(int argonNumber){
   d512e:	4b10      	ldr	r3, [pc, #64]	; (d5170 <_ZN8LightIOTC1Ei+0xb8>)
   d5130:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
   d5134:	f8c4 366c 	str.w	r3, [r4, #1644]	; 0x66c
   d5138:	f884 5670 	strb.w	r5, [r4, #1648]	; 0x670
   d513c:	f8c4 5674 	str.w	r5, [r4, #1652]	; 0x674
    case 1:
      _p1 = 0.01069;
   d5140:	bf94      	ite	ls
   d5142:	f8c4 5650 	strls.w	r5, [r4, #1616]	; 0x650
      _p1 = 0.01076;
      _p2 = -0.02433;
      break;
    
    default:
        _p1 = 1;
   d5146:	f8c4 7650 	strhi.w	r7, [r4, #1616]	; 0x650
        _p2 = 0;
   d514a:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
      break;
  }
}
   d514e:	4620      	mov	r0, r4
   d5150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5152:	bf00      	nop
   d5154:	000d8a3c 	.word	0x000d8a3c
   d5158:	000d8b48 	.word	0x000d8b48
   d515c:	000d8c54 	.word	0x000d8c54
   d5160:	000d8d60 	.word	0x000d8d60
   d5164:	000d8e6c 	.word	0x000d8e6c
   d5168:	000d8f78 	.word	0x000d8f78
   d516c:	000d8849 	.word	0x000d8849
   d5170:	000493e0 	.word	0x000493e0

000d5174 <_ZN8LightIOT5beginEv>:

void LightIOT::begin(){
   d5174:	b508      	push	{r3, lr}
    batterySensor.begin();
   d5176:	4805      	ldr	r0, [pc, #20]	; (d518c <_ZN8LightIOT5beginEv+0x18>)
   d5178:	f000 fc43 	bl	d5a02 <_ZN15Adafruit_INA2195beginEv>
    panelSensor.begin();
   d517c:	4804      	ldr	r0, [pc, #16]	; (d5190 <_ZN8LightIOT5beginEv+0x1c>)
   d517e:	f000 fc40 	bl	d5a02 <_ZN15Adafruit_INA2195beginEv>
    ledSensor.begin();
}
   d5182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ledSensor.begin();
   d5186:	4803      	ldr	r0, [pc, #12]	; (d5194 <_ZN8LightIOT5beginEv+0x20>)
   d5188:	f000 bc3b 	b.w	d5a02 <_ZN15Adafruit_INA2195beginEv>
   d518c:	2003e60c 	.word	0x2003e60c
   d5190:	2003e62c 	.word	0x2003e62c
   d5194:	2003e61c 	.word	0x2003e61c

000d5198 <_ZN8LightIOT14getCredentialsEP6StringPc>:

// -------------  FUNCION PARA RECEPCION DE DATOS -----------------
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d5198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d519c:	460c      	mov	r4, r1
    byte _sentencePos = 0;
    byte _comma_count = 0;
    credentials[_comma_count] = "";
   d519e:	4620      	mov	r0, r4
   d51a0:	490e      	ldr	r1, [pc, #56]	; (d51dc <_ZN8LightIOT14getCredentialsEP6StringPc+0x44>)

    while (1){
        if (inputBuffer[_sentencePos] == NULL) break;
        if (inputBuffer[_sentencePos] == '&'){
            _comma_count++;
            credentials[_comma_count] = "";
   d51a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; d51dc <_ZN8LightIOT14getCredentialsEP6StringPc+0x44>
void LightIOT::getCredentials(String credentials[],char inputBuffer[]){
   d51a6:	4617      	mov	r7, r2
    credentials[_comma_count] = "";
   d51a8:	f001 f8a5 	bl	d62f6 <_ZN6StringaSEPKc>
   d51ac:	2500      	movs	r5, #0
    byte _comma_count = 0;
   d51ae:	462e      	mov	r6, r5
        if (inputBuffer[_sentencePos] == NULL) break;
   d51b0:	b2eb      	uxtb	r3, r5
   d51b2:	5cf9      	ldrb	r1, [r7, r3]
   d51b4:	b179      	cbz	r1, d51d6 <_ZN8LightIOT14getCredentialsEP6StringPc+0x3e>
        if (inputBuffer[_sentencePos] == '&'){
   d51b6:	2926      	cmp	r1, #38	; 0x26
   d51b8:	d108      	bne.n	d51cc <_ZN8LightIOT14getCredentialsEP6StringPc+0x34>
            _comma_count++;
   d51ba:	1c70      	adds	r0, r6, #1
   d51bc:	b2c6      	uxtb	r6, r0
            credentials[_comma_count] = "";
   d51be:	4641      	mov	r1, r8
   d51c0:	eb04 1006 	add.w	r0, r4, r6, lsl #4
   d51c4:	f001 f897 	bl	d62f6 <_ZN6StringaSEPKc>
            _sentencePos++;
   d51c8:	3501      	adds	r5, #1
   d51ca:	e7f1      	b.n	d51b0 <_ZN8LightIOT14getCredentialsEP6StringPc+0x18>
	String & operator += (char c)			{concat(c); return (*this);}
   d51cc:	eb04 1006 	add.w	r0, r4, r6, lsl #4
   d51d0:	f001 f8e7 	bl	d63a2 <_ZN6String6concatEc>
        }
        else{
            credentials[_comma_count] += inputBuffer[_sentencePos];
            _sentencePos++;
   d51d4:	e7f8      	b.n	d51c8 <_ZN8LightIOT14getCredentialsEP6StringPc+0x30>
        }
    }
}
   d51d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51da:	bf00      	nop
   d51dc:	000d8860 	.word	0x000d8860

000d51e0 <_ZN8LightIOT4markEi>:
      space(0); // Just to be sure
      delay(100);
  }
}

void LightIOT::mark(int time) {
   d51e0:	b510      	push	{r4, lr}
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d51e2:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d51e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
void LightIOT::mark(int time) {
   d51ea:	460c      	mov	r4, r1
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
   d51ec:	435a      	muls	r2, r3
   d51ee:	2180      	movs	r1, #128	; 0x80
   d51f0:	200e      	movs	r0, #14
   d51f2:	f002 fa79 	bl	d76e8 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d51f6:	2c00      	cmp	r4, #0
   d51f8:	dd04      	ble.n	d5204 <_ZN8LightIOT4markEi+0x24>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d51fa:	4620      	mov	r0, r4
}
   d51fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5200:	f000 bca6 	b.w	d5b50 <HAL_Delay_Microseconds>
   d5204:	bd10      	pop	{r4, pc}

000d5206 <_ZN8LightIOT5spaceEi>:

/* Leave pin off for time (given in microseconds) */

void LightIOT::space(int time) {
   d5206:	b510      	push	{r4, lr}
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d5208:	f8d0 3648 	ldr.w	r3, [r0, #1608]	; 0x648
   d520c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
void LightIOT::space(int time) {
   d5210:	460c      	mov	r4, r1
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
   d5212:	435a      	muls	r2, r3
   d5214:	2100      	movs	r1, #0
   d5216:	200e      	movs	r0, #14
   d5218:	f002 fa66 	bl	d76e8 <_Z11analogWritetmm>
  if (time > 0) delayMicroseconds(time);
   d521c:	2c00      	cmp	r4, #0
   d521e:	dd04      	ble.n	d522a <_ZN8LightIOT5spaceEi+0x24>
   d5220:	4620      	mov	r0, r4
}
   d5222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5226:	f000 bc93 	b.w	d5b50 <HAL_Delay_Microseconds>
   d522a:	bd10      	pop	{r4, pc}

000d522c <_ZN8LightIOT11enableIROutEi>:


void LightIOT::enableIROut(int khz){
   d522c:	b508      	push	{r3, lr}
    irout_khz = khz;
   d522e:	f8c0 1648 	str.w	r1, [r0, #1608]	; 0x648
    pinMode(TIMER_PWM_PIN, OUTPUT);
   d5232:	2101      	movs	r1, #1
   d5234:	200e      	movs	r0, #14
   d5236:	f002 fa03 	bl	d7640 <pinMode>
    digitalWrite(TIMER_PWM_PIN, LOW);
   d523a:	2100      	movs	r1, #0
   d523c:	200e      	movs	r0, #14
   d523e:	f002 fa10 	bl	d7662 <digitalWrite>
    TIMER_CONFIG_KHZ(khz);
}
   d5242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIMER_CONFIG_KHZ(khz);
   d5246:	2101      	movs	r1, #1
   d5248:	200e      	movs	r0, #14
   d524a:	f002 b9f9 	b.w	d7640 <pinMode>

000d524e <_ZN8LightIOT7sendRawEPjii>:
{
   d524e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5252:	4604      	mov	r4, r0
   d5254:	460f      	mov	r7, r1
   d5256:	4690      	mov	r8, r2
   d5258:	4699      	mov	r9, r3
   d525a:	2605      	movs	r6, #5
      enableIROut(khz);
   d525c:	4649      	mov	r1, r9
   d525e:	4620      	mov	r0, r4
   d5260:	f7ff ffe4 	bl	d522c <_ZN8LightIOT11enableIROutEi>
      for (int i = 0; i < len; i++) {
   d5264:	2500      	movs	r5, #0
   d5266:	4545      	cmp	r5, r8
   d5268:	da0b      	bge.n	d5282 <_ZN8LightIOT7sendRawEPjii+0x34>
        if (i & 1) {
   d526a:	07eb      	lsls	r3, r5, #31
   d526c:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
          space(buf[i]);
   d5270:	4620      	mov	r0, r4
        if (i & 1) {
   d5272:	d503      	bpl.n	d527c <_ZN8LightIOT7sendRawEPjii+0x2e>
          space(buf[i]);
   d5274:	f7ff ffc7 	bl	d5206 <_ZN8LightIOT5spaceEi>
      for (int i = 0; i < len; i++) {
   d5278:	3501      	adds	r5, #1
   d527a:	e7f4      	b.n	d5266 <_ZN8LightIOT7sendRawEPjii+0x18>
          mark(buf[i]);
   d527c:	f7ff ffb0 	bl	d51e0 <_ZN8LightIOT4markEi>
   d5280:	e7fa      	b.n	d5278 <_ZN8LightIOT7sendRawEPjii+0x2a>
      space(0); // Just to be sure
   d5282:	2100      	movs	r1, #0
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff ffbe 	bl	d5206 <_ZN8LightIOT5spaceEi>
      delay(100);
   d528a:	2064      	movs	r0, #100	; 0x64
   d528c:	f001 fa56 	bl	d673c <delay>
  for(int i=0;i<5;i++){
   d5290:	3e01      	subs	r6, #1
   d5292:	d1e3      	bne.n	d525c <_ZN8LightIOT7sendRawEPjii+0xe>
}
   d5294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5298 <_ZN8LightIOT11sendCommandEh.part.0>:
    }else if (command==3){
   d5298:	2903      	cmp	r1, #3
void LightIOT::sendCommand(uint8_t command){
   d529a:	b538      	push	{r3, r4, r5, lr}
        sendRaw(rawData_t, 67, 38);  // Send T command
   d529c:	f04f 0243 	mov.w	r2, #67	; 0x43
   d52a0:	f500 65cb 	add.w	r5, r0, #1624	; 0x658
   d52a4:	f04f 0326 	mov.w	r3, #38	; 0x26
    }else if (command==3){
   d52a8:	d109      	bne.n	d52be <_ZN8LightIOT11sendCommandEh.part.0+0x26>
        sendRaw(rawData_t, 67, 38);  // Send T command
   d52aa:	f500 7149 	add.w	r1, r0, #804	; 0x324
   d52ae:	f7ff ffce 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE T";
   d52b2:	490a      	ldr	r1, [pc, #40]	; (d52dc <_ZN8LightIOT11sendCommandEh.part.0+0x44>)
        _modeDriver = "MODE M";
   d52b4:	4628      	mov	r0, r5
}
   d52b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _modeDriver = "MODE M";
   d52ba:	f001 b81c 	b.w	d62f6 <_ZN6StringaSEPKc>
    }else if (command==4){
   d52be:	2904      	cmp	r1, #4
   d52c0:	d105      	bne.n	d52ce <_ZN8LightIOT11sendCommandEh.part.0+0x36>
        sendRaw(rawData_m, 67, 38);  // Send U command
   d52c2:	f200 513c 	addw	r1, r0, #1340	; 0x53c
   d52c6:	f7ff ffc2 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE U";
   d52ca:	4905      	ldr	r1, [pc, #20]	; (d52e0 <_ZN8LightIOT11sendCommandEh.part.0+0x48>)
   d52cc:	e7f2      	b.n	d52b4 <_ZN8LightIOT11sendCommandEh.part.0+0x1c>
        sendRaw(rawData_u, 67, 38);  // Send M command
   d52ce:	f500 6186 	add.w	r1, r0, #1072	; 0x430
   d52d2:	f7ff ffbc 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE M";
   d52d6:	4903      	ldr	r1, [pc, #12]	; (d52e4 <_ZN8LightIOT11sendCommandEh.part.0+0x4c>)
   d52d8:	e7ec      	b.n	d52b4 <_ZN8LightIOT11sendCommandEh.part.0+0x1c>
   d52da:	bf00      	nop
   d52dc:	000d8850 	.word	0x000d8850
   d52e0:	000d8857 	.word	0x000d8857
   d52e4:	000d89bb 	.word	0x000d89bb

000d52e8 <_ZN8LightIOT11sendCommandEh>:
void LightIOT::sendCommand(uint8_t command){
   d52e8:	b510      	push	{r4, lr}
   d52ea:	4604      	mov	r4, r0
    if (command==0){
   d52ec:	b959      	cbnz	r1, d5306 <_ZN8LightIOT11sendCommandEh+0x1e>
        sendRaw(rawData_demo, 67, 38);  // Send DEMO command
   d52ee:	4601      	mov	r1, r0
   d52f0:	2326      	movs	r3, #38	; 0x26
   d52f2:	2243      	movs	r2, #67	; 0x43
   d52f4:	f7ff ffab 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "DEMO";
   d52f8:	490f      	ldr	r1, [pc, #60]	; (d5338 <_ZN8LightIOT11sendCommandEh+0x50>)
        _modeDriver = "OFF";
   d52fa:	f504 60cb 	add.w	r0, r4, #1624	; 0x658
}
   d52fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _modeDriver = "OFF";
   d5302:	f000 bff8 	b.w	d62f6 <_ZN6StringaSEPKc>
    }else if (command==1){
   d5306:	2901      	cmp	r1, #1
   d5308:	d107      	bne.n	d531a <_ZN8LightIOT11sendCommandEh+0x32>
        sendRaw(rawData_off, 67, 38);  //  Send OFF command
   d530a:	f500 7186 	add.w	r1, r0, #268	; 0x10c
   d530e:	2326      	movs	r3, #38	; 0x26
   d5310:	2243      	movs	r2, #67	; 0x43
   d5312:	f7ff ff9c 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "OFF";
   d5316:	4909      	ldr	r1, [pc, #36]	; (d533c <_ZN8LightIOT11sendCommandEh+0x54>)
   d5318:	e7ef      	b.n	d52fa <_ZN8LightIOT11sendCommandEh+0x12>
    }else if (command==2){
   d531a:	2902      	cmp	r1, #2
   d531c:	d107      	bne.n	d532e <_ZN8LightIOT11sendCommandEh+0x46>
        sendRaw(rawData_l, 67, 38);  // Send L command
   d531e:	f500 7106 	add.w	r1, r0, #536	; 0x218
   d5322:	2326      	movs	r3, #38	; 0x26
   d5324:	2243      	movs	r2, #67	; 0x43
   d5326:	f7ff ff92 	bl	d524e <_ZN8LightIOT7sendRawEPjii>
        _modeDriver = "MODE L";
   d532a:	4905      	ldr	r1, [pc, #20]	; (d5340 <_ZN8LightIOT11sendCommandEh+0x58>)
   d532c:	e7e5      	b.n	d52fa <_ZN8LightIOT11sendCommandEh+0x12>
}
   d532e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5332:	f7ff bfb1 	b.w	d5298 <_ZN8LightIOT11sendCommandEh.part.0>
   d5336:	bf00      	nop
   d5338:	000d8840 	.word	0x000d8840
   d533c:	000d8845 	.word	0x000d8845
   d5340:	000d8849 	.word	0x000d8849

000d5344 <_ZN8LightIOT9measuringEPfS0_>:
//=============================================================
//==================== SENSORS FUNCTION =======================
//=============================================================

// update sensor variables, add to average and countSamples
void LightIOT::measuring(float *vAverage, float *cAverage){
   d5344:	b570      	push	{r4, r5, r6, lr}
   d5346:	ed2d 8b06 	vpush	{d8-d10}
  
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d534a:	f8d0 3650 	ldr.w	r3, [r0, #1616]	; 0x650
   d534e:	ee07 3a90 	vmov	s15, r3
void LightIOT::measuring(float *vAverage, float *cAverage){
   d5352:	4606      	mov	r6, r0
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d5354:	2013      	movs	r0, #19
void LightIOT::measuring(float *vAverage, float *cAverage){
   d5356:	460d      	mov	r5, r1
   d5358:	4614      	mov	r4, r2
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d535a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d535e:	f002 f9ac 	bl	d76ba <analogRead>
   d5362:	f8d6 3654 	ldr.w	r3, [r6, #1620]	; 0x654
   d5366:	ee07 0a90 	vmov	s15, r0
   d536a:	ee07 3a10 	vmov	s14, r3
   d536e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5372:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
    float ledCurrent = ledSensor.getCurrent_mA();
   d5376:	4822      	ldr	r0, [pc, #136]	; (d5400 <_ZN8LightIOT9measuringEPfS0_+0xbc>)
    float ledVoltage = _p1*((float)analogRead(A0))+_p2;
   d5378:	eea8 8aa7 	vfma.f32	s16, s17, s15
    float ledCurrent = ledSensor.getCurrent_mA();
   d537c:	f000 fb80 	bl	d5a80 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float panelVoltage = panelSensor.getBusVoltage_V();
   d5380:	4820      	ldr	r0, [pc, #128]	; (d5404 <_ZN8LightIOT9measuringEPfS0_+0xc0>)
    float ledCurrent = ledSensor.getCurrent_mA();
   d5382:	eeb0 aa40 	vmov.f32	s20, s0
    float panelVoltage = panelSensor.getBusVoltage_V();
   d5386:	f000 fb67 	bl	d5a58 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float panelCurrent = panelSensor.getCurrent_mA();
   d538a:	481e      	ldr	r0, [pc, #120]	; (d5404 <_ZN8LightIOT9measuringEPfS0_+0xc0>)
    float panelVoltage = panelSensor.getBusVoltage_V();
   d538c:	eef0 9a40 	vmov.f32	s19, s0
    float panelCurrent = panelSensor.getCurrent_mA();
   d5390:	f000 fb76 	bl	d5a80 <_ZN15Adafruit_INA21913getCurrent_mAEv>
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d5394:	481c      	ldr	r0, [pc, #112]	; (d5408 <_ZN8LightIOT9measuringEPfS0_+0xc4>)
    float panelCurrent = panelSensor.getCurrent_mA();
   d5396:	eeb0 9a40 	vmov.f32	s18, s0
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d539a:	f000 fb5d 	bl	d5a58 <_ZN15Adafruit_INA21915getBusVoltage_VEv>
    float batteryCurrent = batterySensor.getCurrent_mA();
   d539e:	481a      	ldr	r0, [pc, #104]	; (d5408 <_ZN8LightIOT9measuringEPfS0_+0xc4>)
    float batteryVoltage = batterySensor.getBusVoltage_V();
   d53a0:	eef0 8a40 	vmov.f32	s17, s0
    float batteryCurrent = batterySensor.getCurrent_mA();
   d53a4:	f000 fb6c 	bl	d5a80 <_ZN15Adafruit_INA21913getCurrent_mAEv>

    vAverage[0] += ledVoltage;
   d53a8:	ed95 7a00 	vldr	s14, [r5]
   d53ac:	ee37 8a08 	vadd.f32	s16, s14, s16
   d53b0:	ed85 8a00 	vstr	s16, [r5]
    cAverage[0] += ledCurrent;
   d53b4:	edd4 6a00 	vldr	s13, [r4]
   d53b8:	ee36 7a8a 	vadd.f32	s14, s13, s20
   d53bc:	ed84 7a00 	vstr	s14, [r4]
    vAverage[1] += panelVoltage;
   d53c0:	edd5 6a01 	vldr	s13, [r5, #4]
   d53c4:	ee36 7aa9 	vadd.f32	s14, s13, s19
   d53c8:	ed85 7a01 	vstr	s14, [r5, #4]
    cAverage[1] += panelCurrent;
   d53cc:	edd4 6a01 	vldr	s13, [r4, #4]
   d53d0:	ee36 7a89 	vadd.f32	s14, s13, s18
   d53d4:	ed84 7a01 	vstr	s14, [r4, #4]
    vAverage[2] += batteryVoltage;
   d53d8:	edd5 6a02 	vldr	s13, [r5, #8]
   d53dc:	ee36 7aa8 	vadd.f32	s14, s13, s17
    cAverage[2] += batteryCurrent;

    _countSamples++;
}
   d53e0:	ecbd 8b06 	vpop	{d8-d10}
    vAverage[2] += batteryVoltage;
   d53e4:	ed85 7a02 	vstr	s14, [r5, #8]
    cAverage[2] += batteryCurrent;
   d53e8:	edd4 7a02 	vldr	s15, [r4, #8]
   d53ec:	ee37 0a80 	vadd.f32	s0, s15, s0
   d53f0:	ed84 0a02 	vstr	s0, [r4, #8]
    _countSamples++;
   d53f4:	f8d6 3674 	ldr.w	r3, [r6, #1652]	; 0x674
   d53f8:	3301      	adds	r3, #1
   d53fa:	f8c6 3674 	str.w	r3, [r6, #1652]	; 0x674
}
   d53fe:	bd70      	pop	{r4, r5, r6, pc}
   d5400:	2003e61c 	.word	0x2003e61c
   d5404:	2003e62c 	.word	0x2003e62c
   d5408:	2003e60c 	.word	0x2003e60c

000d540c <_ZN8LightIOT10getAverageEPfS0_>:

// set average variables (average=average/samples)
void LightIOT::getAverage(float *vAverage, float *cAverage){
    vAverage[0] = vAverage[0]/ (float) _countSamples;
   d540c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5410:	edd1 6a00 	vldr	s13, [r1]
   d5414:	ee07 3a90 	vmov	s15, r3
   d5418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d541c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5420:	ed81 7a00 	vstr	s14, [r1]
    cAverage[0] = cAverage[0]/ (float) _countSamples;
   d5424:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5428:	edd2 6a00 	vldr	s13, [r2]
   d542c:	ee07 3a90 	vmov	s15, r3
   d5430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5438:	ed82 7a00 	vstr	s14, [r2]
    vAverage[1] = vAverage[1]/ (float) _countSamples;
   d543c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5440:	edd1 6a01 	vldr	s13, [r1, #4]
   d5444:	ee07 3a90 	vmov	s15, r3
   d5448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d544c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5450:	ed81 7a01 	vstr	s14, [r1, #4]
    cAverage[1] = cAverage[1]/ (float) _countSamples;
   d5454:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5458:	edd2 6a01 	vldr	s13, [r2, #4]
   d545c:	ee07 3a90 	vmov	s15, r3
   d5460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5468:	ed82 7a01 	vstr	s14, [r2, #4]
    vAverage[2] = vAverage[2]/ (float) _countSamples;
   d546c:	f8d0 3674 	ldr.w	r3, [r0, #1652]	; 0x674
   d5470:	edd1 6a02 	vldr	s13, [r1, #8]
   d5474:	ee07 3a90 	vmov	s15, r3
   d5478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    cAverage[2] = cAverage[2]/ (float) _countSamples;
   d547c:	f200 6374 	addw	r3, r0, #1652	; 0x674
    vAverage[2] = vAverage[2]/ (float) _countSamples;
   d5480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5484:	ed81 7a02 	vstr	s14, [r1, #8]
    cAverage[2] = cAverage[2]/ (float) _countSamples;
   d5488:	edd3 7a00 	vldr	s15, [r3]
   d548c:	edd2 6a02 	vldr	s13, [r2, #8]
   d5490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d5498:	ed82 7a02 	vstr	s14, [r2, #8]
}
   d549c:	4770      	bx	lr

000d549e <_ZN8LightIOT12resetAverageEPfS0_>:

// reset average variables
void LightIOT::resetAverage(float *vAverage, float *cAverage){
    vAverage[0] = 0;
   d549e:	2300      	movs	r3, #0
   d54a0:	600b      	str	r3, [r1, #0]
    cAverage[0] = 0;
   d54a2:	6013      	str	r3, [r2, #0]
    vAverage[1] = 0;
   d54a4:	604b      	str	r3, [r1, #4]
    cAverage[1] = 0;
   d54a6:	6053      	str	r3, [r2, #4]
    vAverage[2] = 0;
   d54a8:	608b      	str	r3, [r1, #8]
    cAverage[2] = 0;
   d54aa:	6093      	str	r3, [r2, #8]
    _countSamples= 0;
   d54ac:	2300      	movs	r3, #0
   d54ae:	f8c0 3674 	str.w	r3, [r0, #1652]	; 0x674
}
   d54b2:	4770      	bx	lr

000d54b4 <_ZN8LightIOT13sensorsToJSONEPfS0_>:
void LightIOT::setModeDriver(String modeDriver){
  _modeDriver = modeDriver;
}

// Create json object with average variables
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    String dataJson = "{";
   d54b8:	f8df 936c 	ldr.w	r9, [pc, #876]	; d5828 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x374>

        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d54bc:	4dcf      	ldr	r5, [pc, #828]	; (d57fc <_ZN8LightIOT13sensorsToJSONEPfS0_+0x348>)
            dataJson = dataJson + "\"name\":" + "\"Luminaria1\""+",";   //luminaria i
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d54be:	f8df a36c 	ldr.w	sl, [pc, #876]	; d582c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x378>
        	dataJson = dataJson + "\"data\":" + "{";
        	
            	dataJson = dataJson+ "\"led\":" + "{";
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d54c2:	f8df b36c 	ldr.w	fp, [pc, #876]	; d5830 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x37c>
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d54c6:	b08b      	sub	sp, #44	; 0x2c
   d54c8:	4604      	mov	r4, r0
   d54ca:	460e      	mov	r6, r1
    String dataJson = "{";
   d54cc:	4649      	mov	r1, r9
String LightIOT::sensorsToJSON(float *vAverage, float *cAverage){
   d54ce:	4690      	mov	r8, r2
   d54d0:	461f      	mov	r7, r3
    String dataJson = "{";
   d54d2:	f000 fee2 	bl	d629a <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
   d54d6:	4621      	mov	r1, r4
   d54d8:	a806      	add	r0, sp, #24
   d54da:	f000 ff01 	bl	d62e0 <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"id\":" + "\"e00fce68da5fd5cd09d82078\""+",";
   d54de:	49c8      	ldr	r1, [pc, #800]	; (d5800 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x34c>)
   d54e0:	a806      	add	r0, sp, #24
   d54e2:	f000 ff77 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d54e6:	49c7      	ldr	r1, [pc, #796]	; (d5804 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x350>)
   d54e8:	f000 ff74 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d54ec:	4629      	mov	r1, r5
   d54ee:	f000 ff71 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d54f2:	4601      	mov	r1, r0
   d54f4:	4620      	mov	r0, r4
   d54f6:	f000 fee4 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d54fa:	a806      	add	r0, sp, #24
   d54fc:	f000 fe82 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5500:	4621      	mov	r1, r4
   d5502:	a806      	add	r0, sp, #24
   d5504:	f000 feec 	bl	d62e0 <_ZN6StringC1ERKS_>
            dataJson = dataJson + "\"name\":" + "\"Luminaria1\""+",";   //luminaria i
   d5508:	49bf      	ldr	r1, [pc, #764]	; (d5808 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x354>)
   d550a:	a806      	add	r0, sp, #24
   d550c:	f000 ff62 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5510:	49be      	ldr	r1, [pc, #760]	; (d580c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x358>)
   d5512:	f000 ff5f 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5516:	4629      	mov	r1, r5
   d5518:	f000 ff5c 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d551c:	4601      	mov	r1, r0
   d551e:	4620      	mov	r0, r4
   d5520:	f000 fecf 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d5524:	a806      	add	r0, sp, #24
   d5526:	f000 fe6d 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d552a:	4621      	mov	r1, r4
   d552c:	a806      	add	r0, sp, #24
   d552e:	f000 fed7 	bl	d62e0 <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"mode\":" + "\""+ _modeDriver +"\"" +",";
   d5532:	49b7      	ldr	r1, [pc, #732]	; (d5810 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x35c>)
   d5534:	a806      	add	r0, sp, #24
   d5536:	f000 ff4d 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d553a:	4651      	mov	r1, sl
   d553c:	f000 ff4a 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5540:	f506 61cb 	add.w	r1, r6, #1624	; 0x658
   d5544:	f000 ff3a 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d5548:	4651      	mov	r1, sl
   d554a:	f000 ff43 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d554e:	4629      	mov	r1, r5
   d5550:	f000 ff40 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5554:	4601      	mov	r1, r0
   d5556:	4620      	mov	r0, r4
   d5558:	f000 feb3 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d555c:	a806      	add	r0, sp, #24
   d555e:	f000 fe51 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5562:	4621      	mov	r1, r4
   d5564:	a806      	add	r0, sp, #24
   d5566:	f000 febb 	bl	d62e0 <_ZN6StringC1ERKS_>
        	dataJson = dataJson + "\"data\":" + "{";
   d556a:	49aa      	ldr	r1, [pc, #680]	; (d5814 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x360>)
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d556c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; d5834 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x380>
        	dataJson = dataJson + "\"data\":" + "{";
   d5570:	a806      	add	r0, sp, #24
   d5572:	f000 ff2f 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5576:	4649      	mov	r1, r9
   d5578:	f000 ff2c 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d557c:	4601      	mov	r1, r0
   d557e:	4620      	mov	r0, r4
   d5580:	f000 fe9f 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d5584:	a806      	add	r0, sp, #24
   d5586:	f000 fe3d 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d558a:	4621      	mov	r1, r4
   d558c:	a806      	add	r0, sp, #24
   d558e:	f000 fea7 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"led\":" + "{";
   d5592:	49a1      	ldr	r1, [pc, #644]	; (d5818 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x364>)
   d5594:	a806      	add	r0, sp, #24
   d5596:	f000 ff1d 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d559a:	4649      	mov	r1, r9
   d559c:	f000 ff1a 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d55a0:	4601      	mov	r1, r0
   d55a2:	4620      	mov	r0, r4
   d55a4:	f000 fe8d 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d55a8:	a806      	add	r0, sp, #24
   d55aa:	f000 fe2b 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d55ae:	4621      	mov	r1, r4
   d55b0:	a802      	add	r0, sp, #8
   d55b2:	f000 fe95 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[0]) +",";
   d55b6:	4659      	mov	r1, fp
   d55b8:	a802      	add	r0, sp, #8
   d55ba:	f000 ff0b 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d55be:	ed98 0a00 	vldr	s0, [r8]
   d55c2:	4606      	mov	r6, r0
   d55c4:	2106      	movs	r1, #6
   d55c6:	a806      	add	r0, sp, #24
   d55c8:	f000 feba 	bl	d6340 <_ZN6StringC1Efi>
   d55cc:	a906      	add	r1, sp, #24
   d55ce:	4630      	mov	r0, r6
   d55d0:	f000 fef4 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d55d4:	4629      	mov	r1, r5
   d55d6:	f000 fefd 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d55da:	4601      	mov	r1, r0
   d55dc:	4620      	mov	r0, r4
   d55de:	f000 fe70 	bl	d62c2 <_ZN6StringaSERKS_>
   d55e2:	a806      	add	r0, sp, #24
   d55e4:	f000 fe0e 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d55e8:	a802      	add	r0, sp, #8
   d55ea:	f000 fe0b 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d55ee:	4621      	mov	r1, r4
   d55f0:	a802      	add	r0, sp, #8
   d55f2:	f000 fe75 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[0]) +"}";
   d55f6:	4651      	mov	r1, sl
   d55f8:	a802      	add	r0, sp, #8
   d55fa:	f000 feeb 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d55fe:	ed97 0a00 	vldr	s0, [r7]
   d5602:	4606      	mov	r6, r0
   d5604:	2106      	movs	r1, #6
   d5606:	a806      	add	r0, sp, #24
   d5608:	f000 fe9a 	bl	d6340 <_ZN6StringC1Efi>
   d560c:	4630      	mov	r0, r6
   d560e:	4e83      	ldr	r6, [pc, #524]	; (d581c <_ZN8LightIOT13sensorsToJSONEPfS0_+0x368>)
   d5610:	a906      	add	r1, sp, #24
   d5612:	f000 fed3 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d5616:	4631      	mov	r1, r6
   d5618:	f000 fedc 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d561c:	4601      	mov	r1, r0
   d561e:	4620      	mov	r0, r4
   d5620:	f000 fe4f 	bl	d62c2 <_ZN6StringaSERKS_>
   d5624:	a806      	add	r0, sp, #24
   d5626:	f000 fded 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d562a:	a802      	add	r0, sp, #8
   d562c:	f000 fdea 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5630:	4621      	mov	r1, r4
   d5632:	a806      	add	r0, sp, #24
   d5634:	f000 fe54 	bl	d62e0 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d5638:	4629      	mov	r1, r5
   d563a:	a806      	add	r0, sp, #24
   d563c:	f000 feca 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5640:	4601      	mov	r1, r0
   d5642:	4620      	mov	r0, r4
   d5644:	f000 fe3d 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d5648:	a806      	add	r0, sp, #24
   d564a:	f000 fddb 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d564e:	4621      	mov	r1, r4
   d5650:	a806      	add	r0, sp, #24
   d5652:	f000 fe45 	bl	d62e0 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"pv\":" + "{";
   d5656:	4972      	ldr	r1, [pc, #456]	; (d5820 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x36c>)
   d5658:	a806      	add	r0, sp, #24
   d565a:	f000 febb 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d565e:	4649      	mov	r1, r9
   d5660:	f000 feb8 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5664:	4601      	mov	r1, r0
   d5666:	4620      	mov	r0, r4
   d5668:	f000 fe2b 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d566c:	a806      	add	r0, sp, #24
   d566e:	f000 fdc9 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5672:	4621      	mov	r1, r4
   d5674:	a802      	add	r0, sp, #8
   d5676:	f000 fe33 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[1]) +",";
   d567a:	4659      	mov	r1, fp
   d567c:	a802      	add	r0, sp, #8
   d567e:	f000 fea9 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5682:	ed98 0a01 	vldr	s0, [r8, #4]
   d5686:	9001      	str	r0, [sp, #4]
   d5688:	2106      	movs	r1, #6
   d568a:	a806      	add	r0, sp, #24
   d568c:	f000 fe58 	bl	d6340 <_ZN6StringC1Efi>
   d5690:	9b01      	ldr	r3, [sp, #4]
   d5692:	a906      	add	r1, sp, #24
   d5694:	4618      	mov	r0, r3
   d5696:	f000 fe91 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d569a:	4629      	mov	r1, r5
   d569c:	f000 fe9a 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d56a0:	4601      	mov	r1, r0
   d56a2:	4620      	mov	r0, r4
   d56a4:	f000 fe0d 	bl	d62c2 <_ZN6StringaSERKS_>
   d56a8:	a806      	add	r0, sp, #24
   d56aa:	f000 fdab 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d56ae:	a802      	add	r0, sp, #8
   d56b0:	f000 fda8 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d56b4:	4621      	mov	r1, r4
   d56b6:	a802      	add	r0, sp, #8
   d56b8:	f000 fe12 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[1]) +"}";
   d56bc:	4651      	mov	r1, sl
   d56be:	a802      	add	r0, sp, #8
   d56c0:	f000 fe88 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d56c4:	ed97 0a01 	vldr	s0, [r7, #4]
   d56c8:	9001      	str	r0, [sp, #4]
   d56ca:	2106      	movs	r1, #6
   d56cc:	a806      	add	r0, sp, #24
   d56ce:	f000 fe37 	bl	d6340 <_ZN6StringC1Efi>
   d56d2:	9b01      	ldr	r3, [sp, #4]
   d56d4:	a906      	add	r1, sp, #24
   d56d6:	4618      	mov	r0, r3
   d56d8:	f000 fe70 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d56dc:	4631      	mov	r1, r6
   d56de:	f000 fe79 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d56e2:	4601      	mov	r1, r0
   d56e4:	4620      	mov	r0, r4
   d56e6:	f000 fdec 	bl	d62c2 <_ZN6StringaSERKS_>
   d56ea:	a806      	add	r0, sp, #24
   d56ec:	f000 fd8a 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d56f0:	a802      	add	r0, sp, #8
   d56f2:	f000 fd87 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d56f6:	4621      	mov	r1, r4
   d56f8:	a806      	add	r0, sp, #24
   d56fa:	f000 fdf1 	bl	d62e0 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ ",";
   d56fe:	4629      	mov	r1, r5
   d5700:	a806      	add	r0, sp, #24
   d5702:	f000 fe67 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5706:	4601      	mov	r1, r0
   d5708:	4620      	mov	r0, r4
   d570a:	f000 fdda 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d570e:	a806      	add	r0, sp, #24
   d5710:	f000 fd78 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5714:	4621      	mov	r1, r4
   d5716:	a806      	add	r0, sp, #24
   d5718:	f000 fde2 	bl	d62e0 <_ZN6StringC1ERKS_>
            	
            	dataJson = dataJson+ "\"battery\":" + "{";
   d571c:	4941      	ldr	r1, [pc, #260]	; (d5824 <_ZN8LightIOT13sensorsToJSONEPfS0_+0x370>)
   d571e:	a806      	add	r0, sp, #24
   d5720:	f000 fe58 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5724:	4649      	mov	r1, r9
   d5726:	f000 fe55 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d572a:	4601      	mov	r1, r0
   d572c:	4620      	mov	r0, r4
   d572e:	f000 fdc8 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d5732:	a806      	add	r0, sp, #24
   d5734:	f000 fd66 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5738:	4621      	mov	r1, r4
   d573a:	a802      	add	r0, sp, #8
   d573c:	f000 fdd0 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"voltage\":" + String(vAverage[2]) +",";
   d5740:	4659      	mov	r1, fp
   d5742:	a802      	add	r0, sp, #8
   d5744:	f000 fe46 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5748:	ed98 0a02 	vldr	s0, [r8, #8]
   d574c:	4681      	mov	r9, r0
   d574e:	2106      	movs	r1, #6
   d5750:	a806      	add	r0, sp, #24
   d5752:	f000 fdf5 	bl	d6340 <_ZN6StringC1Efi>
   d5756:	a906      	add	r1, sp, #24
   d5758:	4648      	mov	r0, r9
   d575a:	f000 fe2f 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d575e:	4629      	mov	r1, r5
   d5760:	f000 fe38 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5764:	4601      	mov	r1, r0
   d5766:	4620      	mov	r0, r4
   d5768:	f000 fdab 	bl	d62c2 <_ZN6StringaSERKS_>
   d576c:	a806      	add	r0, sp, #24
   d576e:	f000 fd49 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d5772:	a802      	add	r0, sp, #8
   d5774:	f000 fd46 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d5778:	4621      	mov	r1, r4
   d577a:	a802      	add	r0, sp, #8
   d577c:	f000 fdb0 	bl	d62e0 <_ZN6StringC1ERKS_>
            	dataJson = dataJson+ "\"current\":" + String(cAverage[2]) +"}";
   d5780:	4651      	mov	r1, sl
   d5782:	a802      	add	r0, sp, #8
   d5784:	f000 fe26 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d5788:	ed97 0a02 	vldr	s0, [r7, #8]
   d578c:	4605      	mov	r5, r0
   d578e:	2106      	movs	r1, #6
   d5790:	a806      	add	r0, sp, #24
   d5792:	f000 fdd5 	bl	d6340 <_ZN6StringC1Efi>
   d5796:	a906      	add	r1, sp, #24
   d5798:	4628      	mov	r0, r5
   d579a:	f000 fe0f 	bl	d63bc <_ZplRK15StringSumHelperRK6String>
   d579e:	4631      	mov	r1, r6
   d57a0:	f000 fe18 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d57a4:	4601      	mov	r1, r0
   d57a6:	4620      	mov	r0, r4
   d57a8:	f000 fd8b 	bl	d62c2 <_ZN6StringaSERKS_>
   d57ac:	a806      	add	r0, sp, #24
   d57ae:	f000 fd29 	bl	d6204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d57b2:	a802      	add	r0, sp, #8
   d57b4:	f000 fd26 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d57b8:	4621      	mov	r1, r4
   d57ba:	a806      	add	r0, sp, #24
   d57bc:	f000 fd90 	bl	d62e0 <_ZN6StringC1ERKS_>
        	
        	dataJson = dataJson+ "}";
   d57c0:	4631      	mov	r1, r6
   d57c2:	a806      	add	r0, sp, #24
   d57c4:	f000 fe06 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d57c8:	4601      	mov	r1, r0
   d57ca:	4620      	mov	r0, r4
   d57cc:	f000 fd79 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d57d0:	a806      	add	r0, sp, #24
   d57d2:	f000 fd17 	bl	d6204 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d57d6:	4621      	mov	r1, r4
   d57d8:	a806      	add	r0, sp, #24
   d57da:	f000 fd81 	bl	d62e0 <_ZN6StringC1ERKS_>
    	
    	dataJson = dataJson+ "}";
   d57de:	4631      	mov	r1, r6
   d57e0:	a806      	add	r0, sp, #24
   d57e2:	f000 fdf7 	bl	d63d4 <_ZplRK15StringSumHelperPKc>
   d57e6:	4601      	mov	r1, r0
   d57e8:	4620      	mov	r0, r4
   d57ea:	f000 fd6a 	bl	d62c2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d57ee:	a806      	add	r0, sp, #24
   d57f0:	f000 fd08 	bl	d6204 <_ZN6StringD1Ev>

    return dataJson;
}
   d57f4:	4620      	mov	r0, r4
   d57f6:	b00b      	add	sp, #44	; 0x2c
   d57f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57fc:	000d89e5 	.word	0x000d89e5
   d5800:	000d89c4 	.word	0x000d89c4
   d5804:	000d89ca 	.word	0x000d89ca
   d5808:	000d89e7 	.word	0x000d89e7
   d580c:	000d89ef 	.word	0x000d89ef
   d5810:	000d89fc 	.word	0x000d89fc
   d5814:	000d8a04 	.word	0x000d8a04
   d5818:	000d8a0c 	.word	0x000d8a0c
   d581c:	000d8a29 	.word	0x000d8a29
   d5820:	000d8a2b 	.word	0x000d8a2b
   d5824:	000d8a31 	.word	0x000d8a31
   d5828:	000d89c2 	.word	0x000d89c2
   d582c:	000d89fa 	.word	0x000d89fa
   d5830:	000d8a13 	.word	0x000d8a13
   d5834:	000d8a1e 	.word	0x000d8a1e

000d5838 <_ZN8LightIOT12changeModeIRE6String>:
}

//=============================================================
//========================= CHANGE MODE =========================
//=============================================================
void LightIOT::changeModeIR(String currentMode){
   d5838:	b538      	push	{r3, r4, r5, lr}
   d583a:	460d      	mov	r5, r1
   d583c:	4604      	mov	r4, r0
    if(currentMode.equals("OFF")){
   d583e:	4913      	ldr	r1, [pc, #76]	; (d588c <_ZN8LightIOT12changeModeIRE6String+0x54>)
   d5840:	4628      	mov	r0, r5
   d5842:	f000 fddc 	bl	d63fe <_ZNK6String6equalsEPKc>
   d5846:	b128      	cbz	r0, d5854 <_ZN8LightIOT12changeModeIRE6String+0x1c>
        sendCommand(1);  //  Send OFF command
   d5848:	2101      	movs	r1, #1
    }else if(currentMode.equals("MODE L")){
        sendCommand(2);  // Send L command
   d584a:	4620      	mov	r0, r4
    }else if(currentMode.equals("MODE U")){
        sendCommand(4);  // Send U command
    }else{
        sendCommand(5);  // Send M command
    }
}
   d584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        sendCommand(2);  // Send L command
   d5850:	f7ff bd4a 	b.w	d52e8 <_ZN8LightIOT11sendCommandEh>
    }else if(currentMode.equals("MODE L")){
   d5854:	490e      	ldr	r1, [pc, #56]	; (d5890 <_ZN8LightIOT12changeModeIRE6String+0x58>)
   d5856:	4628      	mov	r0, r5
   d5858:	f000 fdd1 	bl	d63fe <_ZNK6String6equalsEPKc>
   d585c:	b108      	cbz	r0, d5862 <_ZN8LightIOT12changeModeIRE6String+0x2a>
        sendCommand(2);  // Send L command
   d585e:	2102      	movs	r1, #2
   d5860:	e7f3      	b.n	d584a <_ZN8LightIOT12changeModeIRE6String+0x12>
    }else if(currentMode.equals("MODE T")){
   d5862:	490c      	ldr	r1, [pc, #48]	; (d5894 <_ZN8LightIOT12changeModeIRE6String+0x5c>)
   d5864:	4628      	mov	r0, r5
   d5866:	f000 fdca 	bl	d63fe <_ZNK6String6equalsEPKc>
   d586a:	b128      	cbz	r0, d5878 <_ZN8LightIOT12changeModeIRE6String+0x40>
    }else if (command==2){
   d586c:	2103      	movs	r1, #3
   d586e:	4620      	mov	r0, r4
}
   d5870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5874:	f7ff bd10 	b.w	d5298 <_ZN8LightIOT11sendCommandEh.part.0>
    }else if(currentMode.equals("MODE U")){
   d5878:	4907      	ldr	r1, [pc, #28]	; (d5898 <_ZN8LightIOT12changeModeIRE6String+0x60>)
   d587a:	4628      	mov	r0, r5
   d587c:	f000 fdbf 	bl	d63fe <_ZNK6String6equalsEPKc>
   d5880:	b108      	cbz	r0, d5886 <_ZN8LightIOT12changeModeIRE6String+0x4e>
    }else if (command==2){
   d5882:	2104      	movs	r1, #4
   d5884:	e7f3      	b.n	d586e <_ZN8LightIOT12changeModeIRE6String+0x36>
   d5886:	2105      	movs	r1, #5
   d5888:	e7f1      	b.n	d586e <_ZN8LightIOT12changeModeIRE6String+0x36>
   d588a:	bf00      	nop
   d588c:	000d8845 	.word	0x000d8845
   d5890:	000d8849 	.word	0x000d8849
   d5894:	000d8850 	.word	0x000d8850
   d5898:	000d8857 	.word	0x000d8857

000d589c <_ZN8LightIOT17resetModeForErrorEff>:
    if(vPanel>=16.0 && cPanel<150.0){
   d589c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   d58a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d58a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void LightIOT::resetModeForError(float vPanel, float cPanel){
   d58a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d58aa:	4604      	mov	r4, r0
    if(vPanel>=16.0 && cPanel<150.0){
   d58ac:	db24      	blt.n	d58f8 <_ZN8LightIOT17resetModeForErrorEff+0x5c>
   d58ae:	eddf 7a15 	vldr	s15, [pc, #84]	; d5904 <_ZN8LightIOT17resetModeForErrorEff+0x68>
   d58b2:	eef4 0ae7 	vcmpe.f32	s1, s15
   d58b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d58ba:	d51d      	bpl.n	d58f8 <_ZN8LightIOT17resetModeForErrorEff+0x5c>
        _error = true;
   d58bc:	2301      	movs	r3, #1
   d58be:	f880 3670 	strb.w	r3, [r0, #1648]	; 0x670
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d58c2:	f000 f94d 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
        if(tActual > _last_tError + _intervalOutError) {
   d58c6:	f8d4 3668 	ldr.w	r3, [r4, #1640]	; 0x668
   d58ca:	f8d4 266c 	ldr.w	r2, [r4, #1644]	; 0x66c
   d58ce:	4413      	add	r3, r2
   d58d0:	4283      	cmp	r3, r0
   d58d2:	d215      	bcs.n	d5900 <_ZN8LightIOT17resetModeForErrorEff+0x64>
            _last_tError = tActual;
   d58d4:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
            changeModeIR(_modeDriver);
   d58d8:	f504 61cb 	add.w	r1, r4, #1624	; 0x658
   d58dc:	4668      	mov	r0, sp
   d58de:	f000 fcff 	bl	d62e0 <_ZN6StringC1ERKS_>
   d58e2:	4669      	mov	r1, sp
   d58e4:	4620      	mov	r0, r4
   d58e6:	f7ff ffa7 	bl	d5838 <_ZN8LightIOT12changeModeIRE6String>
   d58ea:	4668      	mov	r0, sp
   d58ec:	f000 fc8a 	bl	d6204 <_ZN6StringD1Ev>
            _error = false;
   d58f0:	2300      	movs	r3, #0
   d58f2:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
}
   d58f6:	e003      	b.n	d5900 <_ZN8LightIOT17resetModeForErrorEff+0x64>
    if(_error) {
   d58f8:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   d58fc:	2b00      	cmp	r3, #0
   d58fe:	d1e0      	bne.n	d58c2 <_ZN8LightIOT17resetModeForErrorEff+0x26>
}
   d5900:	b004      	add	sp, #16
   d5902:	bd10      	pop	{r4, pc}
   d5904:	43160000 	.word	0x43160000

000d5908 <_GLOBAL__sub_I_batterySensor>:
}
   d5908:	b508      	push	{r3, lr}
Adafruit_INA219 batterySensor = Adafruit_INA219(INA219_BATTERY);
   d590a:	2144      	movs	r1, #68	; 0x44
   d590c:	4806      	ldr	r0, [pc, #24]	; (d5928 <_GLOBAL__sub_I_batterySensor+0x20>)
   d590e:	f000 f873 	bl	d59f8 <_ZN15Adafruit_INA219C1Eh>
Adafruit_INA219 panelSensor = Adafruit_INA219(INA219_PANEL);
   d5912:	2141      	movs	r1, #65	; 0x41
   d5914:	4805      	ldr	r0, [pc, #20]	; (d592c <_GLOBAL__sub_I_batterySensor+0x24>)
   d5916:	f000 f86f 	bl	d59f8 <_ZN15Adafruit_INA219C1Eh>
}
   d591a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_INA219 ledSensor = Adafruit_INA219(INA219_LED);
   d591e:	4804      	ldr	r0, [pc, #16]	; (d5930 <_GLOBAL__sub_I_batterySensor+0x28>)
   d5920:	2140      	movs	r1, #64	; 0x40
   d5922:	f000 b869 	b.w	d59f8 <_ZN15Adafruit_INA219C1Eh>
   d5926:	bf00      	nop
   d5928:	2003e60c 	.word	0x2003e60c
   d592c:	2003e62c 	.word	0x2003e62c
   d5930:	2003e61c 	.word	0x2003e61c

000d5934 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5934:	6803      	ldr	r3, [r0, #0]
   d5936:	b2c9      	uxtb	r1, r1
   d5938:	689b      	ldr	r3, [r3, #8]
   d593a:	4718      	bx	r3

000d593c <_ZN15Adafruit_INA21917wireWriteRegisterEht>:
/*! 
    @brief  Sends a single command byte over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireWriteRegister (uint8_t reg, uint16_t value)
{
   d593c:	b570      	push	{r4, r5, r6, lr}
   d593e:	4606      	mov	r6, r0
   d5940:	4614      	mov	r4, r2
   d5942:	460d      	mov	r5, r1
  Wire.beginTransmission(ina219_i2caddr);
   d5944:	f001 ff1a 	bl	d777c <_Z19__fetch_global_Wirev>
   d5948:	7831      	ldrb	r1, [r6, #0]
   d594a:	f001 f9b1 	bl	d6cb0 <_ZN7TwoWire17beginTransmissionEh>
  #if defined (SPARK)
      Wire.write(reg);                       // Register
   d594e:	f001 ff15 	bl	d777c <_Z19__fetch_global_Wirev>
   d5952:	6803      	ldr	r3, [r0, #0]
   d5954:	4629      	mov	r1, r5
   d5956:	689b      	ldr	r3, [r3, #8]
   d5958:	4798      	blx	r3
      Wire.write((value >> 8) & 0xFF);       // Upper 8-bits
   d595a:	f001 ff0f 	bl	d777c <_Z19__fetch_global_Wirev>
   d595e:	0a21      	lsrs	r1, r4, #8
   d5960:	f7ff ffe8 	bl	d5934 <_ZN7TwoWire5writeEi>
      Wire.write(value & 0xFF);              // Lower 8-bits
   d5964:	f001 ff0a 	bl	d777c <_Z19__fetch_global_Wirev>
   d5968:	b2e1      	uxtb	r1, r4
   d596a:	f7ff ffe3 	bl	d5934 <_ZN7TwoWire5writeEi>
      Wire.send(reg);                        // Register
      Wire.send(value >> 8);                 // Upper 8-bits
      Wire.send(value & 0xFF);               // Lower 8-bits
    #endif
  #endif
  Wire.endTransmission();
   d596e:	f001 ff05 	bl	d777c <_Z19__fetch_global_Wirev>
}
   d5972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d5976:	f001 b9a3 	b.w	d6cc0 <_ZN7TwoWire15endTransmissionEv>

000d597a <_ZN15Adafruit_INA21916wireReadRegisterEhPt>:
/*! 
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value)
{
   d597a:	b570      	push	{r4, r5, r6, lr}
   d597c:	4604      	mov	r4, r0
   d597e:	4615      	mov	r5, r2
   d5980:	460e      	mov	r6, r1

  Wire.beginTransmission(ina219_i2caddr);
   d5982:	f001 fefb 	bl	d777c <_Z19__fetch_global_Wirev>
   d5986:	7821      	ldrb	r1, [r4, #0]
   d5988:	f001 f992 	bl	d6cb0 <_ZN7TwoWire17beginTransmissionEh>
    #if defined (SPARK)
      Wire.write(reg);
   d598c:	f001 fef6 	bl	d777c <_Z19__fetch_global_Wirev>
   d5990:	6803      	ldr	r3, [r0, #0]
   d5992:	4631      	mov	r1, r6
   d5994:	689b      	ldr	r3, [r3, #8]
   d5996:	4798      	blx	r3
        Wire.write(reg);                       // Register
      #else
        Wire.send(reg);                        // Register
      #endif
    #endif
  Wire.endTransmission();
   d5998:	f001 fef0 	bl	d777c <_Z19__fetch_global_Wirev>
   d599c:	f001 f990 	bl	d6cc0 <_ZN7TwoWire15endTransmissionEv>
  
  delay(1); // Max 12-bit conversion time is 586us per sample
   d59a0:	2001      	movs	r0, #1
   d59a2:	f000 fecb 	bl	d673c <delay>

  Wire.requestFrom(ina219_i2caddr, (uint8_t)2);  
   d59a6:	f001 fee9 	bl	d777c <_Z19__fetch_global_Wirev>
   d59aa:	7821      	ldrb	r1, [r4, #0]
   d59ac:	2202      	movs	r2, #2
   d59ae:	f001 f97c 	bl	d6caa <_ZN7TwoWire11requestFromEhj>
  #if defined (SPARK)
      *value = ((Wire.read() << 8) | Wire.read());
   d59b2:	f001 fee3 	bl	d777c <_Z19__fetch_global_Wirev>
   d59b6:	6803      	ldr	r3, [r0, #0]
   d59b8:	695b      	ldr	r3, [r3, #20]
   d59ba:	4798      	blx	r3
   d59bc:	4604      	mov	r4, r0
   d59be:	f001 fedd 	bl	d777c <_Z19__fetch_global_Wirev>
   d59c2:	6803      	ldr	r3, [r0, #0]
   d59c4:	695b      	ldr	r3, [r3, #20]
   d59c6:	4798      	blx	r3
   d59c8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d59cc:	8028      	strh	r0, [r5, #0]
    #else
      // Shift values to create properly formed integer
      *value = ((Wire.receive() << 8) | Wire.receive());
    #endif
  #endif
}
   d59ce:	bd70      	pop	{r4, r5, r6, pc}

000d59d0 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>:
			
    @note   These calculations assume a 0.1 ohm resistor is present
*/
/**************************************************************************/
void Adafruit_INA219::setCalibration_32V_2A(void)
{
   d59d0:	b510      	push	{r4, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W
  
  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10;  // Current LSB = 100uA per bit (1000/100 = 10)
   d59d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d59d6:	230a      	movs	r3, #10
   d59d8:	e9c0 2301 	strd	r2, r3, [r0, #4]
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d59dc:	2302      	movs	r3, #2
{
   d59de:	4604      	mov	r4, r0
  ina219_powerDivider_mW = 2;     // Power LSB = 1mW per bit (2/1)
   d59e0:	60c3      	str	r3, [r0, #12]

  // Set Calibration register to 'Cal' calculated above	
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d59e2:	2105      	movs	r1, #5
   d59e4:	f7ff ffaa 	bl	d593c <_ZN15Adafruit_INA21917wireWriteRegisterEht>
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
   d59e8:	4620      	mov	r0, r4
   d59ea:	f643 421f 	movw	r2, #15391	; 0x3c1f
}
   d59ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  wireWriteRegister(INA219_REG_CONFIG, config);
   d59f2:	2100      	movs	r1, #0
   d59f4:	f7ff bfa2 	b.w	d593c <_ZN15Adafruit_INA21917wireWriteRegisterEht>

000d59f8 <_ZN15Adafruit_INA219C1Eh>:
    @brief  Instantiates a new INA219 class
*/
/**************************************************************************/
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
   d59f8:	2200      	movs	r2, #0
  ina219_powerDivider_mW = 0;
   d59fa:	e9c0 2202 	strd	r2, r2, [r0, #8]
  ina219_i2caddr = addr;
   d59fe:	7001      	strb	r1, [r0, #0]
}
   d5a00:	4770      	bx	lr

000d5a02 <_ZN15Adafruit_INA2195beginEv>:
void Adafruit_INA219::begin(uint8_t addr) {
  ina219_i2caddr = addr;
  begin();
}

void Adafruit_INA219::begin(void) {
   d5a02:	b510      	push	{r4, lr}
   d5a04:	4604      	mov	r4, r0
  Wire.begin();    
   d5a06:	f001 feb9 	bl	d777c <_Z19__fetch_global_Wirev>
   d5a0a:	f001 f91f 	bl	d6c4c <_ZN7TwoWire5beginEv>
  // Set chip to large range config values to start
  setCalibration_32V_2A();
   d5a0e:	4620      	mov	r0, r4
}
   d5a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setCalibration_32V_2A();
   d5a14:	f7ff bfdc 	b.w	d59d0 <_ZN15Adafruit_INA21921setCalibration_32V_2AEv>

000d5a18 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getBusVoltage_raw() {
   d5a18:	b507      	push	{r0, r1, r2, lr}
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
   d5a1a:	2102      	movs	r1, #2
   d5a1c:	f10d 0206 	add.w	r2, sp, #6
   d5a20:	f7ff ffab 	bl	d597a <_ZN15Adafruit_INA21916wireReadRegisterEhPt>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
   d5a24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d5a28:	10c0      	asrs	r0, r0, #3
}
   d5a2a:	0080      	lsls	r0, r0, #2
   d5a2c:	b003      	add	sp, #12
   d5a2e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a32 <_ZN15Adafruit_INA21914getCurrent_rawEv>:
/**************************************************************************/
/*! 
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
*/
/**************************************************************************/
int16_t Adafruit_INA219::getCurrent_raw() {
   d5a32:	b513      	push	{r0, r1, r4, lr}
   d5a34:	4604      	mov	r4, r0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
   d5a36:	8882      	ldrh	r2, [r0, #4]
   d5a38:	2105      	movs	r1, #5
   d5a3a:	f7ff ff7f 	bl	d593c <_ZN15Adafruit_INA21917wireWriteRegisterEht>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
   d5a3e:	4620      	mov	r0, r4
   d5a40:	f10d 0206 	add.w	r2, sp, #6
   d5a44:	2104      	movs	r1, #4
   d5a46:	f7ff ff98 	bl	d597a <_ZN15Adafruit_INA21916wireReadRegisterEhPt>
  
  return (int16_t)value;
}
   d5a4a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   d5a4e:	b002      	add	sp, #8
   d5a50:	bd10      	pop	{r4, pc}
   d5a52:	0000      	movs	r0, r0
   d5a54:	0000      	movs	r0, r0
	...

000d5a58 <_ZN15Adafruit_INA21915getBusVoltage_VEv>:
/**************************************************************************/
/*! 
    @brief  Gets the shunt voltage in volts
*/
/**************************************************************************/
float Adafruit_INA219::getBusVoltage_V() {
   d5a58:	b508      	push	{r3, lr}
  int16_t value = getBusVoltage_raw();
   d5a5a:	f7ff ffdd 	bl	d5a18 <_ZN15Adafruit_INA21917getBusVoltage_rawEv>
  return value * 0.001;
   d5a5e:	f002 f923 	bl	d7ca8 <__aeabi_i2d>
   d5a62:	a305      	add	r3, pc, #20	; (adr r3, d5a78 <_ZN15Adafruit_INA21915getBusVoltage_VEv+0x20>)
   d5a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a68:	f002 f988 	bl	d7d7c <__aeabi_dmul>
   d5a6c:	f002 fc7e 	bl	d836c <__aeabi_d2f>
}
   d5a70:	ee00 0a10 	vmov	s0, r0
   d5a74:	bd08      	pop	{r3, pc}
   d5a76:	bf00      	nop
   d5a78:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a7c:	3f50624d 	.word	0x3f50624d

000d5a80 <_ZN15Adafruit_INA21913getCurrent_mAEv>:
/*! 
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
*/
/**************************************************************************/
float Adafruit_INA219::getCurrent_mA() {
   d5a80:	b510      	push	{r4, lr}
   d5a82:	4604      	mov	r4, r0
  float valueDec = getCurrent_raw();
   d5a84:	f7ff ffd5 	bl	d5a32 <_ZN15Adafruit_INA21914getCurrent_rawEv>
   d5a88:	ee07 0a90 	vmov	s15, r0
   d5a8c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  valueDec /= ina219_currentDivider_mA;
   d5a90:	edd4 7a02 	vldr	s15, [r4, #8]
   d5a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return valueDec;
}
   d5a98:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5a9c:	bd10      	pop	{r4, pc}
	...

000d5aa0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <netdb_freeaddrinfo+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	689b      	ldr	r3, [r3, #8]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030268 	.word	0x00030268

000d5ab0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <netdb_getaddrinfo+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	68db      	ldr	r3, [r3, #12]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030268 	.word	0x00030268

000d5ac0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_Validate_Pin_Function+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003022c 	.word	0x0003022c

000d5ad0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_Pin_Mode+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	689b      	ldr	r3, [r3, #8]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003022c 	.word	0x0003022c

000d5ae0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_Get_Pin_Mode+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	68db      	ldr	r3, [r3, #12]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003022c 	.word	0x0003022c

000d5af0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_GPIO_Write+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	691b      	ldr	r3, [r3, #16]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003022c 	.word	0x0003022c

000d5b00 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_GPIO_Read+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	695b      	ldr	r3, [r3, #20]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003022c 	.word	0x0003022c

000d5b10 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <hal_adc_read+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003022c 	.word	0x0003022c

000d5b20 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <hal_pwm_write_with_frequency_ext+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003022c 	.word	0x0003022c

000d5b30 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <if_index_to_name+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	695b      	ldr	r3, [r3, #20]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003026c 	.word	0x0003026c

000d5b40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_RNG_GetRandomNumber+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	685b      	ldr	r3, [r3, #4]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030218 	.word	0x00030218

000d5b50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_Delay_Microseconds+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	68db      	ldr	r3, [r3, #12]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030218 	.word	0x00030218

000d5b60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	695b      	ldr	r3, [r3, #20]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030218 	.word	0x00030218

000d5b70 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_EEPROM_Init+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030218 	.word	0x00030218

000d5b80 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_EEPROM_Get+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030218 	.word	0x00030218

000d5b90 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_EEPROM_Put+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030218 	.word	0x00030218

000d5ba0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <os_mutex_recursive_create+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030248 	.word	0x00030248

000d5bb0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <os_mutex_recursive_destroy+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030248 	.word	0x00030248

000d5bc0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <inet_inet_ntop+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	695b      	ldr	r3, [r3, #20]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030264 	.word	0x00030264

000d5bd0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <inet_htonl+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6a1b      	ldr	r3, [r3, #32]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030264 	.word	0x00030264

000d5be0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <inet_htons+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030264 	.word	0x00030264

000d5bf0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <hal_usart_init+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	681b      	ldr	r3, [r3, #0]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	0003023c 	.word	0x0003023c

000d5c00 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <hal_usart_write+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	68db      	ldr	r3, [r3, #12]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	0003023c 	.word	0x0003023c

000d5c10 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <hal_usart_available+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	691b      	ldr	r3, [r3, #16]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	0003023c 	.word	0x0003023c

000d5c20 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <hal_usart_read+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	695b      	ldr	r3, [r3, #20]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	0003023c 	.word	0x0003023c

000d5c30 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <hal_usart_peek+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	699b      	ldr	r3, [r3, #24]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	0003023c 	.word	0x0003023c

000d5c40 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <hal_usart_flush+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	69db      	ldr	r3, [r3, #28]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	0003023c 	.word	0x0003023c

000d5c50 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <hal_usart_is_enabled+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a1b      	ldr	r3, [r3, #32]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	0003023c 	.word	0x0003023c

000d5c60 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <hal_usart_available_data_for_write+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	0003023c 	.word	0x0003023c

000d5c70 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <hal_i2c_begin+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	68db      	ldr	r3, [r3, #12]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030228 	.word	0x00030228

000d5c80 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <hal_i2c_begin_transmission+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	699b      	ldr	r3, [r3, #24]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030228 	.word	0x00030228

000d5c90 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <hal_i2c_end_transmission+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	69db      	ldr	r3, [r3, #28]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030228 	.word	0x00030228

000d5ca0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <hal_i2c_write+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	6a1b      	ldr	r3, [r3, #32]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030228 	.word	0x00030228

000d5cb0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <hal_i2c_available+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030228 	.word	0x00030228

000d5cc0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <hal_i2c_read+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030228 	.word	0x00030228

000d5cd0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <hal_i2c_peek+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030228 	.word	0x00030228

000d5ce0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <hal_i2c_flush+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030228 	.word	0x00030228

000d5cf0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <hal_i2c_is_enabled+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030228 	.word	0x00030228

000d5d00 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <hal_i2c_init+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030228 	.word	0x00030228

000d5d10 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <hal_i2c_request_ex+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030228 	.word	0x00030228

000d5d20 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <sock_setsockopt+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	699b      	ldr	r3, [r3, #24]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030238 	.word	0x00030238

000d5d30 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <sock_close+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	69db      	ldr	r3, [r3, #28]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030238 	.word	0x00030238

000d5d40 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <sock_connect+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	6a1b      	ldr	r3, [r3, #32]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030238 	.word	0x00030238

000d5d50 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <sock_recv+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030238 	.word	0x00030238

000d5d60 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <sock_send+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030238 	.word	0x00030238

000d5d70 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <sock_socket+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030238 	.word	0x00030238

000d5d80 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <hal_spi_init+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	69db      	ldr	r3, [r3, #28]
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030230 	.word	0x00030230

000d5d90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <hal_spi_is_enabled+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6a1b      	ldr	r3, [r3, #32]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030230 	.word	0x00030230

000d5da0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_USB_USART_Init+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	681b      	ldr	r3, [r3, #0]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	0003024c 	.word	0x0003024c

000d5db0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <HAL_USB_USART_Begin+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	685b      	ldr	r3, [r3, #4]
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	0003024c 	.word	0x0003024c

000d5dc0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <HAL_USB_USART_Available_Data+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	691b      	ldr	r3, [r3, #16]
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	0003024c 	.word	0x0003024c

000d5dd0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	695b      	ldr	r3, [r3, #20]
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	0003024c 	.word	0x0003024c

000d5de0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_USB_USART_Receive_Data+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	699b      	ldr	r3, [r3, #24]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	0003024c 	.word	0x0003024c

000d5df0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <HAL_USB_USART_Send_Data+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	69db      	ldr	r3, [r3, #28]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	0003024c 	.word	0x0003024c

000d5e00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <HAL_USB_USART_Flush_Data+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	6a1b      	ldr	r3, [r3, #32]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	0003024c 	.word	0x0003024c

000d5e10 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <wlan_connected_info+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030274 	.word	0x00030274

000d5e20 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <log_message+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030260 	.word	0x00030260

000d5e30 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <set_system_mode+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	685b      	ldr	r3, [r3, #4]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030220 	.word	0x00030220

000d5e40 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <system_delay_ms+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	695b      	ldr	r3, [r3, #20]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030220 	.word	0x00030220

000d5e50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <system_thread_set_state+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030220 	.word	0x00030220

000d5e60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b03      	ldr	r3, [pc, #12]	; (d5e70 <system_ctrl_set_app_request_handler+0x10>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5e6a:	9301      	str	r3, [sp, #4]
   d5e6c:	bd08      	pop	{r3, pc}
   d5e6e:	0000      	.short	0x0000
   d5e70:	00030220 	.word	0x00030220

000d5e74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b03      	ldr	r3, [pc, #12]	; (d5e84 <system_ctrl_set_result+0x10>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5e7e:	9301      	str	r3, [sp, #4]
   d5e80:	bd08      	pop	{r3, pc}
   d5e82:	0000      	.short	0x0000
   d5e84:	00030220 	.word	0x00030220

000d5e88 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <network_config+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	681b      	ldr	r3, [r3, #0]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030240 	.word	0x00030240

000d5e98 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <network_connect+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	685b      	ldr	r3, [r3, #4]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030240 	.word	0x00030240

000d5ea8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <network_connecting+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	689b      	ldr	r3, [r3, #8]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030240 	.word	0x00030240

000d5eb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <network_disconnect+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	68db      	ldr	r3, [r3, #12]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030240 	.word	0x00030240

000d5ec8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <network_ready+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	691b      	ldr	r3, [r3, #16]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030240 	.word	0x00030240

000d5ed8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <network_on+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	695b      	ldr	r3, [r3, #20]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030240 	.word	0x00030240

000d5ee8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <network_off+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	699b      	ldr	r3, [r3, #24]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030240 	.word	0x00030240

000d5ef8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <network_listen+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	69db      	ldr	r3, [r3, #28]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030240 	.word	0x00030240

000d5f08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <network_listening+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	6a1b      	ldr	r3, [r3, #32]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030240 	.word	0x00030240

000d5f18 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <network_set_credentials+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030240 	.word	0x00030240

000d5f28 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <network_clear_credentials+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030240 	.word	0x00030240

000d5f38 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <network_set_listen_timeout+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030240 	.word	0x00030240

000d5f48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <network_get_listen_timeout+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030240 	.word	0x00030240

000d5f58 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <spark_process+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	689b      	ldr	r3, [r3, #8]
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030244 	.word	0x00030244

000d5f68 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <spark_deviceID+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	69db      	ldr	r3, [r3, #28]
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030244 	.word	0x00030244

000d5f78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030244 	.word	0x00030244

000d5f88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <malloc+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	681b      	ldr	r3, [r3, #0]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	0003021c 	.word	0x0003021c

000d5f98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <free+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	685b      	ldr	r3, [r3, #4]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	0003021c 	.word	0x0003021c

000d5fa8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <realloc+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	689b      	ldr	r3, [r3, #8]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	0003021c 	.word	0x0003021c

000d5fb8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <__errno+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	0003021c 	.word	0x0003021c

000d5fc8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <newlib_impure_ptr_callback+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	0003021c 	.word	0x0003021c

000d5fd8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fd8:	2200      	movs	r2, #0
   d5fda:	6840      	ldr	r0, [r0, #4]
   d5fdc:	4611      	mov	r1, r2
   d5fde:	f7ff bf93 	b.w	d5f08 <network_listening>

000d5fe2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5fe2:	2200      	movs	r2, #0
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	4611      	mov	r1, r2
   d5fe8:	f7ff bfae 	b.w	d5f48 <network_get_listen_timeout>

000d5fec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5fec:	6840      	ldr	r0, [r0, #4]
   d5fee:	2200      	movs	r2, #0
   d5ff0:	f7ff bfa2 	b.w	d5f38 <network_set_listen_timeout>

000d5ff4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ff4:	6840      	ldr	r0, [r0, #4]
   d5ff6:	2200      	movs	r2, #0
   d5ff8:	f081 0101 	eor.w	r1, r1, #1
   d5ffc:	f7ff bf7c 	b.w	d5ef8 <network_listen>

000d6000 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6000:	2300      	movs	r3, #0
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	461a      	mov	r2, r3
   d6006:	4619      	mov	r1, r3
   d6008:	f7ff bf6e 	b.w	d5ee8 <network_off>

000d600c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d600c:	2300      	movs	r3, #0
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	461a      	mov	r2, r3
   d6012:	4619      	mov	r1, r3
   d6014:	f7ff bf60 	b.w	d5ed8 <network_on>

000d6018 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6018:	2200      	movs	r2, #0
   d601a:	6840      	ldr	r0, [r0, #4]
   d601c:	4611      	mov	r1, r2
   d601e:	f7ff bf53 	b.w	d5ec8 <network_ready>

000d6022 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6022:	2200      	movs	r2, #0
   d6024:	6840      	ldr	r0, [r0, #4]
   d6026:	4611      	mov	r1, r2
   d6028:	f7ff bf3e 	b.w	d5ea8 <network_connecting>

000d602c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	2200      	movs	r2, #0
   d6030:	2102      	movs	r1, #2
   d6032:	f7ff bf41 	b.w	d5eb8 <network_disconnect>

000d6036 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6036:	2300      	movs	r3, #0
   d6038:	6840      	ldr	r0, [r0, #4]
   d603a:	461a      	mov	r2, r3
   d603c:	f7ff bf2c 	b.w	d5e98 <network_connect>

000d6040 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6040:	4b02      	ldr	r3, [pc, #8]	; (d604c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6042:	2203      	movs	r2, #3
   d6044:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6046:	4a02      	ldr	r2, [pc, #8]	; (d6050 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6048:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d604a:	4770      	bx	lr
   d604c:	2003e63c 	.word	0x2003e63c
   d6050:	000d908c 	.word	0x000d908c

000d6054 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6054:	b510      	push	{r4, lr}
   d6056:	4604      	mov	r4, r0
   d6058:	4608      	mov	r0, r1
{
    _spi = spi;
   d605a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d605c:	f7ff fe90 	bl	d5d80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6060:	2300      	movs	r3, #0
   d6062:	6063      	str	r3, [r4, #4]
}
   d6064:	4620      	mov	r0, r4
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6068:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d606a:	4b09      	ldr	r3, [pc, #36]	; (d6090 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d606c:	4c09      	ldr	r4, [pc, #36]	; (d6094 <_GLOBAL__sub_I_System+0x2c>)
   d606e:	2202      	movs	r2, #2
   d6070:	2000      	movs	r0, #0
   d6072:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6074:	4b08      	ldr	r3, [pc, #32]	; (d6098 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6076:	6020      	str	r0, [r4, #0]
   d6078:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d607a:	71a0      	strb	r0, [r4, #6]
   d607c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d607e:	f7ff fed7 	bl	d5e30 <set_system_mode>
SystemClass System;
   d6082:	4620      	mov	r0, r4
   d6084:	4a05      	ldr	r2, [pc, #20]	; (d609c <_GLOBAL__sub_I_System+0x34>)
   d6086:	4906      	ldr	r1, [pc, #24]	; (d60a0 <_GLOBAL__sub_I_System+0x38>)
   d6088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d608c:	f001 bb9e 	b.w	d77cc <__aeabi_atexit>
   d6090:	2003e650 	.word	0x2003e650
   d6094:	2003e644 	.word	0x2003e644
   d6098:	ffff0000 	.word	0xffff0000
   d609c:	2003dea8 	.word	0x2003dea8
   d60a0:	000d417d 	.word	0x000d417d

000d60a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d60a8:	f002 fba4 	bl	d87f4 <strlen>
   d60ac:	3801      	subs	r0, #1
   d60ae:	1823      	adds	r3, r4, r0
   d60b0:	4620      	mov	r0, r4
	while(i<j){
   d60b2:	4283      	cmp	r3, r0
   d60b4:	d906      	bls.n	d60c4 <_Z11str_reversePc+0x20>
		c = *i;
   d60b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d60b8:	7819      	ldrb	r1, [r3, #0]
   d60ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d60be:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d60c2:	e7f6      	b.n	d60b2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d60c4:	bd10      	pop	{r4, pc}

000d60c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d60c6:	b570      	push	{r4, r5, r6, lr}
   d60c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d60ca:	1e91      	subs	r1, r2, #2
   d60cc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d60ce:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d60d0:	d822      	bhi.n	d6118 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d60d2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d60d4:	b16d      	cbz	r5, d60f2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d60d6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d60da:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d60de:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d60e0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d60e2:	bf94      	ite	ls
   d60e4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d60e6:	3157      	addhi	r1, #87	; 0x57
   d60e8:	b2c9      	uxtb	r1, r1
   d60ea:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d60ee:	4635      	mov	r5, r6
	while(a){
   d60f0:	e7f0      	b.n	d60d4 <ultoa+0xe>
   d60f2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d60f4:	4423      	add	r3, r4
            *ptr++ = '0';
   d60f6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d60f8:	4293      	cmp	r3, r2
   d60fa:	d902      	bls.n	d6102 <ultoa+0x3c>
            *ptr++ = '0';
   d60fc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6100:	e7fa      	b.n	d60f8 <ultoa+0x32>
   d6102:	1a1a      	subs	r2, r3, r0
   d6104:	4283      	cmp	r3, r0
   d6106:	bf38      	it	cc
   d6108:	2200      	movcc	r2, #0

	*ptr = '\0';
   d610a:	2300      	movs	r3, #0
   d610c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d610e:	4620      	mov	r0, r4
   d6110:	f7ff ffc8 	bl	d60a4 <_Z11str_reversePc>
	return buffer;
   d6114:	4620      	mov	r0, r4
}
   d6116:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6118:	2000      	movs	r0, #0
   d611a:	e7fc      	b.n	d6116 <ultoa+0x50>

000d611c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d611c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d611e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6120:	460c      	mov	r4, r1
   d6122:	4615      	mov	r5, r2
	if(a<0){
   d6124:	da0e      	bge.n	d6144 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d612a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d612e:	bf14      	ite	ne
   d6130:	4258      	negne	r0, r3
   d6132:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6134:	2301      	movs	r3, #1
		*buffer = '-';
   d6136:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6138:	462a      	mov	r2, r5
   d613a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d613c:	f7ff ffc3 	bl	d60c6 <ultoa>
	}
	return buffer;
}
   d6140:	4620      	mov	r0, r4
   d6142:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6144:	2301      	movs	r3, #1
   d6146:	e7f9      	b.n	d613c <itoa+0x20>

000d6148 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d614c:	ec57 6b10 	vmov	r6, r7, d0
   d6150:	4680      	mov	r8, r0
   d6152:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6154:	ee10 0a10 	vmov	r0, s0
   d6158:	2200      	movs	r2, #0
   d615a:	2300      	movs	r3, #0
   d615c:	4639      	mov	r1, r7
   d615e:	f002 f87f 	bl	d8260 <__aeabi_dcmplt>
   d6162:	b128      	cbz	r0, d6170 <_Z4dtoadhPc+0x28>
        val = -val;
   d6164:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d6168:	461f      	mov	r7, r3
        *sout++ = '-';
   d616a:	232d      	movs	r3, #45	; 0x2d
   d616c:	f804 3b01 	strb.w	r3, [r4], #1
   d6170:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6172:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6176:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d6178:	b2d9      	uxtb	r1, r3
   d617a:	4588      	cmp	r8, r1
   d617c:	d903      	bls.n	d6186 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d617e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d6182:	3301      	adds	r3, #1
   d6184:	e7f8      	b.n	d6178 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d6186:	4648      	mov	r0, r9
   d6188:	f001 fd8e 	bl	d7ca8 <__aeabi_i2d>
   d618c:	4632      	mov	r2, r6
   d618e:	463b      	mov	r3, r7
   d6190:	f001 fdf4 	bl	d7d7c <__aeabi_dmul>
   d6194:	4606      	mov	r6, r0
   d6196:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d6198:	f002 f950 	bl	d843c <__aeabi_d2ulz>
   d619c:	4605      	mov	r5, r0
   d619e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d61a0:	f001 fdb6 	bl	d7d10 <__aeabi_ul2d>
   d61a4:	4602      	mov	r2, r0
   d61a6:	460b      	mov	r3, r1
   d61a8:	4630      	mov	r0, r6
   d61aa:	4639      	mov	r1, r7
   d61ac:	f001 fc2e 	bl	d7a0c <__aeabi_dsub>
   d61b0:	4b13      	ldr	r3, [pc, #76]	; (d6200 <_Z4dtoadhPc+0xb8>)
   d61b2:	2200      	movs	r2, #0
   d61b4:	f002 f868 	bl	d8288 <__aeabi_dcmpge>
   d61b8:	b110      	cbz	r0, d61c0 <_Z4dtoadhPc+0x78>
        fixed++;
   d61ba:	3501      	adds	r5, #1
   d61bc:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d61c0:	464a      	mov	r2, r9
   d61c2:	4628      	mov	r0, r5
   d61c4:	17d3      	asrs	r3, r2, #31
   d61c6:	4651      	mov	r1, sl
   d61c8:	f002 f920 	bl	d840c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d61cc:	2301      	movs	r3, #1
   d61ce:	4615      	mov	r5, r2
   d61d0:	4621      	mov	r1, r4
   d61d2:	220a      	movs	r2, #10
   d61d4:	f7ff ff77 	bl	d60c6 <ultoa>
    if (prec) {
   d61d8:	f1b8 0f00 	cmp.w	r8, #0
   d61dc:	d00d      	beq.n	d61fa <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d61de:	4620      	mov	r0, r4
   d61e0:	f002 fb08 	bl	d87f4 <strlen>
        *sout++ = '.';
   d61e4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d61e6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d61e8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d61ea:	220a      	movs	r2, #10
   d61ec:	4643      	mov	r3, r8
   d61ee:	4628      	mov	r0, r5
   d61f0:	3101      	adds	r1, #1
    }
}
   d61f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d61f6:	f7ff bf66 	b.w	d60c6 <ultoa>
}
   d61fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d61fe:	bf00      	nop
   d6200:	3fe00000 	.word	0x3fe00000

000d6204 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6204:	b510      	push	{r4, lr}
   d6206:	4604      	mov	r4, r0
{
	free(buffer);
   d6208:	6800      	ldr	r0, [r0, #0]
   d620a:	f7ff fec5 	bl	d5f98 <free>
}
   d620e:	4620      	mov	r0, r4
   d6210:	bd10      	pop	{r4, pc}

000d6212 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6212:	b510      	push	{r4, lr}
   d6214:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6216:	6800      	ldr	r0, [r0, #0]
   d6218:	b108      	cbz	r0, d621e <_ZN6String10invalidateEv+0xc>
   d621a:	f7ff febd 	bl	d5f98 <free>
	buffer = NULL;
   d621e:	2300      	movs	r3, #0
	capacity = len = 0;
   d6220:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6224:	6023      	str	r3, [r4, #0]
}
   d6226:	bd10      	pop	{r4, pc}

000d6228 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6228:	b538      	push	{r3, r4, r5, lr}
   d622a:	4604      	mov	r4, r0
   d622c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d622e:	6800      	ldr	r0, [r0, #0]
   d6230:	3101      	adds	r1, #1
   d6232:	f7ff feb9 	bl	d5fa8 <realloc>
	if (newbuffer) {
   d6236:	b110      	cbz	r0, d623e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6238:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d623c:	2001      	movs	r0, #1
	}
	return 0;
}
   d623e:	bd38      	pop	{r3, r4, r5, pc}

000d6240 <_ZN6String7reserveEj>:
{
   d6240:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6242:	6803      	ldr	r3, [r0, #0]
{
   d6244:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6246:	b123      	cbz	r3, d6252 <_ZN6String7reserveEj+0x12>
   d6248:	6843      	ldr	r3, [r0, #4]
   d624a:	428b      	cmp	r3, r1
   d624c:	d301      	bcc.n	d6252 <_ZN6String7reserveEj+0x12>
   d624e:	2001      	movs	r0, #1
}
   d6250:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6252:	4620      	mov	r0, r4
   d6254:	f7ff ffe8 	bl	d6228 <_ZN6String12changeBufferEj>
   d6258:	2800      	cmp	r0, #0
   d625a:	d0f9      	beq.n	d6250 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d625c:	68a3      	ldr	r3, [r4, #8]
   d625e:	2b00      	cmp	r3, #0
   d6260:	d1f5      	bne.n	d624e <_ZN6String7reserveEj+0xe>
   d6262:	6822      	ldr	r2, [r4, #0]
   d6264:	7013      	strb	r3, [r2, #0]
   d6266:	e7f2      	b.n	d624e <_ZN6String7reserveEj+0xe>

000d6268 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d626a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d626c:	4611      	mov	r1, r2
   d626e:	9201      	str	r2, [sp, #4]
{
   d6270:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6272:	f7ff ffe5 	bl	d6240 <_ZN6String7reserveEj>
   d6276:	9a01      	ldr	r2, [sp, #4]
   d6278:	b928      	cbnz	r0, d6286 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d627a:	4620      	mov	r0, r4
   d627c:	f7ff ffc9 	bl	d6212 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6280:	4620      	mov	r0, r4
   d6282:	b003      	add	sp, #12
   d6284:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6286:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6288:	4629      	mov	r1, r5
   d628a:	6820      	ldr	r0, [r4, #0]
   d628c:	f002 fa66 	bl	d875c <memcpy>
	buffer[len] = 0;
   d6290:	6822      	ldr	r2, [r4, #0]
   d6292:	68a3      	ldr	r3, [r4, #8]
   d6294:	2100      	movs	r1, #0
   d6296:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6298:	e7f2      	b.n	d6280 <_ZN6String4copyEPKcj+0x18>

000d629a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d629a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d629c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d629e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d62a2:	4604      	mov	r4, r0
	len = 0;
   d62a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d62a6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d62a8:	b141      	cbz	r1, d62bc <_ZN6StringC1EPKc+0x22>
   d62aa:	4608      	mov	r0, r1
   d62ac:	9101      	str	r1, [sp, #4]
   d62ae:	f002 faa1 	bl	d87f4 <strlen>
   d62b2:	9901      	ldr	r1, [sp, #4]
   d62b4:	4602      	mov	r2, r0
   d62b6:	4620      	mov	r0, r4
   d62b8:	f7ff ffd6 	bl	d6268 <_ZN6String4copyEPKcj>
}
   d62bc:	4620      	mov	r0, r4
   d62be:	b002      	add	sp, #8
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d62c2:	4288      	cmp	r0, r1
{
   d62c4:	b510      	push	{r4, lr}
   d62c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d62c8:	d005      	beq.n	d62d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d62ca:	680b      	ldr	r3, [r1, #0]
   d62cc:	b12b      	cbz	r3, d62da <_ZN6StringaSERKS_+0x18>
   d62ce:	688a      	ldr	r2, [r1, #8]
   d62d0:	4619      	mov	r1, r3
   d62d2:	f7ff ffc9 	bl	d6268 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d62d6:	4620      	mov	r0, r4
   d62d8:	bd10      	pop	{r4, pc}
	else invalidate();
   d62da:	f7ff ff9a 	bl	d6212 <_ZN6String10invalidateEv>
   d62de:	e7fa      	b.n	d62d6 <_ZN6StringaSERKS_+0x14>

000d62e0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d62e0:	b510      	push	{r4, lr}
	buffer = NULL;
   d62e2:	2300      	movs	r3, #0
String::String(const String &value)
   d62e4:	4604      	mov	r4, r0
	capacity = 0;
   d62e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d62ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d62ec:	7303      	strb	r3, [r0, #12]
	*this = value;
   d62ee:	f7ff ffe8 	bl	d62c2 <_ZN6StringaSERKS_>
}
   d62f2:	4620      	mov	r0, r4
   d62f4:	bd10      	pop	{r4, pc}

000d62f6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d62f6:	b513      	push	{r0, r1, r4, lr}
   d62f8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d62fa:	b159      	cbz	r1, d6314 <_ZN6StringaSEPKc+0x1e>
   d62fc:	4608      	mov	r0, r1
   d62fe:	9101      	str	r1, [sp, #4]
   d6300:	f002 fa78 	bl	d87f4 <strlen>
   d6304:	9901      	ldr	r1, [sp, #4]
   d6306:	4602      	mov	r2, r0
   d6308:	4620      	mov	r0, r4
   d630a:	f7ff ffad 	bl	d6268 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d630e:	4620      	mov	r0, r4
   d6310:	b002      	add	sp, #8
   d6312:	bd10      	pop	{r4, pc}
	else invalidate();
   d6314:	f7ff ff7d 	bl	d6212 <_ZN6String10invalidateEv>
   d6318:	e7f9      	b.n	d630e <_ZN6StringaSEPKc+0x18>

000d631a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d631a:	b510      	push	{r4, lr}
   d631c:	4604      	mov	r4, r0
   d631e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6320:	2300      	movs	r3, #0
	capacity = 0;
   d6322:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6326:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6328:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d632a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d632c:	a901      	add	r1, sp, #4
   d632e:	f7ff fef5 	bl	d611c <itoa>
	*this = buf;
   d6332:	a901      	add	r1, sp, #4
   d6334:	4620      	mov	r0, r4
   d6336:	f7ff ffde 	bl	d62f6 <_ZN6StringaSEPKc>
}
   d633a:	4620      	mov	r0, r4
   d633c:	b00a      	add	sp, #40	; 0x28
   d633e:	bd10      	pop	{r4, pc}

000d6340 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d6340:	b530      	push	{r4, r5, lr}
   d6342:	4604      	mov	r4, r0
	buffer = NULL;
   d6344:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d6346:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d6348:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d634c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d634e:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d6350:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d6354:	b2cd      	uxtb	r5, r1
   d6356:	f001 fcb9 	bl	d7ccc <__aeabi_f2d>
   d635a:	ec41 0b10 	vmov	d0, r0, r1
   d635e:	a901      	add	r1, sp, #4
   d6360:	4628      	mov	r0, r5
   d6362:	f7ff fef1 	bl	d6148 <_Z4dtoadhPc>
        *this = buf;
   d6366:	a901      	add	r1, sp, #4
   d6368:	4620      	mov	r0, r4
   d636a:	f7ff ffc4 	bl	d62f6 <_ZN6StringaSEPKc>
}
   d636e:	4620      	mov	r0, r4
   d6370:	b00b      	add	sp, #44	; 0x2c
   d6372:	bd30      	pop	{r4, r5, pc}

000d6374 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6374:	b570      	push	{r4, r5, r6, lr}
   d6376:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6378:	460e      	mov	r6, r1
   d637a:	b909      	cbnz	r1, d6380 <_ZN6String6concatEPKcj+0xc>
   d637c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d637e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6380:	b16a      	cbz	r2, d639e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6382:	6884      	ldr	r4, [r0, #8]
   d6384:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6386:	4621      	mov	r1, r4
   d6388:	f7ff ff5a 	bl	d6240 <_ZN6String7reserveEj>
   d638c:	2800      	cmp	r0, #0
   d638e:	d0f5      	beq.n	d637c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6390:	6828      	ldr	r0, [r5, #0]
   d6392:	68ab      	ldr	r3, [r5, #8]
   d6394:	4631      	mov	r1, r6
   d6396:	4418      	add	r0, r3
   d6398:	f002 fa24 	bl	d87e4 <strcpy>
	len = newlen;
   d639c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d639e:	2001      	movs	r0, #1
   d63a0:	e7ed      	b.n	d637e <_ZN6String6concatEPKcj+0xa>

000d63a2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d63a2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d63a4:	2300      	movs	r3, #0
	buf[0] = c;
   d63a6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d63aa:	2201      	movs	r2, #1
   d63ac:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d63ae:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d63b2:	f7ff ffdf 	bl	d6374 <_ZN6String6concatEPKcj>
}
   d63b6:	b003      	add	sp, #12
   d63b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d63bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d63bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d63be:	688a      	ldr	r2, [r1, #8]
   d63c0:	6809      	ldr	r1, [r1, #0]
{
   d63c2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d63c4:	f7ff ffd6 	bl	d6374 <_ZN6String6concatEPKcj>
   d63c8:	b910      	cbnz	r0, d63d0 <_ZplRK15StringSumHelperRK6String+0x14>
   d63ca:	4620      	mov	r0, r4
   d63cc:	f7ff ff21 	bl	d6212 <_ZN6String10invalidateEv>
	return a;
}
   d63d0:	4620      	mov	r0, r4
   d63d2:	bd10      	pop	{r4, pc}

000d63d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d63d4:	b513      	push	{r0, r1, r4, lr}
   d63d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d63d8:	b929      	cbnz	r1, d63e6 <_ZplRK15StringSumHelperPKc+0x12>
   d63da:	4620      	mov	r0, r4
   d63dc:	f7ff ff19 	bl	d6212 <_ZN6String10invalidateEv>
	return a;
}
   d63e0:	4620      	mov	r0, r4
   d63e2:	b002      	add	sp, #8
   d63e4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d63e6:	4608      	mov	r0, r1
   d63e8:	9101      	str	r1, [sp, #4]
   d63ea:	f002 fa03 	bl	d87f4 <strlen>
   d63ee:	9901      	ldr	r1, [sp, #4]
   d63f0:	4602      	mov	r2, r0
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff ffbe 	bl	d6374 <_ZN6String6concatEPKcj>
   d63f8:	2800      	cmp	r0, #0
   d63fa:	d0ee      	beq.n	d63da <_ZplRK15StringSumHelperPKc+0x6>
   d63fc:	e7f0      	b.n	d63e0 <_ZplRK15StringSumHelperPKc+0xc>

000d63fe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d63fe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6400:	6882      	ldr	r2, [r0, #8]
   d6402:	b93a      	cbnz	r2, d6414 <_ZNK6String6equalsEPKc+0x16>
   d6404:	b121      	cbz	r1, d6410 <_ZNK6String6equalsEPKc+0x12>
   d6406:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6408:	fab0 f080 	clz	r0, r0
   d640c:	0940      	lsrs	r0, r0, #5
   d640e:	e000      	b.n	d6412 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6410:	2001      	movs	r0, #1
}
   d6412:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6414:	6800      	ldr	r0, [r0, #0]
   d6416:	b909      	cbnz	r1, d641c <_ZNK6String6equalsEPKc+0x1e>
   d6418:	7800      	ldrb	r0, [r0, #0]
   d641a:	e7f5      	b.n	d6408 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d641c:	f002 f9d8 	bl	d87d0 <strcmp>
   d6420:	e7f2      	b.n	d6408 <_ZNK6String6equalsEPKc+0xa>

000d6422 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6422:	b558      	push	{r3, r4, r6, lr}
   d6424:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6426:	b12a      	cbz	r2, d6434 <_ZNK6String8getBytesEPhjj+0x12>
   d6428:	b121      	cbz	r1, d6434 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d642a:	6884      	ldr	r4, [r0, #8]
   d642c:	429c      	cmp	r4, r3
   d642e:	d802      	bhi.n	d6436 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6430:	2300      	movs	r3, #0
   d6432:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6434:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d6436:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6438:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d643a:	6801      	ldr	r1, [r0, #0]
   d643c:	4294      	cmp	r4, r2
   d643e:	bf28      	it	cs
   d6440:	4614      	movcs	r4, r2
   d6442:	4419      	add	r1, r3
   d6444:	4622      	mov	r2, r4
   d6446:	4630      	mov	r0, r6
   d6448:	f002 f9dc 	bl	d8804 <strncpy>
	buf[n] = 0;
   d644c:	2300      	movs	r3, #0
   d644e:	5533      	strb	r3, [r6, r4]
   d6450:	e7f0      	b.n	d6434 <_ZNK6String8getBytesEPhjj+0x12>

000d6452 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6452:	b510      	push	{r4, lr}
   d6454:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6456:	6800      	ldr	r0, [r0, #0]
   d6458:	b108      	cbz	r0, d645e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d645a:	f7ff fba9 	bl	d5bb0 <os_mutex_recursive_destroy>
    }
   d645e:	4620      	mov	r0, r4
   d6460:	bd10      	pop	{r4, pc}
	...

000d6464 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6464:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6466:	4c06      	ldr	r4, [pc, #24]	; (d6480 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6468:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d646a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d646c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d646e:	f7ff fb97 	bl	d5ba0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6472:	4620      	mov	r0, r4
   d6474:	4a03      	ldr	r2, [pc, #12]	; (d6484 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6476:	4904      	ldr	r1, [pc, #16]	; (d6488 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d647c:	f001 b9a6 	b.w	d77cc <__aeabi_atexit>
   d6480:	2003e654 	.word	0x2003e654
   d6484:	2003dea8 	.word	0x2003dea8
   d6488:	000d6453 	.word	0x000d6453

000d648c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d648e:	4606      	mov	r6, r0
   d6490:	460d      	mov	r5, r1
  size_t n = 0;
   d6492:	188f      	adds	r7, r1, r2
   d6494:	2400      	movs	r4, #0
  while (size--) {
   d6496:	42bd      	cmp	r5, r7
   d6498:	d00c      	beq.n	d64b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d649a:	6833      	ldr	r3, [r6, #0]
   d649c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64a0:	689b      	ldr	r3, [r3, #8]
   d64a2:	4630      	mov	r0, r6
   d64a4:	4798      	blx	r3
     if (chunk>=0)
   d64a6:	1e03      	subs	r3, r0, #0
   d64a8:	db01      	blt.n	d64ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d64aa:	441c      	add	r4, r3
  while (size--) {
   d64ac:	e7f3      	b.n	d6496 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d64ae:	2c00      	cmp	r4, #0
   d64b0:	bf08      	it	eq
   d64b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d64b4:	4620      	mov	r0, r4
   d64b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64b8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d64b8:	b513      	push	{r0, r1, r4, lr}
   d64ba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d64bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d64be:	b159      	cbz	r1, d64d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d64c0:	9101      	str	r1, [sp, #4]
   d64c2:	f002 f997 	bl	d87f4 <strlen>
   d64c6:	6823      	ldr	r3, [r4, #0]
   d64c8:	9901      	ldr	r1, [sp, #4]
   d64ca:	68db      	ldr	r3, [r3, #12]
   d64cc:	4602      	mov	r2, r0
   d64ce:	4620      	mov	r0, r4
    }
   d64d0:	b002      	add	sp, #8
   d64d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d64d6:	4718      	bx	r3
    }
   d64d8:	b002      	add	sp, #8
   d64da:	bd10      	pop	{r4, pc}

000d64dc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d64dc:	b508      	push	{r3, lr}
  return write(str);
   d64de:	f7ff ffeb 	bl	d64b8 <_ZN5Print5writeEPKc>
}
   d64e2:	bd08      	pop	{r3, pc}

000d64e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d64e4:	6803      	ldr	r3, [r0, #0]
   d64e6:	689b      	ldr	r3, [r3, #8]
   d64e8:	4718      	bx	r3

000d64ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64ec:	210d      	movs	r1, #13
{
   d64ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64f0:	f7ff fff8 	bl	d64e4 <_ZN5Print5printEc>
  n += print('\n');
   d64f4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d64f6:	4604      	mov	r4, r0
  n += print('\n');
   d64f8:	4628      	mov	r0, r5
   d64fa:	f7ff fff3 	bl	d64e4 <_ZN5Print5printEc>
  return n;
}
   d64fe:	4420      	add	r0, r4
   d6500:	bd38      	pop	{r3, r4, r5, pc}

000d6502 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6502:	b538      	push	{r3, r4, r5, lr}
   d6504:	4605      	mov	r5, r0
  return write(str);
   d6506:	f7ff ffd7 	bl	d64b8 <_ZN5Print5writeEPKc>
   d650a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d650c:	4628      	mov	r0, r5
   d650e:	f7ff ffec 	bl	d64ea <_ZN5Print7printlnEv>
  return n;
}
   d6512:	4420      	add	r0, r4
   d6514:	bd38      	pop	{r3, r4, r5, pc}

000d6516 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6516:	b530      	push	{r4, r5, lr}
   d6518:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d651a:	2300      	movs	r3, #0
   d651c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6520:	2a01      	cmp	r2, #1
   d6522:	bf98      	it	ls
   d6524:	220a      	movls	r2, #10
   d6526:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6528:	460d      	mov	r5, r1
   d652a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d652e:	fb01 5312 	mls	r3, r1, r2, r5
   d6532:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6536:	2b09      	cmp	r3, #9
   d6538:	bf94      	ite	ls
   d653a:	3330      	addls	r3, #48	; 0x30
   d653c:	3337      	addhi	r3, #55	; 0x37
   d653e:	b2db      	uxtb	r3, r3
  } while(n);
   d6540:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6542:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6546:	d9ef      	bls.n	d6528 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6548:	4621      	mov	r1, r4
   d654a:	f7ff ffb5 	bl	d64b8 <_ZN5Print5writeEPKc>
}
   d654e:	b00b      	add	sp, #44	; 0x2c
   d6550:	bd30      	pop	{r4, r5, pc}
	...

000d6554 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6558:	ec55 4b10 	vmov	r4, r5, d0
   d655c:	4606      	mov	r6, r0
   d655e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6560:	ee10 2a10 	vmov	r2, s0
   d6564:	ee10 0a10 	vmov	r0, s0
   d6568:	462b      	mov	r3, r5
   d656a:	4629      	mov	r1, r5
   d656c:	f001 fea0 	bl	d82b0 <__aeabi_dcmpun>
   d6570:	b140      	cbz	r0, d6584 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6572:	4953      	ldr	r1, [pc, #332]	; (d66c0 <_ZN5Print10printFloatEdh+0x16c>)
   d6574:	4630      	mov	r0, r6
   d6576:	f7ff ff9f 	bl	d64b8 <_ZN5Print5writeEPKc>
   d657a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d657c:	4650      	mov	r0, sl
   d657e:	b003      	add	sp, #12
   d6580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d6584:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d6588:	4b4e      	ldr	r3, [pc, #312]	; (d66c4 <_ZN5Print10printFloatEdh+0x170>)
   d658a:	f04f 32ff 	mov.w	r2, #4294967295
   d658e:	4620      	mov	r0, r4
   d6590:	4649      	mov	r1, r9
   d6592:	f001 fe8d 	bl	d82b0 <__aeabi_dcmpun>
   d6596:	b948      	cbnz	r0, d65ac <_ZN5Print10printFloatEdh+0x58>
   d6598:	4b4a      	ldr	r3, [pc, #296]	; (d66c4 <_ZN5Print10printFloatEdh+0x170>)
   d659a:	f04f 32ff 	mov.w	r2, #4294967295
   d659e:	4620      	mov	r0, r4
   d65a0:	4649      	mov	r1, r9
   d65a2:	f001 fe67 	bl	d8274 <__aeabi_dcmple>
   d65a6:	b908      	cbnz	r0, d65ac <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d65a8:	4947      	ldr	r1, [pc, #284]	; (d66c8 <_ZN5Print10printFloatEdh+0x174>)
   d65aa:	e7e3      	b.n	d6574 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d65ac:	4b47      	ldr	r3, [pc, #284]	; (d66cc <_ZN5Print10printFloatEdh+0x178>)
   d65ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d65b2:	4620      	mov	r0, r4
   d65b4:	4629      	mov	r1, r5
   d65b6:	f001 fe71 	bl	d829c <__aeabi_dcmpgt>
   d65ba:	b108      	cbz	r0, d65c0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d65bc:	4944      	ldr	r1, [pc, #272]	; (d66d0 <_ZN5Print10printFloatEdh+0x17c>)
   d65be:	e7d9      	b.n	d6574 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d65c0:	4b44      	ldr	r3, [pc, #272]	; (d66d4 <_ZN5Print10printFloatEdh+0x180>)
   d65c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d65c6:	4620      	mov	r0, r4
   d65c8:	4629      	mov	r1, r5
   d65ca:	f001 fe49 	bl	d8260 <__aeabi_dcmplt>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	d1f4      	bne.n	d65bc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d65d2:	2200      	movs	r2, #0
   d65d4:	2300      	movs	r3, #0
   d65d6:	4620      	mov	r0, r4
   d65d8:	4629      	mov	r1, r5
   d65da:	f001 fe41 	bl	d8260 <__aeabi_dcmplt>
   d65de:	b1d0      	cbz	r0, d6616 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d65e0:	212d      	movs	r1, #45	; 0x2d
   d65e2:	4630      	mov	r0, r6
   d65e4:	f7ff ff7e 	bl	d64e4 <_ZN5Print5printEc>
     number = -number;
   d65e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d65ec:	4682      	mov	sl, r0
     number = -number;
   d65ee:	461d      	mov	r5, r3
  double rounding = 0.5;
   d65f0:	4939      	ldr	r1, [pc, #228]	; (d66d8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d65f2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d66e0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d65f6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d65fa:	2000      	movs	r0, #0
    rounding /= 10.0;
   d65fc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d6600:	fa5f f38b 	uxtb.w	r3, fp
   d6604:	429f      	cmp	r7, r3
   d6606:	d908      	bls.n	d661a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d6608:	4642      	mov	r2, r8
   d660a:	464b      	mov	r3, r9
   d660c:	f001 fce0 	bl	d7fd0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d6610:	f10b 0b01 	add.w	fp, fp, #1
   d6614:	e7f4      	b.n	d6600 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d6616:	4682      	mov	sl, r0
   d6618:	e7ea      	b.n	d65f0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d661a:	4622      	mov	r2, r4
   d661c:	462b      	mov	r3, r5
   d661e:	f001 f9f7 	bl	d7a10 <__adddf3>
   d6622:	460d      	mov	r5, r1
   d6624:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d6626:	f001 fe81 	bl	d832c <__aeabi_d2uiz>
   d662a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d662c:	f001 fb2c 	bl	d7c88 <__aeabi_ui2d>
   d6630:	4602      	mov	r2, r0
   d6632:	460b      	mov	r3, r1
   d6634:	4620      	mov	r0, r4
   d6636:	4629      	mov	r1, r5
   d6638:	f001 f9e8 	bl	d7a0c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d663c:	220a      	movs	r2, #10
   d663e:	4604      	mov	r4, r0
   d6640:	460d      	mov	r5, r1
   d6642:	4630      	mov	r0, r6
   d6644:	4641      	mov	r1, r8
   d6646:	f7ff ff66 	bl	d6516 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d664a:	4482      	add	sl, r0
  if (digits > 0) {
   d664c:	b127      	cbz	r7, d6658 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d664e:	4923      	ldr	r1, [pc, #140]	; (d66dc <_ZN5Print10printFloatEdh+0x188>)
   d6650:	4630      	mov	r0, r6
   d6652:	f7ff ff31 	bl	d64b8 <_ZN5Print5writeEPKc>
    n += print(".");
   d6656:	4482      	add	sl, r0
    remainder *= 10.0;
   d6658:	f8df 9084 	ldr.w	r9, [pc, #132]	; d66e0 <_ZN5Print10printFloatEdh+0x18c>
   d665c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d6660:	3f01      	subs	r7, #1
   d6662:	b2ff      	uxtb	r7, r7
   d6664:	2fff      	cmp	r7, #255	; 0xff
   d6666:	d089      	beq.n	d657c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d6668:	4642      	mov	r2, r8
   d666a:	464b      	mov	r3, r9
   d666c:	4620      	mov	r0, r4
   d666e:	4629      	mov	r1, r5
   d6670:	f001 fb84 	bl	d7d7c <__aeabi_dmul>
   d6674:	4604      	mov	r4, r0
   d6676:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d6678:	f001 fe30 	bl	d82dc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d667c:	f1b0 0b00 	subs.w	fp, r0, #0
   d6680:	da1a      	bge.n	d66b8 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d6682:	212d      	movs	r1, #45	; 0x2d
   d6684:	4630      	mov	r0, r6
   d6686:	f7ff ff2d 	bl	d64e4 <_ZN5Print5printEc>
            val = -n;
   d668a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d668e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d6690:	220a      	movs	r2, #10
   d6692:	4630      	mov	r0, r6
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	f7ff ff3e 	bl	d6516 <_ZN5Print11printNumberEmh>
   d669a:	9b01      	ldr	r3, [sp, #4]
   d669c:	4418      	add	r0, r3
    n += print(toPrint);
   d669e:	4482      	add	sl, r0
    remainder -= toPrint;
   d66a0:	4658      	mov	r0, fp
   d66a2:	f001 fb01 	bl	d7ca8 <__aeabi_i2d>
   d66a6:	4602      	mov	r2, r0
   d66a8:	460b      	mov	r3, r1
   d66aa:	4620      	mov	r0, r4
   d66ac:	4629      	mov	r1, r5
   d66ae:	f001 f9ad 	bl	d7a0c <__aeabi_dsub>
   d66b2:	4604      	mov	r4, r0
   d66b4:	460d      	mov	r5, r1
  while (digits-- > 0)
   d66b6:	e7d3      	b.n	d6660 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d66b8:	4659      	mov	r1, fp
        size_t t = 0;
   d66ba:	2300      	movs	r3, #0
   d66bc:	e7e8      	b.n	d6690 <_ZN5Print10printFloatEdh+0x13c>
   d66be:	bf00      	nop
   d66c0:	000d90c0 	.word	0x000d90c0
   d66c4:	7fefffff 	.word	0x7fefffff
   d66c8:	000d90c4 	.word	0x000d90c4
   d66cc:	41efffff 	.word	0x41efffff
   d66d0:	000d90c8 	.word	0x000d90c8
   d66d4:	c1efffff 	.word	0xc1efffff
   d66d8:	3fe00000 	.word	0x3fe00000
   d66dc:	000d897e 	.word	0x000d897e
   d66e0:	40240000 	.word	0x40240000

000d66e4 <_ZN5Print7printlnEdi>:
{
   d66e4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d66e6:	b2c9      	uxtb	r1, r1
{
   d66e8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d66ea:	f7ff ff33 	bl	d6554 <_ZN5Print10printFloatEdh>
   d66ee:	4604      	mov	r4, r0
  n += println();
   d66f0:	4628      	mov	r0, r5
   d66f2:	f7ff fefa 	bl	d64ea <_ZN5Print7printlnEv>
}
   d66f6:	4420      	add	r0, r4
   d66f8:	bd38      	pop	{r3, r4, r5, pc}

000d66fa <_ZN5Print7printlnEfi>:
{
   d66fa:	b538      	push	{r3, r4, r5, lr}
   d66fc:	4604      	mov	r4, r0
   d66fe:	ee10 0a10 	vmov	r0, s0
   d6702:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6704:	f001 fae2 	bl	d7ccc <__aeabi_f2d>
   d6708:	ec41 0b10 	vmov	d0, r0, r1
   d670c:	4629      	mov	r1, r5
   d670e:	4620      	mov	r0, r4
}
   d6710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d6714:	f7ff bfe6 	b.w	d66e4 <_ZN5Print7printlnEdi>

000d6718 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6718:	4b01      	ldr	r3, [pc, #4]	; (d6720 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d671a:	4a02      	ldr	r2, [pc, #8]	; (d6724 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d671c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d671e:	4770      	bx	lr
   d6720:	2003e658 	.word	0x2003e658
   d6724:	000d90cc 	.word	0x000d90cc

000d6728 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6728:	4b02      	ldr	r3, [pc, #8]	; (d6734 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d672a:	681a      	ldr	r2, [r3, #0]
   d672c:	4b02      	ldr	r3, [pc, #8]	; (d6738 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d672e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6730:	4770      	bx	lr
   d6732:	bf00      	nop
   d6734:	2003de40 	.word	0x2003de40
   d6738:	2003e65c 	.word	0x2003e65c

000d673c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d673c:	2100      	movs	r1, #0
   d673e:	f7ff bb7f 	b.w	d5e40 <system_delay_ms>

000d6742 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6742:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6744:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6746:	4604      	mov	r4, r0
      if (_M_manager)
   d6748:	b113      	cbz	r3, d6750 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d674a:	2203      	movs	r2, #3
   d674c:	4601      	mov	r1, r0
   d674e:	4798      	blx	r3
    }
   d6750:	4620      	mov	r0, r4
   d6752:	bd10      	pop	{r4, pc}

000d6754 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6754:	b510      	push	{r4, lr}
   d6756:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6758:	f7ff fff3 	bl	d6742 <_ZNSt14_Function_baseD1Ev>
   d675c:	4620      	mov	r0, r4
   d675e:	bd10      	pop	{r4, pc}

000d6760 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6760:	4803      	ldr	r0, [pc, #12]	; (d6770 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6762:	4a04      	ldr	r2, [pc, #16]	; (d6774 <_GLOBAL__sub_I_RGB+0x14>)
   d6764:	4904      	ldr	r1, [pc, #16]	; (d6778 <_GLOBAL__sub_I_RGB+0x18>)
   d6766:	2300      	movs	r3, #0
   d6768:	6083      	str	r3, [r0, #8]
   d676a:	f001 b82f 	b.w	d77cc <__aeabi_atexit>
   d676e:	bf00      	nop
   d6770:	2003e660 	.word	0x2003e660
   d6774:	2003dea8 	.word	0x2003dea8
   d6778:	000d6755 	.word	0x000d6755

000d677c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d677c:	4b01      	ldr	r3, [pc, #4]	; (d6784 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d677e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6780:	4770      	bx	lr
   d6782:	bf00      	nop
   d6784:	2003de44 	.word	0x2003de44

000d6788 <serialEventRun>:
{
   d6788:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d678a:	4b0b      	ldr	r3, [pc, #44]	; (d67b8 <serialEventRun+0x30>)
   d678c:	b143      	cbz	r3, d67a0 <serialEventRun+0x18>
   d678e:	f000 f977 	bl	d6a80 <_Z16_fetch_usbserialv>
   d6792:	6803      	ldr	r3, [r0, #0]
   d6794:	691b      	ldr	r3, [r3, #16]
   d6796:	4798      	blx	r3
   d6798:	2800      	cmp	r0, #0
   d679a:	dd01      	ble.n	d67a0 <serialEventRun+0x18>
        serialEvent();
   d679c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d67a0:	4b06      	ldr	r3, [pc, #24]	; (d67bc <serialEventRun+0x34>)
   d67a2:	b143      	cbz	r3, d67b6 <serialEventRun+0x2e>
   d67a4:	f000 f9ea 	bl	d6b7c <_Z22__fetch_global_Serial1v>
   d67a8:	6803      	ldr	r3, [r0, #0]
   d67aa:	691b      	ldr	r3, [r3, #16]
   d67ac:	4798      	blx	r3
   d67ae:	2800      	cmp	r0, #0
   d67b0:	dd01      	ble.n	d67b6 <serialEventRun+0x2e>
        serialEvent1();
   d67b2:	f3af 8000 	nop.w
}
   d67b6:	bd08      	pop	{r3, pc}
	...

000d67c0 <_post_loop>:
{
   d67c0:	b508      	push	{r3, lr}
	serialEventRun();
   d67c2:	f7ff ffe1 	bl	d6788 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67c6:	f7ff f9cb 	bl	d5b60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67ca:	4b01      	ldr	r3, [pc, #4]	; (d67d0 <_post_loop+0x10>)
   d67cc:	6018      	str	r0, [r3, #0]
}
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	2003e7cc 	.word	0x2003e7cc

000d67d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d67d4:	4802      	ldr	r0, [pc, #8]	; (d67e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d67d6:	4a03      	ldr	r2, [pc, #12]	; (d67e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d67d8:	4903      	ldr	r1, [pc, #12]	; (d67e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d67da:	1a12      	subs	r2, r2, r0
   d67dc:	f001 bfbe 	b.w	d875c <memcpy>
   d67e0:	2003f400 	.word	0x2003f400
   d67e4:	2003f404 	.word	0x2003f404
   d67e8:	000d93c8 	.word	0x000d93c8

000d67ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d67ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67ee:	2300      	movs	r3, #0
   d67f0:	9300      	str	r3, [sp, #0]
   d67f2:	461a      	mov	r2, r3
   d67f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67f8:	f7ff fb3c 	bl	d5e74 <system_ctrl_set_result>
}
   d67fc:	b003      	add	sp, #12
   d67fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6804 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6804:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6806:	8843      	ldrh	r3, [r0, #2]
   d6808:	2b0a      	cmp	r3, #10
   d680a:	d008      	beq.n	d681e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d680c:	2b50      	cmp	r3, #80	; 0x50
   d680e:	d10b      	bne.n	d6828 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6810:	4b09      	ldr	r3, [pc, #36]	; (d6838 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6812:	681b      	ldr	r3, [r3, #0]
   d6814:	b14b      	cbz	r3, d682a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6816:	b003      	add	sp, #12
   d6818:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d681c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d681e:	f7ff ffe5 	bl	d67ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6822:	b003      	add	sp, #12
   d6824:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6828:	2300      	movs	r3, #0
   d682a:	9300      	str	r3, [sp, #0]
   d682c:	461a      	mov	r2, r3
   d682e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6832:	f7ff fb1f 	bl	d5e74 <system_ctrl_set_result>
}
   d6836:	e7f4      	b.n	d6822 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6838:	2003e674 	.word	0x2003e674

000d683c <module_user_init_hook>:
{
   d683c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d683e:	4c12      	ldr	r4, [pc, #72]	; (d6888 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6840:	4812      	ldr	r0, [pc, #72]	; (d688c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6842:	4d13      	ldr	r5, [pc, #76]	; (d6890 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6844:	2100      	movs	r1, #0
   d6846:	f7ff fbbf 	bl	d5fc8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d684a:	6823      	ldr	r3, [r4, #0]
   d684c:	42ab      	cmp	r3, r5
   d684e:	4b11      	ldr	r3, [pc, #68]	; (d6894 <module_user_init_hook+0x58>)
   d6850:	bf0c      	ite	eq
   d6852:	2201      	moveq	r2, #1
   d6854:	2200      	movne	r2, #0
   d6856:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6858:	d002      	beq.n	d6860 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d685a:	f7ff ffbb 	bl	d67d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d685e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6860:	f7ff f96e 	bl	d5b40 <HAL_RNG_GetRandomNumber>
   d6864:	4604      	mov	r4, r0
    srand(seed);
   d6866:	f001 ff8f 	bl	d8788 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d686a:	4b0b      	ldr	r3, [pc, #44]	; (d6898 <module_user_init_hook+0x5c>)
   d686c:	b113      	cbz	r3, d6874 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d686e:	4620      	mov	r0, r4
   d6870:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6874:	2100      	movs	r1, #0
   d6876:	4808      	ldr	r0, [pc, #32]	; (d6898 <module_user_init_hook+0x5c>)
   d6878:	f7ff fb7e 	bl	d5f78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d687c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6880:	4806      	ldr	r0, [pc, #24]	; (d689c <module_user_init_hook+0x60>)
   d6882:	2100      	movs	r1, #0
   d6884:	f7ff baec 	b.w	d5e60 <system_ctrl_set_app_request_handler>
   d6888:	2003f400 	.word	0x2003f400
   d688c:	000d677d 	.word	0x000d677d
   d6890:	9a271c1e 	.word	0x9a271c1e
   d6894:	2003e670 	.word	0x2003e670
   d6898:	00000000 	.word	0x00000000
   d689c:	000d6805 	.word	0x000d6805

000d68a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d68a0:	4770      	bx	lr

000d68a2 <_ZN9IPAddressD0Ev>:
   d68a2:	b510      	push	{r4, lr}
   d68a4:	2118      	movs	r1, #24
   d68a6:	4604      	mov	r4, r0
   d68a8:	f000 ff95 	bl	d77d6 <_ZdlPvj>
   d68ac:	4620      	mov	r0, r4
   d68ae:	bd10      	pop	{r4, pc}

000d68b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68b2:	7d03      	ldrb	r3, [r0, #20]
   d68b4:	2b06      	cmp	r3, #6
{
   d68b6:	b08d      	sub	sp, #52	; 0x34
   d68b8:	460e      	mov	r6, r1
   d68ba:	f100 0704 	add.w	r7, r0, #4
   d68be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d68c2:	d012      	beq.n	d68ea <_ZNK9IPAddress7printToER5Print+0x3a>
   d68c4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d68c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d68cc:	220a      	movs	r2, #10
   d68ce:	4630      	mov	r0, r6
   d68d0:	f7ff fe21 	bl	d6516 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d68d8:	d019      	beq.n	d690e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d68da:	2c00      	cmp	r4, #0
   d68dc:	d0f4      	beq.n	d68c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d68de:	212e      	movs	r1, #46	; 0x2e
   d68e0:	4630      	mov	r0, r6
   d68e2:	f7ff fdff 	bl	d64e4 <_ZN5Print5printEc>
   d68e6:	4404      	add	r4, r0
   d68e8:	e7ee      	b.n	d68c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68ea:	232f      	movs	r3, #47	; 0x2f
   d68ec:	466a      	mov	r2, sp
   d68ee:	4639      	mov	r1, r7
   d68f0:	200a      	movs	r0, #10
		buf[0] = 0;
   d68f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68f6:	f7ff f963 	bl	d5bc0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d68fa:	4668      	mov	r0, sp
   d68fc:	f001 ff7a 	bl	d87f4 <strlen>
   d6900:	6833      	ldr	r3, [r6, #0]
   d6902:	4602      	mov	r2, r0
   d6904:	68db      	ldr	r3, [r3, #12]
   d6906:	4669      	mov	r1, sp
   d6908:	4630      	mov	r0, r6
   d690a:	4798      	blx	r3
   d690c:	4604      	mov	r4, r0
    }
    return n;
}
   d690e:	4620      	mov	r0, r4
   d6910:	b00d      	add	sp, #52	; 0x34
   d6912:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6914 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6914:	b510      	push	{r4, lr}
   d6916:	4b05      	ldr	r3, [pc, #20]	; (d692c <_ZN9IPAddressC1Ev+0x18>)
   d6918:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d691a:	2211      	movs	r2, #17
   d691c:	f840 3b04 	str.w	r3, [r0], #4
   d6920:	2100      	movs	r1, #0
   d6922:	f001 ff29 	bl	d8778 <memset>
}
   d6926:	4620      	mov	r0, r4
   d6928:	bd10      	pop	{r4, pc}
   d692a:	bf00      	nop
   d692c:	000d90f4 	.word	0x000d90f4

000d6930 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6930:	4603      	mov	r3, r0
   d6932:	4a07      	ldr	r2, [pc, #28]	; (d6950 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6934:	b510      	push	{r4, lr}
   d6936:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d693a:	f101 0210 	add.w	r2, r1, #16
   d693e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6942:	f843 4b04 	str.w	r4, [r3], #4
   d6946:	4291      	cmp	r1, r2
   d6948:	d1f9      	bne.n	d693e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d694a:	780a      	ldrb	r2, [r1, #0]
   d694c:	701a      	strb	r2, [r3, #0]
}
   d694e:	bd10      	pop	{r4, pc}
   d6950:	000d90f4 	.word	0x000d90f4

000d6954 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d6954:	7d03      	ldrb	r3, [r0, #20]
   d6956:	2b04      	cmp	r3, #4
   d6958:	d104      	bne.n	d6964 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d695a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d695c:	3800      	subs	r0, #0
   d695e:	bf18      	it	ne
   d6960:	2001      	movne	r0, #1
   d6962:	4770      	bx	lr
    } else if (version() == 6) {
   d6964:	2b06      	cmp	r3, #6
   d6966:	d107      	bne.n	d6978 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6968:	6843      	ldr	r3, [r0, #4]
   d696a:	b93b      	cbnz	r3, d697c <_ZNK9IPAddresscvbEv+0x28>
   d696c:	6883      	ldr	r3, [r0, #8]
   d696e:	b92b      	cbnz	r3, d697c <_ZNK9IPAddresscvbEv+0x28>
   d6970:	68c3      	ldr	r3, [r0, #12]
   d6972:	b91b      	cbnz	r3, d697c <_ZNK9IPAddresscvbEv+0x28>
   d6974:	6900      	ldr	r0, [r0, #16]
   d6976:	e7f1      	b.n	d695c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6978:	2000      	movs	r0, #0
   d697a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d697c:	2001      	movs	r0, #1
}
   d697e:	4770      	bx	lr

000d6980 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6980:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6982:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6986:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d698a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d698e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6992:	2304      	movs	r3, #4
   d6994:	6041      	str	r1, [r0, #4]
   d6996:	7503      	strb	r3, [r0, #20]
}
   d6998:	bd10      	pop	{r4, pc}

000d699a <_ZN9IPAddressaSEPKh>:
{
   d699a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d699c:	78cb      	ldrb	r3, [r1, #3]
   d699e:	9300      	str	r3, [sp, #0]
   d69a0:	788b      	ldrb	r3, [r1, #2]
   d69a2:	784a      	ldrb	r2, [r1, #1]
   d69a4:	7809      	ldrb	r1, [r1, #0]
   d69a6:	f7ff ffeb 	bl	d6980 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d69aa:	b002      	add	sp, #8
   d69ac:	bd10      	pop	{r4, pc}
	...

000d69b0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
   d69b0:	b510      	push	{r4, lr}
   d69b2:	4b03      	ldr	r3, [pc, #12]	; (d69c0 <_ZN9IPAddressC1EPKh+0x10>)
   d69b4:	6003      	str	r3, [r0, #0]
   d69b6:	4604      	mov	r4, r0
    *this = address;
   d69b8:	f7ff ffef 	bl	d699a <_ZN9IPAddressaSEPKh>
}
   d69bc:	4620      	mov	r0, r4
   d69be:	bd10      	pop	{r4, pc}
   d69c0:	000d90f4 	.word	0x000d90f4

000d69c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69c4:	7441      	strb	r1, [r0, #17]
}
   d69c6:	4770      	bx	lr

000d69c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69c8:	4770      	bx	lr

000d69ca <_ZN9USBSerial4readEv>:
{
   d69ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d69cc:	2100      	movs	r1, #0
   d69ce:	7c00      	ldrb	r0, [r0, #16]
   d69d0:	f7ff fa06 	bl	d5de0 <HAL_USB_USART_Receive_Data>
}
   d69d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69d8:	bd08      	pop	{r3, pc}

000d69da <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d69da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d69dc:	2101      	movs	r1, #1
   d69de:	7c00      	ldrb	r0, [r0, #16]
   d69e0:	f7ff f9fe 	bl	d5de0 <HAL_USB_USART_Receive_Data>
}
   d69e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69e8:	bd08      	pop	{r3, pc}

000d69ea <_ZN9USBSerial17availableForWriteEv>:
{
   d69ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69ec:	7c00      	ldrb	r0, [r0, #16]
   d69ee:	f7ff f9ef 	bl	d5dd0 <HAL_USB_USART_Available_Data_For_Write>
}
   d69f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69f6:	bd08      	pop	{r3, pc}

000d69f8 <_ZN9USBSerial9availableEv>:
{
   d69f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69fa:	7c00      	ldrb	r0, [r0, #16]
   d69fc:	f7ff f9e0 	bl	d5dc0 <HAL_USB_USART_Available_Data>
}
   d6a00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a04:	bd08      	pop	{r3, pc}

000d6a06 <_ZN9USBSerial5writeEh>:
{
   d6a06:	b513      	push	{r0, r1, r4, lr}
   d6a08:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a0a:	7c00      	ldrb	r0, [r0, #16]
{
   d6a0c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a0e:	f7ff f9df 	bl	d5dd0 <HAL_USB_USART_Available_Data_For_Write>
   d6a12:	2800      	cmp	r0, #0
   d6a14:	9901      	ldr	r1, [sp, #4]
   d6a16:	dc01      	bgt.n	d6a1c <_ZN9USBSerial5writeEh+0x16>
   d6a18:	7c60      	ldrb	r0, [r4, #17]
   d6a1a:	b120      	cbz	r0, d6a26 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a1c:	7c20      	ldrb	r0, [r4, #16]
   d6a1e:	f7ff f9e7 	bl	d5df0 <HAL_USB_USART_Send_Data>
   d6a22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6a26:	b002      	add	sp, #8
   d6a28:	bd10      	pop	{r4, pc}

000d6a2a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6a2a:	7c00      	ldrb	r0, [r0, #16]
   d6a2c:	f7ff b9e8 	b.w	d5e00 <HAL_USB_USART_Flush_Data>

000d6a30 <_ZN9USBSerialD0Ev>:
   d6a30:	b510      	push	{r4, lr}
   d6a32:	2114      	movs	r1, #20
   d6a34:	4604      	mov	r4, r0
   d6a36:	f000 fece 	bl	d77d6 <_ZdlPvj>
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	bd10      	pop	{r4, pc}
	...

000d6a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a40:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a46:	4604      	mov	r4, r0
   d6a48:	4608      	mov	r0, r1
   d6a4a:	2100      	movs	r1, #0
   d6a4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a50:	4b04      	ldr	r3, [pc, #16]	; (d6a64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a52:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6a54:	2301      	movs	r3, #1
  _serial = serial;
   d6a56:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a58:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6a5a:	4611      	mov	r1, r2
   d6a5c:	f7ff f9a0 	bl	d5da0 <HAL_USB_USART_Init>
}
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}
   d6a64:	000d9108 	.word	0x000d9108

000d6a68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a68:	7c00      	ldrb	r0, [r0, #16]
   d6a6a:	2200      	movs	r2, #0
   d6a6c:	f7ff b9a0 	b.w	d5db0 <HAL_USB_USART_Begin>

000d6a70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a72:	2214      	movs	r2, #20
{
   d6a74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a76:	2100      	movs	r1, #0
   d6a78:	f001 fe7e 	bl	d8778 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	bd10      	pop	{r4, pc}

000d6a80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a82:	4c10      	ldr	r4, [pc, #64]	; (d6ac4 <_Z16_fetch_usbserialv+0x44>)
{
   d6a84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a86:	a803      	add	r0, sp, #12
   d6a88:	f7ff fff2 	bl	d6a70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a8c:	7821      	ldrb	r1, [r4, #0]
   d6a8e:	f3bf 8f5b 	dmb	ish
   d6a92:	f011 0101 	ands.w	r1, r1, #1
   d6a96:	d111      	bne.n	d6abc <_Z16_fetch_usbserialv+0x3c>
   d6a98:	4620      	mov	r0, r4
   d6a9a:	9101      	str	r1, [sp, #4]
   d6a9c:	f7fd fb03 	bl	d40a6 <__cxa_guard_acquire>
   d6aa0:	9901      	ldr	r1, [sp, #4]
   d6aa2:	b158      	cbz	r0, d6abc <_Z16_fetch_usbserialv+0x3c>
   d6aa4:	aa03      	add	r2, sp, #12
   d6aa6:	4808      	ldr	r0, [pc, #32]	; (d6ac8 <_Z16_fetch_usbserialv+0x48>)
   d6aa8:	f7ff ffca 	bl	d6a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6aac:	4620      	mov	r0, r4
   d6aae:	f7fd faff 	bl	d40b0 <__cxa_guard_release>
   d6ab2:	4a06      	ldr	r2, [pc, #24]	; (d6acc <_Z16_fetch_usbserialv+0x4c>)
   d6ab4:	4906      	ldr	r1, [pc, #24]	; (d6ad0 <_Z16_fetch_usbserialv+0x50>)
   d6ab6:	4804      	ldr	r0, [pc, #16]	; (d6ac8 <_Z16_fetch_usbserialv+0x48>)
   d6ab8:	f000 fe88 	bl	d77cc <__aeabi_atexit>
	return _usbserial;
}
   d6abc:	4802      	ldr	r0, [pc, #8]	; (d6ac8 <_Z16_fetch_usbserialv+0x48>)
   d6abe:	b008      	add	sp, #32
   d6ac0:	bd10      	pop	{r4, pc}
   d6ac2:	bf00      	nop
   d6ac4:	2003e678 	.word	0x2003e678
   d6ac8:	2003e67c 	.word	0x2003e67c
   d6acc:	2003dea8 	.word	0x2003dea8
   d6ad0:	000d69c9 	.word	0x000d69c9

000d6ad4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6ad4:	4770      	bx	lr

000d6ad6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ad6:	7441      	strb	r1, [r0, #17]
}
   d6ad8:	4770      	bx	lr

000d6ada <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6ada:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6adc:	7c00      	ldrb	r0, [r0, #16]
   d6ade:	f7ff f8bf 	bl	d5c60 <hal_usart_available_data_for_write>
}
   d6ae2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ae6:	bd08      	pop	{r3, pc}

000d6ae8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ae8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6aea:	7c00      	ldrb	r0, [r0, #16]
   d6aec:	f7ff f890 	bl	d5c10 <hal_usart_available>
}
   d6af0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6af4:	bd08      	pop	{r3, pc}

000d6af6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6af6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6af8:	7c00      	ldrb	r0, [r0, #16]
   d6afa:	f7ff f899 	bl	d5c30 <hal_usart_peek>
}
   d6afe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b02:	bd08      	pop	{r3, pc}

000d6b04 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b04:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6b06:	7c00      	ldrb	r0, [r0, #16]
   d6b08:	f7ff f88a 	bl	d5c20 <hal_usart_read>
}
   d6b0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b10:	bd08      	pop	{r3, pc}

000d6b12 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6b12:	7c00      	ldrb	r0, [r0, #16]
   d6b14:	f7ff b894 	b.w	d5c40 <hal_usart_flush>

000d6b18 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b1a:	7c45      	ldrb	r5, [r0, #17]
{
   d6b1c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b1e:	b12d      	cbz	r5, d6b2c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6b20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b22:	b003      	add	sp, #12
   d6b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6b28:	f7ff b86a 	b.w	d5c00 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b2c:	7c00      	ldrb	r0, [r0, #16]
   d6b2e:	9101      	str	r1, [sp, #4]
   d6b30:	f7ff f896 	bl	d5c60 <hal_usart_available_data_for_write>
   d6b34:	2800      	cmp	r0, #0
   d6b36:	9901      	ldr	r1, [sp, #4]
   d6b38:	dcf2      	bgt.n	d6b20 <_ZN11USARTSerial5writeEh+0x8>
}
   d6b3a:	4628      	mov	r0, r5
   d6b3c:	b003      	add	sp, #12
   d6b3e:	bd30      	pop	{r4, r5, pc}

000d6b40 <_ZN11USARTSerialD0Ev>:
   d6b40:	b510      	push	{r4, lr}
   d6b42:	2114      	movs	r1, #20
   d6b44:	4604      	mov	r4, r0
   d6b46:	f000 fe46 	bl	d77d6 <_ZdlPvj>
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	bd10      	pop	{r4, pc}
	...

000d6b50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6b50:	b510      	push	{r4, lr}
   d6b52:	f04f 0c00 	mov.w	ip, #0
   d6b56:	4604      	mov	r4, r0
   d6b58:	4608      	mov	r0, r1
   d6b5a:	4611      	mov	r1, r2
   d6b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b60:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6b64:	4a04      	ldr	r2, [pc, #16]	; (d6b78 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6b66:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6b68:	2201      	movs	r2, #1
  _serial = serial;
   d6b6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6b6c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6b6e:	461a      	mov	r2, r3
   d6b70:	f7ff f83e 	bl	d5bf0 <hal_usart_init>
}
   d6b74:	4620      	mov	r0, r4
   d6b76:	bd10      	pop	{r4, pc}
   d6b78:	000d9138 	.word	0x000d9138

000d6b7c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b7c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b7e:	4c0e      	ldr	r4, [pc, #56]	; (d6bb8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6b80:	7821      	ldrb	r1, [r4, #0]
   d6b82:	f3bf 8f5b 	dmb	ish
   d6b86:	f011 0101 	ands.w	r1, r1, #1
   d6b8a:	d112      	bne.n	d6bb2 <_Z22__fetch_global_Serial1v+0x36>
   d6b8c:	4620      	mov	r0, r4
   d6b8e:	9101      	str	r1, [sp, #4]
   d6b90:	f7fd fa89 	bl	d40a6 <__cxa_guard_acquire>
   d6b94:	9901      	ldr	r1, [sp, #4]
   d6b96:	b160      	cbz	r0, d6bb2 <_Z22__fetch_global_Serial1v+0x36>
   d6b98:	4a08      	ldr	r2, [pc, #32]	; (d6bbc <_Z22__fetch_global_Serial1v+0x40>)
   d6b9a:	4b09      	ldr	r3, [pc, #36]	; (d6bc0 <_Z22__fetch_global_Serial1v+0x44>)
   d6b9c:	4809      	ldr	r0, [pc, #36]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x48>)
   d6b9e:	f7ff ffd7 	bl	d6b50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	f7fd fa84 	bl	d40b0 <__cxa_guard_release>
   d6ba8:	4a07      	ldr	r2, [pc, #28]	; (d6bc8 <_Z22__fetch_global_Serial1v+0x4c>)
   d6baa:	4908      	ldr	r1, [pc, #32]	; (d6bcc <_Z22__fetch_global_Serial1v+0x50>)
   d6bac:	4805      	ldr	r0, [pc, #20]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x48>)
   d6bae:	f000 fe0d 	bl	d77cc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6bb2:	4804      	ldr	r0, [pc, #16]	; (d6bc4 <_Z22__fetch_global_Serial1v+0x48>)
   d6bb4:	b002      	add	sp, #8
   d6bb6:	bd10      	pop	{r4, pc}
   d6bb8:	2003e690 	.word	0x2003e690
   d6bbc:	2003e694 	.word	0x2003e694
   d6bc0:	2003e718 	.word	0x2003e718
   d6bc4:	2003e79c 	.word	0x2003e79c
   d6bc8:	2003dea8 	.word	0x2003dea8
   d6bcc:	000d6ad5 	.word	0x000d6ad5

000d6bd0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6bd0:	4770      	bx	lr

000d6bd2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bd4:	4606      	mov	r6, r0
   d6bd6:	4615      	mov	r5, r2
   d6bd8:	460c      	mov	r4, r1
   d6bda:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6bdc:	42bc      	cmp	r4, r7
   d6bde:	d006      	beq.n	d6bee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6be0:	6833      	ldr	r3, [r6, #0]
   d6be2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6be6:	689b      	ldr	r3, [r3, #8]
   d6be8:	4630      	mov	r0, r6
   d6bea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6bec:	e7f6      	b.n	d6bdc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6bee:	4628      	mov	r0, r5
   d6bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bf2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6bf2:	7c00      	ldrb	r0, [r0, #16]
   d6bf4:	2200      	movs	r2, #0
   d6bf6:	f7ff b853 	b.w	d5ca0 <hal_i2c_write>

000d6bfa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6bfa:	7c00      	ldrb	r0, [r0, #16]
   d6bfc:	2100      	movs	r1, #0
   d6bfe:	f7ff b857 	b.w	d5cb0 <hal_i2c_available>

000d6c02 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6c02:	7c00      	ldrb	r0, [r0, #16]
   d6c04:	2100      	movs	r1, #0
   d6c06:	f7ff b85b 	b.w	d5cc0 <hal_i2c_read>

000d6c0a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6c0a:	7c00      	ldrb	r0, [r0, #16]
   d6c0c:	2100      	movs	r1, #0
   d6c0e:	f7ff b85f 	b.w	d5cd0 <hal_i2c_peek>

000d6c12 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6c12:	7c00      	ldrb	r0, [r0, #16]
   d6c14:	2100      	movs	r1, #0
   d6c16:	f7ff b863 	b.w	d5ce0 <hal_i2c_flush>

000d6c1a <_ZN7TwoWireD0Ev>:
   d6c1a:	b510      	push	{r4, lr}
   d6c1c:	2114      	movs	r1, #20
   d6c1e:	4604      	mov	r4, r0
   d6c20:	f000 fdd9 	bl	d77d6 <_ZdlPvj>
   d6c24:	4620      	mov	r0, r4
   d6c26:	bd10      	pop	{r4, pc}

000d6c28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6c28:	b510      	push	{r4, lr}
   d6c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c2e:	4604      	mov	r4, r0
   d6c30:	4608      	mov	r0, r1
   d6c32:	2100      	movs	r1, #0
   d6c34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6c38:	4b03      	ldr	r3, [pc, #12]	; (d6c48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6c3a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6c3c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6c3e:	4611      	mov	r1, r2
   d6c40:	f7ff f85e 	bl	d5d00 <hal_i2c_init>
}
   d6c44:	4620      	mov	r0, r4
   d6c46:	bd10      	pop	{r4, pc}
   d6c48:	000d9168 	.word	0x000d9168

000d6c4c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6c4c:	2300      	movs	r3, #0
   d6c4e:	7c00      	ldrb	r0, [r0, #16]
   d6c50:	461a      	mov	r2, r3
   d6c52:	4619      	mov	r1, r3
   d6c54:	f7ff b80c 	b.w	d5c70 <hal_i2c_begin>

000d6c58 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6c58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6c5a:	2200      	movs	r2, #0
   d6c5c:	2314      	movs	r3, #20
   d6c5e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6c62:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6c66:	780b      	ldrb	r3, [r1, #0]
   d6c68:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c6c:	684b      	ldr	r3, [r1, #4]
   d6c6e:	9303      	str	r3, [sp, #12]
   d6c70:	68cb      	ldr	r3, [r1, #12]
   d6c72:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6c74:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6c76:	7a0b      	ldrb	r3, [r1, #8]
   d6c78:	9305      	str	r3, [sp, #20]
   d6c7a:	a901      	add	r1, sp, #4
   d6c7c:	f7ff f848 	bl	d5d10 <hal_i2c_request_ex>
}
   d6c80:	b007      	add	sp, #28
   d6c82:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c86 <_ZN7TwoWire11requestFromEhjh>:
{
   d6c86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6c88:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6c8a:	f88d 1000 	strb.w	r1, [sp]
   d6c8e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6c92:	9103      	str	r1, [sp, #12]
   d6c94:	bf18      	it	ne
   d6c96:	2301      	movne	r3, #1
   d6c98:	4669      	mov	r1, sp
    size_ = size;
   d6c9a:	9201      	str	r2, [sp, #4]
   d6c9c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6ca0:	f7ff ffda 	bl	d6c58 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6ca4:	b005      	add	sp, #20
   d6ca6:	f85d fb04 	ldr.w	pc, [sp], #4

000d6caa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6caa:	2301      	movs	r3, #1
   d6cac:	f7ff bfeb 	b.w	d6c86 <_ZN7TwoWire11requestFromEhjh>

000d6cb0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6cb0:	7c00      	ldrb	r0, [r0, #16]
   d6cb2:	2200      	movs	r2, #0
   d6cb4:	f7fe bfe4 	b.w	d5c80 <hal_i2c_begin_transmission>

000d6cb8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6cb8:	7c00      	ldrb	r0, [r0, #16]
   d6cba:	2200      	movs	r2, #0
   d6cbc:	f7fe bfe8 	b.w	d5c90 <hal_i2c_end_transmission>

000d6cc0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6cc0:	2101      	movs	r1, #1
   d6cc2:	f7ff bff9 	b.w	d6cb8 <_ZN7TwoWire15endTransmissionEh>

000d6cc6 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6cc6:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6cc8:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6cca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6cce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6cd0:	2201      	movs	r2, #1
   d6cd2:	f04f 33ff 	mov.w	r3, #4294967295
   d6cd6:	f10d 0107 	add.w	r1, sp, #7
   d6cda:	47a0      	blx	r4
}
   d6cdc:	b002      	add	sp, #8
   d6cde:	bd10      	pop	{r4, pc}

000d6ce0 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6ce0:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6ce2:	6803      	ldr	r3, [r0, #0]
   d6ce4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6ce6:	f04f 33ff 	mov.w	r3, #4294967295
   d6cea:	46a4      	mov	ip, r4
}
   d6cec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6cf0:	4760      	bx	ip

000d6cf2 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6cf2:	b513      	push	{r0, r1, r4, lr}
   d6cf4:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6cf6:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6cf8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6cfc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6cfe:	f10d 0107 	add.w	r1, sp, #7
   d6d02:	2201      	movs	r2, #1
   d6d04:	47a0      	blx	r4
}
   d6d06:	b002      	add	sp, #8
   d6d08:	bd10      	pop	{r4, pc}

000d6d0a <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6d0a:	4770      	bx	lr

000d6d0c <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6d0c:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d0e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6d10:	681a      	ldr	r2, [r3, #0]
   d6d12:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d6d14:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6d16:	da10      	bge.n	d6d3a <_ZN9TCPClient9connectedEv+0x2e>
   d6d18:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6d1c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6d20:	429a      	cmp	r2, r3
   d6d22:	d10a      	bne.n	d6d3a <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6d24:	6803      	ldr	r3, [r0, #0]
   d6d26:	691b      	ldr	r3, [r3, #16]
   d6d28:	4798      	blx	r3
        if (!rv) {
   d6d2a:	4604      	mov	r4, r0
   d6d2c:	b928      	cbnz	r0, d6d3a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d6d2e:	682b      	ldr	r3, [r5, #0]
   d6d30:	4628      	mov	r0, r5
   d6d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d34:	4798      	blx	r3
        rv = available();
   d6d36:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6d38:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6d3a:	2001      	movs	r0, #1
   d6d3c:	e7fc      	b.n	d6d38 <_ZN9TCPClient9connectedEv+0x2c>

000d6d3e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6d3e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d6d40:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d6d42:	43c0      	mvns	r0, r0
   d6d44:	0fc0      	lsrs	r0, r0, #31
   d6d46:	4770      	bx	lr

000d6d48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6d48:	4770      	bx	lr
	...

000d6d4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6d4c:	4b06      	ldr	r3, [pc, #24]	; (d6d68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6d4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6d50:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6d52:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6d56:	d005      	beq.n	d6d64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6d58:	4608      	mov	r0, r1
   d6d5a:	f000 fd41 	bl	d77e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6d5e:	2800      	cmp	r0, #0
	return nullptr;
   d6d60:	bf08      	it	eq
   d6d62:	2400      	moveq	r4, #0
      }
   d6d64:	4620      	mov	r0, r4
   d6d66:	bd10      	pop	{r4, pc}
   d6d68:	000d90b8 	.word	0x000d90b8

000d6d6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6d6c:	b510      	push	{r4, lr}
   d6d6e:	21ac      	movs	r1, #172	; 0xac
   d6d70:	4604      	mov	r4, r0
   d6d72:	f000 fd30 	bl	d77d6 <_ZdlPvj>
   d6d76:	4620      	mov	r0, r4
   d6d78:	bd10      	pop	{r4, pc}

000d6d7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6d7a:	f7fd b990 	b.w	d409e <_ZdlPv>

000d6d7e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d6d82:	f04f 0800 	mov.w	r8, #0
   d6d86:	b086      	sub	sp, #24
   d6d88:	461d      	mov	r5, r3
   d6d8a:	f8c0 8004 	str.w	r8, [r0, #4]
   d6d8e:	4604      	mov	r4, r0
   d6d90:	460e      	mov	r6, r1
   d6d92:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6d94:	4641      	mov	r1, r8
   d6d96:	2210      	movs	r2, #16
   d6d98:	a802      	add	r0, sp, #8
   d6d9a:	f001 fced 	bl	d8778 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6d9e:	1c6b      	adds	r3, r5, #1
   d6da0:	d009      	beq.n	d6db6 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d6da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6da6:	fbb5 f3f0 	udiv	r3, r5, r0
   d6daa:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6dae:	fb00 5313 	mls	r3, r0, r3, r5
   d6db2:	4358      	muls	r0, r3
   d6db4:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6db6:	6960      	ldr	r0, [r4, #20]
   d6db8:	2310      	movs	r3, #16
   d6dba:	9300      	str	r3, [sp, #0]
   d6dbc:	6800      	ldr	r0, [r0, #0]
   d6dbe:	ab02      	add	r3, sp, #8
   d6dc0:	f241 0205 	movw	r2, #4101	; 0x1005
   d6dc4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6dc8:	f7fe ffaa 	bl	d5d20 <sock_setsockopt>
    if (ret < 0) {
   d6dcc:	2800      	cmp	r0, #0
   d6dce:	da07      	bge.n	d6de0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6dd0:	f7ff f8f2 	bl	d5fb8 <__errno>
   d6dd4:	6803      	ldr	r3, [r0, #0]
   d6dd6:	6063      	str	r3, [r4, #4]
        return 0;
   d6dd8:	2000      	movs	r0, #0
}
   d6dda:	b006      	add	sp, #24
   d6ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6de0:	6960      	ldr	r0, [r4, #20]
   d6de2:	2300      	movs	r3, #0
   d6de4:	6800      	ldr	r0, [r0, #0]
   d6de6:	463a      	mov	r2, r7
   d6de8:	4631      	mov	r1, r6
   d6dea:	f7fe ffb9 	bl	d5d60 <sock_send>
    if (ret < 0) {
   d6dee:	1e03      	subs	r3, r0, #0
   d6df0:	dbee      	blt.n	d6dd0 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d6df2:	4618      	mov	r0, r3
   d6df4:	e7f1      	b.n	d6dda <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6df8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6df8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6dfa:	6984      	ldr	r4, [r0, #24]
   d6dfc:	4b0a      	ldr	r3, [pc, #40]	; (d6e28 <_ZN9TCPClientD1Ev+0x30>)
   d6dfe:	6003      	str	r3, [r0, #0]
   d6e00:	4605      	mov	r5, r0
   d6e02:	b17c      	cbz	r4, d6e24 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6e04:	6863      	ldr	r3, [r4, #4]
   d6e06:	3b01      	subs	r3, #1
   d6e08:	6063      	str	r3, [r4, #4]
   d6e0a:	b95b      	cbnz	r3, d6e24 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6e0c:	6823      	ldr	r3, [r4, #0]
   d6e0e:	4620      	mov	r0, r4
   d6e10:	689b      	ldr	r3, [r3, #8]
   d6e12:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6e14:	68a3      	ldr	r3, [r4, #8]
   d6e16:	3b01      	subs	r3, #1
   d6e18:	60a3      	str	r3, [r4, #8]
   d6e1a:	b91b      	cbnz	r3, d6e24 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6e1c:	6823      	ldr	r3, [r4, #0]
   d6e1e:	4620      	mov	r0, r4
   d6e20:	68db      	ldr	r3, [r3, #12]
   d6e22:	4798      	blx	r3
   d6e24:	4628      	mov	r0, r5
   d6e26:	bd38      	pop	{r3, r4, r5, pc}
   d6e28:	000d91c4 	.word	0x000d91c4

000d6e2c <_ZN9TCPClientD0Ev>:
   d6e2c:	b510      	push	{r4, lr}
   d6e2e:	4604      	mov	r4, r0
   d6e30:	f7ff ffe2 	bl	d6df8 <_ZN9TCPClientD1Ev>
   d6e34:	4620      	mov	r0, r4
   d6e36:	211c      	movs	r1, #28
   d6e38:	f000 fccd 	bl	d77d6 <_ZdlPvj>
   d6e3c:	4620      	mov	r0, r4
   d6e3e:	bd10      	pop	{r4, pc}

000d6e40 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d6e40:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6e42:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6e44:	4b05      	ldr	r3, [pc, #20]	; (d6e5c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6e46:	4604      	mov	r4, r0
   d6e48:	358c      	adds	r5, #140	; 0x8c
   d6e4a:	f844 3b04 	str.w	r3, [r4], #4
   d6e4e:	4606      	mov	r6, r0
   d6e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e54:	682b      	ldr	r3, [r5, #0]
   d6e56:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6e58:	4630      	mov	r0, r6
   d6e5a:	bd70      	pop	{r4, r5, r6, pc}
   d6e5c:	000d90f4 	.word	0x000d90f4

000d6e60 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d6e60:	b510      	push	{r4, lr}
   d6e62:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6e64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6e68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6e6c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d6e6e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6e70:	d005      	beq.n	d6e7e <_ZN9TCPClient4peekEv+0x1e>
   d6e72:	6963      	ldr	r3, [r4, #20]
   d6e74:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6e78:	4413      	add	r3, r2
   d6e7a:	7918      	ldrb	r0, [r3, #4]
}
   d6e7c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6e7e:	6803      	ldr	r3, [r0, #0]
   d6e80:	691b      	ldr	r3, [r3, #16]
   d6e82:	4798      	blx	r3
   d6e84:	2800      	cmp	r0, #0
   d6e86:	d1f4      	bne.n	d6e72 <_ZN9TCPClient4peekEv+0x12>
   d6e88:	f04f 30ff 	mov.w	r0, #4294967295
   d6e8c:	e7f6      	b.n	d6e7c <_ZN9TCPClient4peekEv+0x1c>

000d6e8e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d6e8e:	b510      	push	{r4, lr}
   d6e90:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6e92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6e96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6e9a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6e9c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6e9e:	d008      	beq.n	d6eb2 <_ZN9TCPClient4readEv+0x24>
   d6ea0:	6963      	ldr	r3, [r4, #20]
   d6ea2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6ea6:	1c51      	adds	r1, r2, #1
   d6ea8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6eac:	4413      	add	r3, r2
   d6eae:	7918      	ldrb	r0, [r3, #4]
}
   d6eb0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6eb2:	6803      	ldr	r3, [r0, #0]
   d6eb4:	691b      	ldr	r3, [r3, #16]
   d6eb6:	4798      	blx	r3
   d6eb8:	2800      	cmp	r0, #0
   d6eba:	d1f1      	bne.n	d6ea0 <_ZN9TCPClient4readEv+0x12>
   d6ebc:	f04f 30ff 	mov.w	r0, #4294967295
   d6ec0:	e7f6      	b.n	d6eb0 <_ZN9TCPClient4readEv+0x22>

000d6ec2 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ec4:	6943      	ldr	r3, [r0, #20]
   d6ec6:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6ec8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ecc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ed0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6ed2:	4605      	mov	r5, r0
   d6ed4:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6ed6:	d016      	beq.n	d6f06 <_ZN9TCPClient4readEPhj+0x44>
   d6ed8:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6eda:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6ede:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6ee2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6ee4:	42bc      	cmp	r4, r7
   d6ee6:	bf28      	it	cs
   d6ee8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6eea:	3304      	adds	r3, #4
   d6eec:	4622      	mov	r2, r4
   d6eee:	4419      	add	r1, r3
   d6ef0:	4630      	mov	r0, r6
   d6ef2:	f001 fc33 	bl	d875c <memcpy>
   d6ef6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6ef8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6efc:	4423      	add	r3, r4
   d6efe:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6f02:	4620      	mov	r0, r4
   d6f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6f06:	6803      	ldr	r3, [r0, #0]
   d6f08:	691b      	ldr	r3, [r3, #16]
   d6f0a:	4798      	blx	r3
   d6f0c:	2800      	cmp	r0, #0
   d6f0e:	d1e3      	bne.n	d6ed8 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6f10:	f04f 34ff 	mov.w	r4, #4294967295
   d6f14:	e7f5      	b.n	d6f02 <_ZN9TCPClient4readEPhj+0x40>
	...

000d6f18 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f1c:	4698      	mov	r8, r3
    stop();
   d6f1e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6f20:	b093      	sub	sp, #76	; 0x4c
   d6f22:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6f24:	2400      	movs	r4, #0
    stop();
   d6f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6f28:	4606      	mov	r6, r0
   d6f2a:	4617      	mov	r7, r2
    stop();
   d6f2c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6f2e:	4628      	mov	r0, r5
   d6f30:	466b      	mov	r3, sp
   d6f32:	4622      	mov	r2, r4
   d6f34:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6f36:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6f38:	f7fe fdba 	bl	d5ab0 <netdb_getaddrinfo>
   d6f3c:	4605      	mov	r5, r0
   d6f3e:	2800      	cmp	r0, #0
   d6f40:	d163      	bne.n	d700a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6f42:	9b00      	ldr	r3, [sp, #0]
   d6f44:	2b00      	cmp	r3, #0
   d6f46:	d04b      	beq.n	d6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6f48:	695b      	ldr	r3, [r3, #20]
   d6f4a:	2b00      	cmp	r3, #0
   d6f4c:	d048      	beq.n	d6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6f4e:	a806      	add	r0, sp, #24
   d6f50:	f7ff fce0 	bl	d6914 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6f54:	9b00      	ldr	r3, [sp, #0]
   d6f56:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6f58:	7863      	ldrb	r3, [r4, #1]
   d6f5a:	2b02      	cmp	r3, #2
   d6f5c:	d104      	bne.n	d6f68 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6f5e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6f60:	a806      	add	r0, sp, #24
   d6f62:	f7ff fd1a 	bl	d699a <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d6f66:	e026      	b.n	d6fb6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6f68:	2b0a      	cmp	r3, #10
   d6f6a:	d124      	bne.n	d6fb6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6f6c:	2211      	movs	r2, #17
   d6f6e:	4629      	mov	r1, r5
   d6f70:	a801      	add	r0, sp, #4
   d6f72:	f001 fc01 	bl	d8778 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6f76:	68a3      	ldr	r3, [r4, #8]
   d6f78:	2b00      	cmp	r3, #0
   d6f7a:	d038      	beq.n	d6fee <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f7c:	f104 0308 	add.w	r3, r4, #8
   d6f80:	f10d 0c04 	add.w	ip, sp, #4
   d6f84:	3418      	adds	r4, #24
   d6f86:	6818      	ldr	r0, [r3, #0]
   d6f88:	6859      	ldr	r1, [r3, #4]
   d6f8a:	4662      	mov	r2, ip
   d6f8c:	c203      	stmia	r2!, {r0, r1}
   d6f8e:	3308      	adds	r3, #8
   d6f90:	42a3      	cmp	r3, r4
   d6f92:	4694      	mov	ip, r2
   d6f94:	d1f7      	bne.n	d6f86 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6f96:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6f98:	a901      	add	r1, sp, #4
   d6f9a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6f9c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6fa0:	f7ff fcc6 	bl	d6930 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6fa4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6fa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6fac:	ac07      	add	r4, sp, #28
   d6fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6fb0:	f8dc 3000 	ldr.w	r3, [ip]
   d6fb4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6fb6:	a806      	add	r0, sp, #24
   d6fb8:	f7ff fccc 	bl	d6954 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6fbc:	b180      	cbz	r0, d6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6fbe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6fc0:	ad07      	add	r5, sp, #28
   d6fc2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6fc6:	4b12      	ldr	r3, [pc, #72]	; (d7010 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6fc8:	930c      	str	r3, [sp, #48]	; 0x30
   d6fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6fcc:	ac0d      	add	r4, sp, #52	; 0x34
   d6fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6fd0:	682b      	ldr	r3, [r5, #0]
   d6fd2:	7023      	strb	r3, [r4, #0]
   d6fd4:	463a      	mov	r2, r7
   d6fd6:	4643      	mov	r3, r8
   d6fd8:	a90c      	add	r1, sp, #48	; 0x30
   d6fda:	4630      	mov	r0, r6
   d6fdc:	47c8      	blx	r9
   d6fde:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6fe0:	9800      	ldr	r0, [sp, #0]
   d6fe2:	f7fe fd5d 	bl	d5aa0 <netdb_freeaddrinfo>
}
   d6fe6:	4628      	mov	r0, r5
   d6fe8:	b013      	add	sp, #76	; 0x4c
   d6fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6fee:	68e3      	ldr	r3, [r4, #12]
   d6ff0:	2b00      	cmp	r3, #0
   d6ff2:	d1c3      	bne.n	d6f7c <_ZN9TCPClient7connectEPKctm+0x64>
   d6ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6ff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6ffc:	f7fe fde8 	bl	d5bd0 <inet_htonl>
   d7000:	4581      	cmp	r9, r0
   d7002:	d1bb      	bne.n	d6f7c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7004:	f104 0114 	add.w	r1, r4, #20
   d7008:	e7aa      	b.n	d6f60 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d700a:	4625      	mov	r5, r4
   d700c:	e7e8      	b.n	d6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d700e:	bf00      	nop
   d7010:	000d90f4 	.word	0x000d90f4

000d7014 <_ZN9TCPClient12flush_bufferEv>:
   d7014:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7016:	2300      	movs	r3, #0
   d7018:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d701c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d701e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7022:	4770      	bx	lr

000d7024 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7028:	461f      	mov	r7, r3
    stop();
   d702a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d702c:	460c      	mov	r4, r1
    stop();
   d702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7030:	b08a      	sub	sp, #40	; 0x28
   d7032:	4605      	mov	r5, r0
   d7034:	4616      	mov	r6, r2
    stop();
   d7036:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7038:	7d23      	ldrb	r3, [r4, #20]
   d703a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d703e:	2b04      	cmp	r3, #4
   d7040:	bf0c      	ite	eq
   d7042:	2002      	moveq	r0, #2
   d7044:	200a      	movne	r0, #10
   d7046:	2206      	movs	r2, #6
   d7048:	2101      	movs	r1, #1
   d704a:	f7fe fe91 	bl	d5d70 <sock_socket>
   d704e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7052:	696b      	ldr	r3, [r5, #20]
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	2b00      	cmp	r3, #0
   d7058:	da08      	bge.n	d706c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d705a:	682b      	ldr	r3, [r5, #0]
   d705c:	4628      	mov	r0, r5
   d705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7060:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7062:	4798      	blx	r3
}
   d7064:	4620      	mov	r0, r4
   d7066:	b00a      	add	sp, #40	; 0x28
   d7068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d706c:	4628      	mov	r0, r5
   d706e:	f7ff ffd1 	bl	d7014 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7072:	b1b7      	cbz	r7, d70a2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7074:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7076:	a903      	add	r1, sp, #12
   d7078:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d707a:	9303      	str	r3, [sp, #12]
   d707c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7080:	f7fe fd56 	bl	d5b30 <if_index_to_name>
   d7084:	2800      	cmp	r0, #0
   d7086:	d1e8      	bne.n	d705a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7088:	6968      	ldr	r0, [r5, #20]
   d708a:	2306      	movs	r3, #6
   d708c:	9300      	str	r3, [sp, #0]
   d708e:	6800      	ldr	r0, [r0, #0]
   d7090:	ab03      	add	r3, sp, #12
   d7092:	f241 020b 	movw	r2, #4107	; 0x100b
   d7096:	f640 71ff 	movw	r1, #4095	; 0xfff
   d709a:	f7fe fe41 	bl	d5d20 <sock_setsockopt>
   d709e:	2800      	cmp	r0, #0
   d70a0:	d1db      	bne.n	d705a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d70a2:	221c      	movs	r2, #28
   d70a4:	2100      	movs	r1, #0
   d70a6:	a803      	add	r0, sp, #12
   d70a8:	f001 fb66 	bl	d8778 <memset>
    if (ip.version() == 4) {
   d70ac:	7d23      	ldrb	r3, [r4, #20]
   d70ae:	2b04      	cmp	r3, #4
   d70b0:	d11d      	bne.n	d70ee <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d70b2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d70b6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d70b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d70bc:	f7fe fd90 	bl	d5be0 <inet_htons>
   d70c0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d70c4:	6860      	ldr	r0, [r4, #4]
   d70c6:	f7fe fd83 	bl	d5bd0 <inet_htonl>
   d70ca:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d70cc:	696b      	ldr	r3, [r5, #20]
   d70ce:	221c      	movs	r2, #28
   d70d0:	6818      	ldr	r0, [r3, #0]
   d70d2:	a903      	add	r1, sp, #12
   d70d4:	f7fe fe34 	bl	d5d40 <sock_connect>
   d70d8:	2800      	cmp	r0, #0
   d70da:	d1be      	bne.n	d705a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d70dc:	3404      	adds	r4, #4
   d70de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d70e0:	696d      	ldr	r5, [r5, #20]
   d70e2:	358c      	adds	r5, #140	; 0x8c
   d70e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d70e6:	6823      	ldr	r3, [r4, #0]
   d70e8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d70ea:	2401      	movs	r4, #1
   d70ec:	e7ba      	b.n	d7064 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d70ee:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d70f2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d70f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d70f8:	f7fe fd72 	bl	d5be0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d70fc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d70fe:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7102:	1d23      	adds	r3, r4, #4
   d7104:	f104 0714 	add.w	r7, r4, #20
   d7108:	6818      	ldr	r0, [r3, #0]
   d710a:	6859      	ldr	r1, [r3, #4]
   d710c:	4632      	mov	r2, r6
   d710e:	c203      	stmia	r2!, {r0, r1}
   d7110:	3308      	adds	r3, #8
   d7112:	42bb      	cmp	r3, r7
   d7114:	4616      	mov	r6, r2
   d7116:	d1f7      	bne.n	d7108 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7118:	e7d8      	b.n	d70cc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d711c <_ZN9TCPClient9availableEv>:
{
   d711c:	b530      	push	{r4, r5, lr}
   d711e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7120:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7124:	b08b      	sub	sp, #44	; 0x2c
   d7126:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7128:	b12b      	cbz	r3, d7136 <_ZN9TCPClient9availableEv+0x1a>
   d712a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d712e:	429a      	cmp	r2, r3
   d7130:	d101      	bne.n	d7136 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7132:	f7ff ff6f 	bl	d7014 <_ZN9TCPClient12flush_bufferEv>
   d7136:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7138:	6808      	ldr	r0, [r1, #0]
   d713a:	2800      	cmp	r0, #0
   d713c:	db18      	blt.n	d7170 <_ZN9TCPClient9availableEv+0x54>
   d713e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7142:	2d7f      	cmp	r5, #127	; 0x7f
   d7144:	d814      	bhi.n	d7170 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7146:	3104      	adds	r1, #4
   d7148:	2308      	movs	r3, #8
   d714a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d714e:	4429      	add	r1, r5
   d7150:	f7fe fdfe 	bl	d5d50 <sock_recv>
            if (ret > 0) {
   d7154:	2800      	cmp	r0, #0
   d7156:	dd13      	ble.n	d7180 <_ZN9TCPClient9availableEv+0x64>
   d7158:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d715a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d715e:	b90a      	cbnz	r2, d7164 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7160:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7164:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7166:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d716a:	4410      	add	r0, r2
   d716c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7170:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7172:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7176:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d717a:	1ac0      	subs	r0, r0, r3
   d717c:	b00b      	add	sp, #44	; 0x2c
   d717e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7180:	f7fe ff1a 	bl	d5fb8 <__errno>
   d7184:	6803      	ldr	r3, [r0, #0]
   d7186:	2b0b      	cmp	r3, #11
   d7188:	d0f2      	beq.n	d7170 <_ZN9TCPClient9availableEv+0x54>
   d718a:	f7fe ff15 	bl	d5fb8 <__errno>
   d718e:	6803      	ldr	r3, [r0, #0]
   d7190:	2b0b      	cmp	r3, #11
   d7192:	d0ed      	beq.n	d7170 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7194:	2320      	movs	r3, #32
   d7196:	2500      	movs	r5, #0
   d7198:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d719c:	f7fe ff0c 	bl	d5fb8 <__errno>
   d71a0:	6803      	ldr	r3, [r0, #0]
   d71a2:	9301      	str	r3, [sp, #4]
   d71a4:	4b08      	ldr	r3, [pc, #32]	; (d71c8 <_ZN9TCPClient9availableEv+0xac>)
   d71a6:	4909      	ldr	r1, [pc, #36]	; (d71cc <_ZN9TCPClient9availableEv+0xb0>)
   d71a8:	9300      	str	r3, [sp, #0]
   d71aa:	aa02      	add	r2, sp, #8
   d71ac:	462b      	mov	r3, r5
   d71ae:	2032      	movs	r0, #50	; 0x32
   d71b0:	f7fe fe36 	bl	d5e20 <log_message>
                    sock_close(d_->sock);
   d71b4:	6963      	ldr	r3, [r4, #20]
   d71b6:	6818      	ldr	r0, [r3, #0]
   d71b8:	f7fe fdba 	bl	d5d30 <sock_close>
   d71bc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d71be:	f04f 32ff 	mov.w	r2, #4294967295
   d71c2:	601a      	str	r2, [r3, #0]
   d71c4:	e7d4      	b.n	d7170 <_ZN9TCPClient9availableEv+0x54>
   d71c6:	bf00      	nop
   d71c8:	000d918f 	.word	0x000d918f
   d71cc:	000d9188 	.word	0x000d9188

000d71d0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d71d0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d71d2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d71d4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d71d6:	6818      	ldr	r0, [r3, #0]
   d71d8:	2800      	cmp	r0, #0
   d71da:	db01      	blt.n	d71e0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d71dc:	f7fe fda8 	bl	d5d30 <sock_close>
   d71e0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d71e2:	f04f 32ff 	mov.w	r2, #4294967295
   d71e6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d71e8:	6960      	ldr	r0, [r4, #20]
   d71ea:	2211      	movs	r2, #17
   d71ec:	2100      	movs	r1, #0
   d71ee:	308c      	adds	r0, #140	; 0x8c
   d71f0:	f001 fac2 	bl	d8778 <memset>
    flush_buffer();
   d71f4:	4620      	mov	r0, r4
}
   d71f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d71fa:	f7ff bf0b 	b.w	d7014 <_ZN9TCPClient12flush_bufferEv>

000d71fe <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d71fe:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7200:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7202:	4604      	mov	r4, r0
          total(0) {
   d7204:	6001      	str	r1, [r0, #0]
   d7206:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d720a:	3088      	adds	r0, #136	; 0x88
   d720c:	f7ff fb82 	bl	d6914 <_ZN9IPAddressC1Ev>
}
   d7210:	4620      	mov	r0, r4
   d7212:	bd10      	pop	{r4, pc}

000d7214 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7214:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7216:	2300      	movs	r3, #0
   d7218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d721c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7220:	4a0e      	ldr	r2, [pc, #56]	; (d725c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7222:	6103      	str	r3, [r0, #16]
   d7224:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7226:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7228:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d722a:	20ac      	movs	r0, #172	; 0xac
   d722c:	9101      	str	r1, [sp, #4]
   d722e:	f7fc ff32 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7232:	1e05      	subs	r5, r0, #0
   d7234:	f105 060c 	add.w	r6, r5, #12
   d7238:	d008      	beq.n	d724c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d723a:	2301      	movs	r3, #1
   d723c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7240:	4b07      	ldr	r3, [pc, #28]	; (d7260 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7242:	9901      	ldr	r1, [sp, #4]
   d7244:	602b      	str	r3, [r5, #0]
   d7246:	4630      	mov	r0, r6
   d7248:	f7ff ffd9 	bl	d71fe <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d724c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d724e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7252:	f7ff fedf 	bl	d7014 <_ZN9TCPClient12flush_bufferEv>
}
   d7256:	b002      	add	sp, #8
   d7258:	bd70      	pop	{r4, r5, r6, pc}
   d725a:	bf00      	nop
   d725c:	000d91c4 	.word	0x000d91c4
   d7260:	000d91a8 	.word	0x000d91a8

000d7264 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7264:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7266:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d726a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d726c:	f7ff ffd2 	bl	d7214 <_ZN9TCPClientC1Ei>
}
   d7270:	4620      	mov	r0, r4
   d7272:	bd10      	pop	{r4, pc}

000d7274 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7274:	b510      	push	{r4, lr}
   d7276:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7278:	6800      	ldr	r0, [r0, #0]
   d727a:	2800      	cmp	r0, #0
   d727c:	db01      	blt.n	d7282 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d727e:	f7fe fd57 	bl	d5d30 <sock_close>
    }
}
   d7282:	4620      	mov	r0, r4
   d7284:	bd10      	pop	{r4, pc}

000d7286 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7286:	300c      	adds	r0, #12
   d7288:	f7ff bff4 	b.w	d7274 <_ZN9TCPClient4DataD1Ev>

000d728c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d728c:	4770      	bx	lr

000d728e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d728e:	2001      	movs	r0, #1
   d7290:	4770      	bx	lr

000d7292 <_ZN10WiFiSignalD0Ev>:
   d7292:	b510      	push	{r4, lr}
   d7294:	2124      	movs	r1, #36	; 0x24
   d7296:	4604      	mov	r4, r0
   d7298:	f000 fa9d 	bl	d77d6 <_ZdlPvj>
   d729c:	4620      	mov	r0, r4
   d729e:	bd10      	pop	{r4, pc}

000d72a0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72a0:	2200      	movs	r2, #0
   d72a2:	6840      	ldr	r0, [r0, #4]
   d72a4:	4611      	mov	r1, r2
   d72a6:	f7fe be2f 	b.w	d5f08 <network_listening>

000d72aa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d72aa:	2200      	movs	r2, #0
   d72ac:	6840      	ldr	r0, [r0, #4]
   d72ae:	4611      	mov	r1, r2
   d72b0:	f7fe be4a 	b.w	d5f48 <network_get_listen_timeout>

000d72b4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d72b4:	6840      	ldr	r0, [r0, #4]
   d72b6:	2200      	movs	r2, #0
   d72b8:	f7fe be3e 	b.w	d5f38 <network_set_listen_timeout>

000d72bc <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d72bc:	6840      	ldr	r0, [r0, #4]
   d72be:	2200      	movs	r2, #0
   d72c0:	f081 0101 	eor.w	r1, r1, #1
   d72c4:	f7fe be18 	b.w	d5ef8 <network_listen>

000d72c8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d72c8:	2300      	movs	r3, #0
   d72ca:	6840      	ldr	r0, [r0, #4]
   d72cc:	461a      	mov	r2, r3
   d72ce:	4619      	mov	r1, r3
   d72d0:	f7fe be0a 	b.w	d5ee8 <network_off>

000d72d4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d72d4:	2200      	movs	r2, #0
   d72d6:	6840      	ldr	r0, [r0, #4]
   d72d8:	4611      	mov	r1, r2
   d72da:	f7fe bde5 	b.w	d5ea8 <network_connecting>

000d72de <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72de:	6840      	ldr	r0, [r0, #4]
   d72e0:	2200      	movs	r2, #0
   d72e2:	2102      	movs	r1, #2
   d72e4:	f7fe bde8 	b.w	d5eb8 <network_disconnect>

000d72e8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d72e8:	2300      	movs	r3, #0
   d72ea:	6840      	ldr	r0, [r0, #4]
   d72ec:	461a      	mov	r2, r3
   d72ee:	f7fe bdd3 	b.w	d5e98 <network_connect>
	...

000d72f4 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d72f4:	8983      	ldrh	r3, [r0, #12]
   d72f6:	b17b      	cbz	r3, d7318 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d72f8:	6943      	ldr	r3, [r0, #20]
   d72fa:	2b00      	cmp	r3, #0
   d72fc:	db0c      	blt.n	d7318 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d72fe:	ee07 3a90 	vmov	s15, r3
   d7302:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7320 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d7306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d730a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d730e:	eddf 7a05 	vldr	s15, [pc, #20]	; d7324 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d7312:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7316:	4770      	bx	lr
    }
    return -1.0f;
   d7318:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d731c:	4770      	bx	lr
   d731e:	bf00      	nop
   d7320:	477fff00 	.word	0x477fff00
   d7324:	42c80000 	.word	0x42c80000

000d7328 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d7328:	8983      	ldrh	r3, [r0, #12]
   d732a:	b163      	cbz	r3, d7346 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   d732c:	6903      	ldr	r3, [r0, #16]
   d732e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7332:	d008      	beq.n	d7346 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   d7334:	ee07 3a90 	vmov	s15, r3
   d7338:	ed9f 7a04 	vldr	s14, [pc, #16]	; d734c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d733c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7340:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7344:	4770      	bx	lr
    }
    return 0.0f;
   d7346:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7350 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   d734a:	4770      	bx	lr
   d734c:	42c80000 	.word	0x42c80000
   d7350:	00000000 	.word	0x00000000

000d7354 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d7354:	8983      	ldrh	r3, [r0, #12]
   d7356:	b17b      	cbz	r3, d7378 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d7358:	6a03      	ldr	r3, [r0, #32]
   d735a:	2b00      	cmp	r3, #0
   d735c:	db0c      	blt.n	d7378 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d735e:	ee07 3a90 	vmov	s15, r3
   d7362:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7380 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d7366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d736a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d736e:	eddf 7a05 	vldr	s15, [pc, #20]	; d7384 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d7372:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7376:	4770      	bx	lr
    }
    return -1.0f;
   d7378:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d737c:	4770      	bx	lr
   d737e:	bf00      	nop
   d7380:	477fff00 	.word	0x477fff00
   d7384:	42c80000 	.word	0x42c80000

000d7388 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d7388:	8983      	ldrh	r3, [r0, #12]
   d738a:	b163      	cbz	r3, d73a6 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   d738c:	6983      	ldr	r3, [r0, #24]
   d738e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7392:	d008      	beq.n	d73a6 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   d7394:	ee07 3a90 	vmov	s15, r3
   d7398:	ed9f 7a04 	vldr	s14, [pc, #16]	; d73ac <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d739c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d73a0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d73a4:	4770      	bx	lr
    }
    return 0.0f;
   d73a6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d73b0 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   d73aa:	4770      	bx	lr
   d73ac:	42c80000 	.word	0x42c80000
   d73b0:	00000000 	.word	0x00000000

000d73b4 <_ZNK10WiFiSignalcvaEv>:
}
   d73b4:	f990 0004 	ldrsb.w	r0, [r0, #4]
   d73b8:	4770      	bx	lr

000d73ba <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d73ba:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d73bc:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d73be:	4606      	mov	r6, r0
    inf_ = inf;
   d73c0:	f100 050c 	add.w	r5, r0, #12
   d73c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d73c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d73c8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d73cc:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d73d0:	6933      	ldr	r3, [r6, #16]
   d73d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d73d6:	bf0e      	itee	eq
   d73d8:	2302      	moveq	r3, #2
   d73da:	2264      	movne	r2, #100	; 0x64
   d73dc:	fb93 f3f2 	sdivne	r3, r3, r2
   d73e0:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d73e2:	69b3      	ldr	r3, [r6, #24]
   d73e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d73e8:	bf0c      	ite	eq
   d73ea:	2300      	moveq	r3, #0
   d73ec:	2264      	movne	r2, #100	; 0x64
}
   d73ee:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d73f2:	bf18      	it	ne
   d73f4:	fb93 f3f2 	sdivne	r3, r3, r2
   d73f8:	60b3      	str	r3, [r6, #8]
}
   d73fa:	bd70      	pop	{r4, r5, r6, pc}

000d73fc <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d73fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   d7400:	4b16      	ldr	r3, [pc, #88]	; (d745c <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d7402:	6003      	str	r3, [r0, #0]
   d7404:	2500      	movs	r5, #0
   d7406:	460f      	mov	r7, r1
   d7408:	f04f 0802 	mov.w	r8, #2
   d740c:	2618      	movs	r6, #24
   d740e:	e9c0 8501 	strd	r8, r5, [r0, #4]
   d7412:	b086      	sub	sp, #24
   d7414:	4632      	mov	r2, r6
   d7416:	4629      	mov	r1, r5
   d7418:	4604      	mov	r4, r0
   d741a:	300c      	adds	r0, #12
   d741c:	f001 f9ac 	bl	d8778 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7420:	6878      	ldr	r0, [r7, #4]
   d7422:	462a      	mov	r2, r5
   d7424:	4629      	mov	r1, r5
   d7426:	f7fe fd4f 	bl	d5ec8 <network_ready>
   d742a:	b180      	cbz	r0, d744e <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d742c:	4632      	mov	r2, r6
   d742e:	4629      	mov	r1, r5
   d7430:	4668      	mov	r0, sp
   d7432:	f001 f9a1 	bl	d8778 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d7436:	462a      	mov	r2, r5
   d7438:	4669      	mov	r1, sp
   d743a:	4628      	mov	r0, r5
        info.size = sizeof(info);
   d743c:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d7440:	f7fe fce6 	bl	d5e10 <wlan_connected_info>
        if (r == 0) {
   d7444:	b938      	cbnz	r0, d7456 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   d7446:	4669      	mov	r1, sp
   d7448:	4620      	mov	r0, r4
   d744a:	f7ff ffb6 	bl	d73ba <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   d744e:	4620      	mov	r0, r4
   d7450:	b006      	add	sp, #24
   d7452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   d7456:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   d745a:	e7f8      	b.n	d744e <_ZN5spark9WiFiClass4RSSIEv+0x52>
   d745c:	000d9244 	.word	0x000d9244

000d7460 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7460:	4b02      	ldr	r3, [pc, #8]	; (d746c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7462:	2204      	movs	r2, #4
   d7464:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7466:	4a02      	ldr	r2, [pc, #8]	; (d7470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7468:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d746a:	4770      	bx	lr
   d746c:	2003e7b0 	.word	0x2003e7b0
   d7470:	000d9210 	.word	0x000d9210

000d7474 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7474:	2300      	movs	r3, #0
   d7476:	6840      	ldr	r0, [r0, #4]
   d7478:	461a      	mov	r2, r3
   d747a:	f7fe bd0d 	b.w	d5e98 <network_connect>

000d747e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d747e:	6840      	ldr	r0, [r0, #4]
   d7480:	2200      	movs	r2, #0
   d7482:	2102      	movs	r1, #2
   d7484:	f7fe bd18 	b.w	d5eb8 <network_disconnect>

000d7488 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7488:	2200      	movs	r2, #0
   d748a:	6840      	ldr	r0, [r0, #4]
   d748c:	4611      	mov	r1, r2
   d748e:	f7fe bd0b 	b.w	d5ea8 <network_connecting>

000d7492 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7492:	2200      	movs	r2, #0
   d7494:	6840      	ldr	r0, [r0, #4]
   d7496:	4611      	mov	r1, r2
   d7498:	f7fe bd16 	b.w	d5ec8 <network_ready>

000d749c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d749c:	2300      	movs	r3, #0
   d749e:	6840      	ldr	r0, [r0, #4]
   d74a0:	461a      	mov	r2, r3
   d74a2:	4619      	mov	r1, r3
   d74a4:	f7fe bd18 	b.w	d5ed8 <network_on>

000d74a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d74a8:	2300      	movs	r3, #0
   d74aa:	6840      	ldr	r0, [r0, #4]
   d74ac:	461a      	mov	r2, r3
   d74ae:	4619      	mov	r1, r3
   d74b0:	f7fe bd1a 	b.w	d5ee8 <network_off>

000d74b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74b4:	6840      	ldr	r0, [r0, #4]
   d74b6:	2200      	movs	r2, #0
   d74b8:	f081 0101 	eor.w	r1, r1, #1
   d74bc:	f7fe bd1c 	b.w	d5ef8 <network_listen>

000d74c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74c0:	6840      	ldr	r0, [r0, #4]
   d74c2:	2200      	movs	r2, #0
   d74c4:	f7fe bd38 	b.w	d5f38 <network_set_listen_timeout>

000d74c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d74c8:	2200      	movs	r2, #0
   d74ca:	6840      	ldr	r0, [r0, #4]
   d74cc:	4611      	mov	r1, r2
   d74ce:	f7fe bd3b 	b.w	d5f48 <network_get_listen_timeout>

000d74d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d74d2:	2200      	movs	r2, #0
   d74d4:	6840      	ldr	r0, [r0, #4]
   d74d6:	4611      	mov	r1, r2
   d74d8:	f7fe bd16 	b.w	d5f08 <network_listening>

000d74dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d74dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74e0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d74e2:	b095      	sub	sp, #84	; 0x54
   d74e4:	4616      	mov	r6, r2
   d74e6:	460d      	mov	r5, r1
   d74e8:	4607      	mov	r7, r0
    IPAddress addr;
   d74ea:	f7ff fa13 	bl	d6914 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d74ee:	4621      	mov	r1, r4
   d74f0:	2218      	movs	r2, #24
   d74f2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d74f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d74f6:	f001 f93f 	bl	d8778 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d74fa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d74fc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7500:	4621      	mov	r1, r4
   d7502:	466b      	mov	r3, sp
   d7504:	aa0c      	add	r2, sp, #48	; 0x30
   d7506:	4630      	mov	r0, r6
   d7508:	f7fe fad2 	bl	d5ab0 <netdb_getaddrinfo>
    if (!r) {
   d750c:	4604      	mov	r4, r0
   d750e:	2800      	cmp	r0, #0
   d7510:	d146      	bne.n	d75a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7512:	4602      	mov	r2, r0
   d7514:	2101      	movs	r1, #1
   d7516:	6868      	ldr	r0, [r5, #4]
   d7518:	f7fe fcd6 	bl	d5ec8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d751c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d751e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7520:	4622      	mov	r2, r4
   d7522:	6868      	ldr	r0, [r5, #4]
   d7524:	f7fe fcd0 	bl	d5ec8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7528:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d752a:	4681      	mov	r9, r0
        bool ok = false;
   d752c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d752e:	2e00      	cmp	r6, #0
   d7530:	d036      	beq.n	d75a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7532:	2900      	cmp	r1, #0
   d7534:	d134      	bne.n	d75a0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7536:	6873      	ldr	r3, [r6, #4]
   d7538:	2b02      	cmp	r3, #2
   d753a:	d003      	beq.n	d7544 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d753c:	2b0a      	cmp	r3, #10
   d753e:	d00b      	beq.n	d7558 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7540:	69f6      	ldr	r6, [r6, #28]
   d7542:	e7f4      	b.n	d752e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7544:	f1b8 0f00 	cmp.w	r8, #0
   d7548:	d004      	beq.n	d7554 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d754a:	6971      	ldr	r1, [r6, #20]
   d754c:	4638      	mov	r0, r7
   d754e:	3104      	adds	r1, #4
   d7550:	f7ff fa23 	bl	d699a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7554:	4641      	mov	r1, r8
   d7556:	e7f3      	b.n	d7540 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7558:	f1b9 0f00 	cmp.w	r9, #0
   d755c:	d101      	bne.n	d7562 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d755e:	4649      	mov	r1, r9
   d7560:	e7ee      	b.n	d7540 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7562:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7564:	2210      	movs	r2, #16
   d7566:	a801      	add	r0, sp, #4
   d7568:	f001 f906 	bl	d8778 <memset>
                    a.v = 6;
   d756c:	2306      	movs	r3, #6
   d756e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7572:	ad01      	add	r5, sp, #4
   d7574:	f104 0308 	add.w	r3, r4, #8
   d7578:	3418      	adds	r4, #24
   d757a:	6818      	ldr	r0, [r3, #0]
   d757c:	6859      	ldr	r1, [r3, #4]
   d757e:	462a      	mov	r2, r5
   d7580:	c203      	stmia	r2!, {r0, r1}
   d7582:	3308      	adds	r3, #8
   d7584:	42a3      	cmp	r3, r4
   d7586:	4615      	mov	r5, r2
   d7588:	d1f7      	bne.n	d757a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d758a:	a901      	add	r1, sp, #4
   d758c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d758e:	ad07      	add	r5, sp, #28
   d7590:	f7ff f9ce 	bl	d6930 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7596:	1d3c      	adds	r4, r7, #4
   d7598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d759a:	682b      	ldr	r3, [r5, #0]
   d759c:	7023      	strb	r3, [r4, #0]
   d759e:	e7de      	b.n	d755e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d75a0:	9800      	ldr	r0, [sp, #0]
   d75a2:	f7fe fa7d 	bl	d5aa0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d75a6:	4638      	mov	r0, r7
   d75a8:	b015      	add	sp, #84	; 0x54
   d75aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d75b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d75b0:	4b02      	ldr	r3, [pc, #8]	; (d75bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d75b2:	4a03      	ldr	r2, [pc, #12]	; (d75c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75b4:	601a      	str	r2, [r3, #0]
   d75b6:	2200      	movs	r2, #0
   d75b8:	605a      	str	r2, [r3, #4]

} // spark
   d75ba:	4770      	bx	lr
   d75bc:	2003e7b8 	.word	0x2003e7b8
   d75c0:	000d9268 	.word	0x000d9268

000d75c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d75c4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d75c6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d75c8:	d902      	bls.n	d75d0 <pinAvailable+0xc>
    return false;
   d75ca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d75cc:	b002      	add	sp, #8
   d75ce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d75d0:	f1a0 030b 	sub.w	r3, r0, #11
   d75d4:	2b02      	cmp	r3, #2
   d75d6:	d81a      	bhi.n	d760e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d75d8:	4c17      	ldr	r4, [pc, #92]	; (d7638 <pinAvailable+0x74>)
   d75da:	7821      	ldrb	r1, [r4, #0]
   d75dc:	f3bf 8f5b 	dmb	ish
   d75e0:	f011 0101 	ands.w	r1, r1, #1
   d75e4:	d10b      	bne.n	d75fe <pinAvailable+0x3a>
   d75e6:	4620      	mov	r0, r4
   d75e8:	9101      	str	r1, [sp, #4]
   d75ea:	f7fc fd5c 	bl	d40a6 <__cxa_guard_acquire>
   d75ee:	9901      	ldr	r1, [sp, #4]
   d75f0:	b128      	cbz	r0, d75fe <pinAvailable+0x3a>
   d75f2:	4812      	ldr	r0, [pc, #72]	; (d763c <pinAvailable+0x78>)
   d75f4:	f7fe fd2e 	bl	d6054 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d75f8:	4620      	mov	r0, r4
   d75fa:	f7fc fd59 	bl	d40b0 <__cxa_guard_release>
   d75fe:	4b0f      	ldr	r3, [pc, #60]	; (d763c <pinAvailable+0x78>)
   d7600:	7818      	ldrb	r0, [r3, #0]
   d7602:	f7fe fbc5 	bl	d5d90 <hal_spi_is_enabled>
   d7606:	2800      	cmp	r0, #0
   d7608:	d1df      	bne.n	d75ca <pinAvailable+0x6>
  return true; // 'pin' is available
   d760a:	2001      	movs	r0, #1
   d760c:	e7de      	b.n	d75cc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d760e:	2801      	cmp	r0, #1
   d7610:	d809      	bhi.n	d7626 <pinAvailable+0x62>
   d7612:	f000 f8b3 	bl	d777c <_Z19__fetch_global_Wirev>
   d7616:	2100      	movs	r1, #0
   d7618:	7c00      	ldrb	r0, [r0, #16]
   d761a:	f7fe fb69 	bl	d5cf0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d761e:	f080 0001 	eor.w	r0, r0, #1
   d7622:	b2c0      	uxtb	r0, r0
   d7624:	e7d2      	b.n	d75cc <pinAvailable+0x8>
   d7626:	3809      	subs	r0, #9
   d7628:	2801      	cmp	r0, #1
   d762a:	d8ee      	bhi.n	d760a <pinAvailable+0x46>
   d762c:	f7ff faa6 	bl	d6b7c <_Z22__fetch_global_Serial1v>
   d7630:	7c00      	ldrb	r0, [r0, #16]
   d7632:	f7fe fb0d 	bl	d5c50 <hal_usart_is_enabled>
   d7636:	e7f2      	b.n	d761e <pinAvailable+0x5a>
   d7638:	2003e7c0 	.word	0x2003e7c0
   d763c:	2003e7c4 	.word	0x2003e7c4

000d7640 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7640:	2823      	cmp	r0, #35	; 0x23
{
   d7642:	b538      	push	{r3, r4, r5, lr}
   d7644:	4604      	mov	r4, r0
   d7646:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7648:	d80a      	bhi.n	d7660 <pinMode+0x20>
   d764a:	29ff      	cmp	r1, #255	; 0xff
   d764c:	d008      	beq.n	d7660 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d764e:	f7ff ffb9 	bl	d75c4 <pinAvailable>
   d7652:	b128      	cbz	r0, d7660 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7654:	4629      	mov	r1, r5
   d7656:	4620      	mov	r0, r4
}
   d7658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d765c:	f7fe ba38 	b.w	d5ad0 <HAL_Pin_Mode>
}
   d7660:	bd38      	pop	{r3, r4, r5, pc}

000d7662 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7662:	b538      	push	{r3, r4, r5, lr}
   d7664:	4604      	mov	r4, r0
   d7666:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7668:	f7fe fa3a 	bl	d5ae0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d766c:	28ff      	cmp	r0, #255	; 0xff
   d766e:	d010      	beq.n	d7692 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7670:	2806      	cmp	r0, #6
   d7672:	d804      	bhi.n	d767e <digitalWrite+0x1c>
   d7674:	234d      	movs	r3, #77	; 0x4d
   d7676:	fa23 f000 	lsr.w	r0, r3, r0
   d767a:	07c3      	lsls	r3, r0, #31
   d767c:	d409      	bmi.n	d7692 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d767e:	4620      	mov	r0, r4
   d7680:	f7ff ffa0 	bl	d75c4 <pinAvailable>
   d7684:	b128      	cbz	r0, d7692 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7686:	4629      	mov	r1, r5
   d7688:	4620      	mov	r0, r4
}
   d768a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d768e:	f7fe ba2f 	b.w	d5af0 <HAL_GPIO_Write>
}
   d7692:	bd38      	pop	{r3, r4, r5, pc}

000d7694 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7694:	b510      	push	{r4, lr}
   d7696:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7698:	f7fe fa22 	bl	d5ae0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d769c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d769e:	b2db      	uxtb	r3, r3
   d76a0:	2b01      	cmp	r3, #1
   d76a2:	d908      	bls.n	d76b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d76a4:	4620      	mov	r0, r4
   d76a6:	f7ff ff8d 	bl	d75c4 <pinAvailable>
   d76aa:	b120      	cbz	r0, d76b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d76ac:	4620      	mov	r0, r4
}
   d76ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d76b2:	f7fe ba25 	b.w	d5b00 <HAL_GPIO_Read>
}
   d76b6:	2000      	movs	r0, #0
   d76b8:	bd10      	pop	{r4, pc}

000d76ba <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d76ba:	280d      	cmp	r0, #13
{
   d76bc:	b510      	push	{r4, lr}
   d76be:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d76c0:	bf9c      	itt	ls
   d76c2:	340e      	addls	r4, #14
   d76c4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d76c6:	4620      	mov	r0, r4
   d76c8:	f7ff ff7c 	bl	d75c4 <pinAvailable>
   d76cc:	b150      	cbz	r0, d76e4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d76ce:	2103      	movs	r1, #3
   d76d0:	4620      	mov	r0, r4
   d76d2:	f7fe f9f5 	bl	d5ac0 <HAL_Validate_Pin_Function>
   d76d6:	2803      	cmp	r0, #3
   d76d8:	d104      	bne.n	d76e4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d76da:	4620      	mov	r0, r4
}
   d76dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d76e0:	f7fe ba16 	b.w	d5b10 <hal_adc_read>
}
   d76e4:	2000      	movs	r0, #0
   d76e6:	bd10      	pop	{r4, pc}

000d76e8 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   d76e8:	b570      	push	{r4, r5, r6, lr}
   d76ea:	4604      	mov	r4, r0
   d76ec:	460d      	mov	r5, r1
   d76ee:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   d76f0:	f7ff ff68 	bl	d75c4 <pinAvailable>
   d76f4:	b198      	cbz	r0, d771e <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d76f6:	2102      	movs	r1, #2
   d76f8:	4620      	mov	r0, r4
   d76fa:	f7fe f9e1 	bl	d5ac0 <HAL_Validate_Pin_Function>
   d76fe:	2802      	cmp	r0, #2
   d7700:	d10d      	bne.n	d771e <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7702:	4620      	mov	r0, r4
   d7704:	f7fe f9ec 	bl	d5ae0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7708:	2801      	cmp	r0, #1
   d770a:	d001      	beq.n	d7710 <_Z11analogWritetmm+0x28>
   d770c:	2804      	cmp	r0, #4
   d770e:	d106      	bne.n	d771e <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   d7710:	4632      	mov	r2, r6
   d7712:	4629      	mov	r1, r5
   d7714:	4620      	mov	r0, r4
    }
}
   d7716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   d771a:	f7fe ba01 	b.w	d5b20 <hal_pwm_write_with_frequency_ext>
}
   d771e:	bd70      	pop	{r4, r5, r6, pc}

000d7720 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7720:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7722:	4c08      	ldr	r4, [pc, #32]	; (d7744 <_Z21__fetch_global_EEPROMv+0x24>)
   d7724:	7823      	ldrb	r3, [r4, #0]
   d7726:	f3bf 8f5b 	dmb	ish
   d772a:	07db      	lsls	r3, r3, #31
   d772c:	d408      	bmi.n	d7740 <_Z21__fetch_global_EEPROMv+0x20>
   d772e:	4620      	mov	r0, r4
   d7730:	f7fc fcb9 	bl	d40a6 <__cxa_guard_acquire>
   d7734:	b120      	cbz	r0, d7740 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7736:	f7fe fa1b 	bl	d5b70 <HAL_EEPROM_Init>
   d773a:	4620      	mov	r0, r4
   d773c:	f7fc fcb8 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7740:	4801      	ldr	r0, [pc, #4]	; (d7748 <_Z21__fetch_global_EEPROMv+0x28>)
   d7742:	bd10      	pop	{r4, pc}
   d7744:	2003e7d0 	.word	0x2003e7d0
   d7748:	2003e7d4 	.word	0x2003e7d4

000d774c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d774c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d774e:	2300      	movs	r3, #0
   d7750:	2520      	movs	r5, #32
   d7752:	8043      	strh	r3, [r0, #2]
   d7754:	2314      	movs	r3, #20
{
   d7756:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7758:	8003      	strh	r3, [r0, #0]
   d775a:	6085      	str	r5, [r0, #8]
   d775c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d775e:	4906      	ldr	r1, [pc, #24]	; (d7778 <_Z17acquireWireBufferv+0x2c>)
   d7760:	4628      	mov	r0, r5
   d7762:	f000 f83a 	bl	d77da <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7766:	4904      	ldr	r1, [pc, #16]	; (d7778 <_Z17acquireWireBufferv+0x2c>)
	};
   d7768:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d776a:	4628      	mov	r0, r5
   d776c:	f000 f835 	bl	d77da <_ZnajRKSt9nothrow_t>
	};
   d7770:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7772:	4620      	mov	r0, r4
   d7774:	bd38      	pop	{r3, r4, r5, pc}
   d7776:	bf00      	nop
   d7778:	000d9294 	.word	0x000d9294

000d777c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d777c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d777e:	4d0f      	ldr	r5, [pc, #60]	; (d77bc <_Z19__fetch_global_Wirev+0x40>)
   d7780:	7829      	ldrb	r1, [r5, #0]
   d7782:	f3bf 8f5b 	dmb	ish
   d7786:	f011 0401 	ands.w	r4, r1, #1
{
   d778a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d778c:	d113      	bne.n	d77b6 <_Z19__fetch_global_Wirev+0x3a>
   d778e:	4628      	mov	r0, r5
   d7790:	f7fc fc89 	bl	d40a6 <__cxa_guard_acquire>
   d7794:	b178      	cbz	r0, d77b6 <_Z19__fetch_global_Wirev+0x3a>
   d7796:	a801      	add	r0, sp, #4
   d7798:	f7ff ffd8 	bl	d774c <_Z17acquireWireBufferv>
   d779c:	aa01      	add	r2, sp, #4
   d779e:	4621      	mov	r1, r4
   d77a0:	4807      	ldr	r0, [pc, #28]	; (d77c0 <_Z19__fetch_global_Wirev+0x44>)
   d77a2:	f7ff fa41 	bl	d6c28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d77a6:	4628      	mov	r0, r5
   d77a8:	f7fc fc82 	bl	d40b0 <__cxa_guard_release>
   d77ac:	4a05      	ldr	r2, [pc, #20]	; (d77c4 <_Z19__fetch_global_Wirev+0x48>)
   d77ae:	4906      	ldr	r1, [pc, #24]	; (d77c8 <_Z19__fetch_global_Wirev+0x4c>)
   d77b0:	4803      	ldr	r0, [pc, #12]	; (d77c0 <_Z19__fetch_global_Wirev+0x44>)
   d77b2:	f000 f80b 	bl	d77cc <__aeabi_atexit>
	return wire;
}
   d77b6:	4802      	ldr	r0, [pc, #8]	; (d77c0 <_Z19__fetch_global_Wirev+0x44>)
   d77b8:	b007      	add	sp, #28
   d77ba:	bd30      	pop	{r4, r5, pc}
   d77bc:	2003e7d8 	.word	0x2003e7d8
   d77c0:	2003e7dc 	.word	0x2003e7dc
   d77c4:	2003dea8 	.word	0x2003dea8
   d77c8:	000d6bd1 	.word	0x000d6bd1

000d77cc <__aeabi_atexit>:
   d77cc:	460b      	mov	r3, r1
   d77ce:	4601      	mov	r1, r0
   d77d0:	4618      	mov	r0, r3
   d77d2:	f000 bfb5 	b.w	d8740 <__cxa_atexit>

000d77d6 <_ZdlPvj>:
   d77d6:	f7fc bc62 	b.w	d409e <_ZdlPv>

000d77da <_ZnajRKSt9nothrow_t>:
   d77da:	f7fc bc5e 	b.w	d409a <_Znaj>
	...

000d77e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d77e0:	4901      	ldr	r1, [pc, #4]	; (d77e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d77e2:	f000 b8f9 	b.w	d79d8 <_ZNKSt9type_infoeqERKS_>
   d77e6:	bf00      	nop
   d77e8:	000d92b0 	.word	0x000d92b0

000d77ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d77ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d77ee:	2400      	movs	r4, #0
   d77f0:	2310      	movs	r3, #16
   d77f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d77f6:	6803      	ldr	r3, [r0, #0]
   d77f8:	9400      	str	r4, [sp, #0]
   d77fa:	699e      	ldr	r6, [r3, #24]
   d77fc:	f88d 4004 	strb.w	r4, [sp, #4]
   d7800:	4615      	mov	r5, r2
   d7802:	466b      	mov	r3, sp
   d7804:	6812      	ldr	r2, [r2, #0]
   d7806:	47b0      	blx	r6
   d7808:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d780c:	f003 0306 	and.w	r3, r3, #6
   d7810:	2b06      	cmp	r3, #6
   d7812:	bf03      	ittte	eq
   d7814:	9b00      	ldreq	r3, [sp, #0]
   d7816:	602b      	streq	r3, [r5, #0]
   d7818:	2001      	moveq	r0, #1
   d781a:	4620      	movne	r0, r4
   d781c:	b004      	add	sp, #16
   d781e:	bd70      	pop	{r4, r5, r6, pc}

000d7820 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7820:	9800      	ldr	r0, [sp, #0]
   d7822:	4290      	cmp	r0, r2
   d7824:	bf14      	ite	ne
   d7826:	2001      	movne	r0, #1
   d7828:	2006      	moveq	r0, #6
   d782a:	4770      	bx	lr

000d782c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d782c:	b510      	push	{r4, lr}
   d782e:	4b03      	ldr	r3, [pc, #12]	; (d783c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7830:	6003      	str	r3, [r0, #0]
   d7832:	4604      	mov	r4, r0
   d7834:	f000 f8cd 	bl	d79d2 <_ZNSt9type_infoD1Ev>
   d7838:	4620      	mov	r0, r4
   d783a:	bd10      	pop	{r4, pc}
   d783c:	000d92f0 	.word	0x000d92f0

000d7840 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7840:	b510      	push	{r4, lr}
   d7842:	4604      	mov	r4, r0
   d7844:	f7ff fff2 	bl	d782c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7848:	4620      	mov	r0, r4
   d784a:	2108      	movs	r1, #8
   d784c:	f7ff ffc3 	bl	d77d6 <_ZdlPvj>
   d7850:	4620      	mov	r0, r4
   d7852:	bd10      	pop	{r4, pc}

000d7854 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7858:	461f      	mov	r7, r3
   d785a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d785e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7862:	4598      	cmp	r8, r3
   d7864:	4606      	mov	r6, r0
   d7866:	4615      	mov	r5, r2
   d7868:	d107      	bne.n	d787a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d786a:	9907      	ldr	r1, [sp, #28]
   d786c:	f000 f8b4 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d7870:	b118      	cbz	r0, d787a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7872:	7165      	strb	r5, [r4, #5]
   d7874:	2000      	movs	r0, #0
   d7876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d787a:	4639      	mov	r1, r7
   d787c:	4630      	mov	r0, r6
   d787e:	f000 f8ab 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d7882:	2800      	cmp	r0, #0
   d7884:	d0f6      	beq.n	d7874 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7886:	2301      	movs	r3, #1
   d7888:	f8c4 8000 	str.w	r8, [r4]
   d788c:	7125      	strb	r5, [r4, #4]
   d788e:	71a3      	strb	r3, [r4, #6]
   d7890:	e7f0      	b.n	d7874 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7892 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7892:	b538      	push	{r3, r4, r5, lr}
   d7894:	4615      	mov	r5, r2
   d7896:	461c      	mov	r4, r3
   d7898:	f000 f89e 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d789c:	b120      	cbz	r0, d78a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d789e:	2308      	movs	r3, #8
   d78a0:	60e3      	str	r3, [r4, #12]
   d78a2:	2306      	movs	r3, #6
   d78a4:	6025      	str	r5, [r4, #0]
   d78a6:	7123      	strb	r3, [r4, #4]
   d78a8:	bd38      	pop	{r3, r4, r5, pc}

000d78aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d78aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d78ac:	4605      	mov	r5, r0
   d78ae:	460c      	mov	r4, r1
   d78b0:	9201      	str	r2, [sp, #4]
   d78b2:	461e      	mov	r6, r3
   d78b4:	f000 f890 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d78b8:	b950      	cbnz	r0, d78d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d78ba:	2e03      	cmp	r6, #3
   d78bc:	d808      	bhi.n	d78d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d78be:	6823      	ldr	r3, [r4, #0]
   d78c0:	9a01      	ldr	r2, [sp, #4]
   d78c2:	695b      	ldr	r3, [r3, #20]
   d78c4:	4629      	mov	r1, r5
   d78c6:	4620      	mov	r0, r4
   d78c8:	b002      	add	sp, #8
   d78ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d78ce:	4718      	bx	r3
   d78d0:	b002      	add	sp, #8
   d78d2:	bd70      	pop	{r4, r5, r6, pc}

000d78d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d78d4:	b510      	push	{r4, lr}
   d78d6:	4b03      	ldr	r3, [pc, #12]	; (d78e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d78d8:	6003      	str	r3, [r0, #0]
   d78da:	4604      	mov	r4, r0
   d78dc:	f7ff ffa6 	bl	d782c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d78e0:	4620      	mov	r0, r4
   d78e2:	bd10      	pop	{r4, pc}
   d78e4:	000d9350 	.word	0x000d9350

000d78e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d78e8:	b510      	push	{r4, lr}
   d78ea:	4604      	mov	r4, r0
   d78ec:	f7ff fff2 	bl	d78d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d78f0:	4620      	mov	r0, r4
   d78f2:	210c      	movs	r1, #12
   d78f4:	f7ff ff6f 	bl	d77d6 <_ZdlPvj>
   d78f8:	4620      	mov	r0, r4
   d78fa:	bd10      	pop	{r4, pc}

000d78fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d78fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d78fe:	9f08      	ldr	r7, [sp, #32]
   d7900:	4297      	cmp	r7, r2
   d7902:	4605      	mov	r5, r0
   d7904:	460e      	mov	r6, r1
   d7906:	4614      	mov	r4, r2
   d7908:	d00a      	beq.n	d7920 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d790a:	68a8      	ldr	r0, [r5, #8]
   d790c:	6802      	ldr	r2, [r0, #0]
   d790e:	9708      	str	r7, [sp, #32]
   d7910:	6a15      	ldr	r5, [r2, #32]
   d7912:	4631      	mov	r1, r6
   d7914:	4622      	mov	r2, r4
   d7916:	46ac      	mov	ip, r5
   d7918:	b003      	add	sp, #12
   d791a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d791e:	4760      	bx	ip
   d7920:	4619      	mov	r1, r3
   d7922:	9301      	str	r3, [sp, #4]
   d7924:	f000 f858 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d7928:	9b01      	ldr	r3, [sp, #4]
   d792a:	2800      	cmp	r0, #0
   d792c:	d0ed      	beq.n	d790a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d792e:	2006      	movs	r0, #6
   d7930:	b003      	add	sp, #12
   d7932:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7934 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7934:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7938:	460d      	mov	r5, r1
   d793a:	4619      	mov	r1, r3
   d793c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7940:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7944:	4681      	mov	r9, r0
   d7946:	4617      	mov	r7, r2
   d7948:	4698      	mov	r8, r3
   d794a:	f000 f845 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d794e:	b190      	cbz	r0, d7976 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7950:	2d00      	cmp	r5, #0
   d7952:	6034      	str	r4, [r6, #0]
   d7954:	7137      	strb	r7, [r6, #4]
   d7956:	db09      	blt.n	d796c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7958:	1961      	adds	r1, r4, r5
   d795a:	458a      	cmp	sl, r1
   d795c:	bf0c      	ite	eq
   d795e:	2106      	moveq	r1, #6
   d7960:	2101      	movne	r1, #1
   d7962:	71b1      	strb	r1, [r6, #6]
   d7964:	2000      	movs	r0, #0
   d7966:	b001      	add	sp, #4
   d7968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d796c:	3502      	adds	r5, #2
   d796e:	d1f9      	bne.n	d7964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7970:	2301      	movs	r3, #1
   d7972:	71b3      	strb	r3, [r6, #6]
   d7974:	e7f6      	b.n	d7964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7976:	4554      	cmp	r4, sl
   d7978:	d106      	bne.n	d7988 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d797a:	4659      	mov	r1, fp
   d797c:	4648      	mov	r0, r9
   d797e:	f000 f82b 	bl	d79d8 <_ZNKSt9type_infoeqERKS_>
   d7982:	b108      	cbz	r0, d7988 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7984:	7177      	strb	r7, [r6, #5]
   d7986:	e7ed      	b.n	d7964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7988:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d798c:	6803      	ldr	r3, [r0, #0]
   d798e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7992:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7996:	69dc      	ldr	r4, [r3, #28]
   d7998:	463a      	mov	r2, r7
   d799a:	4643      	mov	r3, r8
   d799c:	4629      	mov	r1, r5
   d799e:	46a4      	mov	ip, r4
   d79a0:	b001      	add	sp, #4
   d79a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79a6:	4760      	bx	ip

000d79a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d79a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79ac:	4607      	mov	r7, r0
   d79ae:	460c      	mov	r4, r1
   d79b0:	4615      	mov	r5, r2
   d79b2:	461e      	mov	r6, r3
   d79b4:	f7ff ff6d 	bl	d7892 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d79b8:	b948      	cbnz	r0, d79ce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d79ba:	68b8      	ldr	r0, [r7, #8]
   d79bc:	6803      	ldr	r3, [r0, #0]
   d79be:	699f      	ldr	r7, [r3, #24]
   d79c0:	462a      	mov	r2, r5
   d79c2:	4633      	mov	r3, r6
   d79c4:	4621      	mov	r1, r4
   d79c6:	46bc      	mov	ip, r7
   d79c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d79cc:	4760      	bx	ip
   d79ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d79d2 <_ZNSt9type_infoD1Ev>:
   d79d2:	4770      	bx	lr

000d79d4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d79d4:	2000      	movs	r0, #0
   d79d6:	4770      	bx	lr

000d79d8 <_ZNKSt9type_infoeqERKS_>:
   d79d8:	4281      	cmp	r1, r0
   d79da:	b508      	push	{r3, lr}
   d79dc:	d00e      	beq.n	d79fc <_ZNKSt9type_infoeqERKS_+0x24>
   d79de:	6840      	ldr	r0, [r0, #4]
   d79e0:	7803      	ldrb	r3, [r0, #0]
   d79e2:	2b2a      	cmp	r3, #42	; 0x2a
   d79e4:	d00c      	beq.n	d7a00 <_ZNKSt9type_infoeqERKS_+0x28>
   d79e6:	6849      	ldr	r1, [r1, #4]
   d79e8:	780b      	ldrb	r3, [r1, #0]
   d79ea:	2b2a      	cmp	r3, #42	; 0x2a
   d79ec:	bf08      	it	eq
   d79ee:	3101      	addeq	r1, #1
   d79f0:	f000 feee 	bl	d87d0 <strcmp>
   d79f4:	fab0 f080 	clz	r0, r0
   d79f8:	0940      	lsrs	r0, r0, #5
   d79fa:	bd08      	pop	{r3, pc}
   d79fc:	2001      	movs	r0, #1
   d79fe:	e7fc      	b.n	d79fa <_ZNKSt9type_infoeqERKS_+0x22>
   d7a00:	2000      	movs	r0, #0
   d7a02:	e7fa      	b.n	d79fa <_ZNKSt9type_infoeqERKS_+0x22>

000d7a04 <__aeabi_drsub>:
   d7a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7a08:	e002      	b.n	d7a10 <__adddf3>
   d7a0a:	bf00      	nop

000d7a0c <__aeabi_dsub>:
   d7a0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7a10 <__adddf3>:
   d7a10:	b530      	push	{r4, r5, lr}
   d7a12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7a16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7a1a:	ea94 0f05 	teq	r4, r5
   d7a1e:	bf08      	it	eq
   d7a20:	ea90 0f02 	teqeq	r0, r2
   d7a24:	bf1f      	itttt	ne
   d7a26:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7a2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7a2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7a32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7a36:	f000 80e2 	beq.w	d7bfe <__adddf3+0x1ee>
   d7a3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7a3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7a42:	bfb8      	it	lt
   d7a44:	426d      	neglt	r5, r5
   d7a46:	dd0c      	ble.n	d7a62 <__adddf3+0x52>
   d7a48:	442c      	add	r4, r5
   d7a4a:	ea80 0202 	eor.w	r2, r0, r2
   d7a4e:	ea81 0303 	eor.w	r3, r1, r3
   d7a52:	ea82 0000 	eor.w	r0, r2, r0
   d7a56:	ea83 0101 	eor.w	r1, r3, r1
   d7a5a:	ea80 0202 	eor.w	r2, r0, r2
   d7a5e:	ea81 0303 	eor.w	r3, r1, r3
   d7a62:	2d36      	cmp	r5, #54	; 0x36
   d7a64:	bf88      	it	hi
   d7a66:	bd30      	pophi	{r4, r5, pc}
   d7a68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7a6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7a74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7a78:	d002      	beq.n	d7a80 <__adddf3+0x70>
   d7a7a:	4240      	negs	r0, r0
   d7a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7a84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a8c:	d002      	beq.n	d7a94 <__adddf3+0x84>
   d7a8e:	4252      	negs	r2, r2
   d7a90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a94:	ea94 0f05 	teq	r4, r5
   d7a98:	f000 80a7 	beq.w	d7bea <__adddf3+0x1da>
   d7a9c:	f1a4 0401 	sub.w	r4, r4, #1
   d7aa0:	f1d5 0e20 	rsbs	lr, r5, #32
   d7aa4:	db0d      	blt.n	d7ac2 <__adddf3+0xb2>
   d7aa6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7aaa:	fa22 f205 	lsr.w	r2, r2, r5
   d7aae:	1880      	adds	r0, r0, r2
   d7ab0:	f141 0100 	adc.w	r1, r1, #0
   d7ab4:	fa03 f20e 	lsl.w	r2, r3, lr
   d7ab8:	1880      	adds	r0, r0, r2
   d7aba:	fa43 f305 	asr.w	r3, r3, r5
   d7abe:	4159      	adcs	r1, r3
   d7ac0:	e00e      	b.n	d7ae0 <__adddf3+0xd0>
   d7ac2:	f1a5 0520 	sub.w	r5, r5, #32
   d7ac6:	f10e 0e20 	add.w	lr, lr, #32
   d7aca:	2a01      	cmp	r2, #1
   d7acc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7ad0:	bf28      	it	cs
   d7ad2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7ad6:	fa43 f305 	asr.w	r3, r3, r5
   d7ada:	18c0      	adds	r0, r0, r3
   d7adc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7ae0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ae4:	d507      	bpl.n	d7af6 <__adddf3+0xe6>
   d7ae6:	f04f 0e00 	mov.w	lr, #0
   d7aea:	f1dc 0c00 	rsbs	ip, ip, #0
   d7aee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7af2:	eb6e 0101 	sbc.w	r1, lr, r1
   d7af6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7afa:	d31b      	bcc.n	d7b34 <__adddf3+0x124>
   d7afc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7b00:	d30c      	bcc.n	d7b1c <__adddf3+0x10c>
   d7b02:	0849      	lsrs	r1, r1, #1
   d7b04:	ea5f 0030 	movs.w	r0, r0, rrx
   d7b08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7b0c:	f104 0401 	add.w	r4, r4, #1
   d7b10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7b14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7b18:	f080 809a 	bcs.w	d7c50 <__adddf3+0x240>
   d7b1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7b20:	bf08      	it	eq
   d7b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7b26:	f150 0000 	adcs.w	r0, r0, #0
   d7b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b2e:	ea41 0105 	orr.w	r1, r1, r5
   d7b32:	bd30      	pop	{r4, r5, pc}
   d7b34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7b38:	4140      	adcs	r0, r0
   d7b3a:	eb41 0101 	adc.w	r1, r1, r1
   d7b3e:	3c01      	subs	r4, #1
   d7b40:	bf28      	it	cs
   d7b42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7b46:	d2e9      	bcs.n	d7b1c <__adddf3+0x10c>
   d7b48:	f091 0f00 	teq	r1, #0
   d7b4c:	bf04      	itt	eq
   d7b4e:	4601      	moveq	r1, r0
   d7b50:	2000      	moveq	r0, #0
   d7b52:	fab1 f381 	clz	r3, r1
   d7b56:	bf08      	it	eq
   d7b58:	3320      	addeq	r3, #32
   d7b5a:	f1a3 030b 	sub.w	r3, r3, #11
   d7b5e:	f1b3 0220 	subs.w	r2, r3, #32
   d7b62:	da0c      	bge.n	d7b7e <__adddf3+0x16e>
   d7b64:	320c      	adds	r2, #12
   d7b66:	dd08      	ble.n	d7b7a <__adddf3+0x16a>
   d7b68:	f102 0c14 	add.w	ip, r2, #20
   d7b6c:	f1c2 020c 	rsb	r2, r2, #12
   d7b70:	fa01 f00c 	lsl.w	r0, r1, ip
   d7b74:	fa21 f102 	lsr.w	r1, r1, r2
   d7b78:	e00c      	b.n	d7b94 <__adddf3+0x184>
   d7b7a:	f102 0214 	add.w	r2, r2, #20
   d7b7e:	bfd8      	it	le
   d7b80:	f1c2 0c20 	rsble	ip, r2, #32
   d7b84:	fa01 f102 	lsl.w	r1, r1, r2
   d7b88:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b8c:	bfdc      	itt	le
   d7b8e:	ea41 010c 	orrle.w	r1, r1, ip
   d7b92:	4090      	lslle	r0, r2
   d7b94:	1ae4      	subs	r4, r4, r3
   d7b96:	bfa2      	ittt	ge
   d7b98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b9c:	4329      	orrge	r1, r5
   d7b9e:	bd30      	popge	{r4, r5, pc}
   d7ba0:	ea6f 0404 	mvn.w	r4, r4
   d7ba4:	3c1f      	subs	r4, #31
   d7ba6:	da1c      	bge.n	d7be2 <__adddf3+0x1d2>
   d7ba8:	340c      	adds	r4, #12
   d7baa:	dc0e      	bgt.n	d7bca <__adddf3+0x1ba>
   d7bac:	f104 0414 	add.w	r4, r4, #20
   d7bb0:	f1c4 0220 	rsb	r2, r4, #32
   d7bb4:	fa20 f004 	lsr.w	r0, r0, r4
   d7bb8:	fa01 f302 	lsl.w	r3, r1, r2
   d7bbc:	ea40 0003 	orr.w	r0, r0, r3
   d7bc0:	fa21 f304 	lsr.w	r3, r1, r4
   d7bc4:	ea45 0103 	orr.w	r1, r5, r3
   d7bc8:	bd30      	pop	{r4, r5, pc}
   d7bca:	f1c4 040c 	rsb	r4, r4, #12
   d7bce:	f1c4 0220 	rsb	r2, r4, #32
   d7bd2:	fa20 f002 	lsr.w	r0, r0, r2
   d7bd6:	fa01 f304 	lsl.w	r3, r1, r4
   d7bda:	ea40 0003 	orr.w	r0, r0, r3
   d7bde:	4629      	mov	r1, r5
   d7be0:	bd30      	pop	{r4, r5, pc}
   d7be2:	fa21 f004 	lsr.w	r0, r1, r4
   d7be6:	4629      	mov	r1, r5
   d7be8:	bd30      	pop	{r4, r5, pc}
   d7bea:	f094 0f00 	teq	r4, #0
   d7bee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7bf2:	bf06      	itte	eq
   d7bf4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7bf8:	3401      	addeq	r4, #1
   d7bfa:	3d01      	subne	r5, #1
   d7bfc:	e74e      	b.n	d7a9c <__adddf3+0x8c>
   d7bfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7c02:	bf18      	it	ne
   d7c04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7c08:	d029      	beq.n	d7c5e <__adddf3+0x24e>
   d7c0a:	ea94 0f05 	teq	r4, r5
   d7c0e:	bf08      	it	eq
   d7c10:	ea90 0f02 	teqeq	r0, r2
   d7c14:	d005      	beq.n	d7c22 <__adddf3+0x212>
   d7c16:	ea54 0c00 	orrs.w	ip, r4, r0
   d7c1a:	bf04      	itt	eq
   d7c1c:	4619      	moveq	r1, r3
   d7c1e:	4610      	moveq	r0, r2
   d7c20:	bd30      	pop	{r4, r5, pc}
   d7c22:	ea91 0f03 	teq	r1, r3
   d7c26:	bf1e      	ittt	ne
   d7c28:	2100      	movne	r1, #0
   d7c2a:	2000      	movne	r0, #0
   d7c2c:	bd30      	popne	{r4, r5, pc}
   d7c2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7c32:	d105      	bne.n	d7c40 <__adddf3+0x230>
   d7c34:	0040      	lsls	r0, r0, #1
   d7c36:	4149      	adcs	r1, r1
   d7c38:	bf28      	it	cs
   d7c3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7c3e:	bd30      	pop	{r4, r5, pc}
   d7c40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7c44:	bf3c      	itt	cc
   d7c46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7c4a:	bd30      	popcc	{r4, r5, pc}
   d7c4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7c54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7c58:	f04f 0000 	mov.w	r0, #0
   d7c5c:	bd30      	pop	{r4, r5, pc}
   d7c5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7c62:	bf1a      	itte	ne
   d7c64:	4619      	movne	r1, r3
   d7c66:	4610      	movne	r0, r2
   d7c68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7c6c:	bf1c      	itt	ne
   d7c6e:	460b      	movne	r3, r1
   d7c70:	4602      	movne	r2, r0
   d7c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7c76:	bf06      	itte	eq
   d7c78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7c7c:	ea91 0f03 	teqeq	r1, r3
   d7c80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7c84:	bd30      	pop	{r4, r5, pc}
   d7c86:	bf00      	nop

000d7c88 <__aeabi_ui2d>:
   d7c88:	f090 0f00 	teq	r0, #0
   d7c8c:	bf04      	itt	eq
   d7c8e:	2100      	moveq	r1, #0
   d7c90:	4770      	bxeq	lr
   d7c92:	b530      	push	{r4, r5, lr}
   d7c94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c9c:	f04f 0500 	mov.w	r5, #0
   d7ca0:	f04f 0100 	mov.w	r1, #0
   d7ca4:	e750      	b.n	d7b48 <__adddf3+0x138>
   d7ca6:	bf00      	nop

000d7ca8 <__aeabi_i2d>:
   d7ca8:	f090 0f00 	teq	r0, #0
   d7cac:	bf04      	itt	eq
   d7cae:	2100      	moveq	r1, #0
   d7cb0:	4770      	bxeq	lr
   d7cb2:	b530      	push	{r4, r5, lr}
   d7cb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7cb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7cbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7cc0:	bf48      	it	mi
   d7cc2:	4240      	negmi	r0, r0
   d7cc4:	f04f 0100 	mov.w	r1, #0
   d7cc8:	e73e      	b.n	d7b48 <__adddf3+0x138>
   d7cca:	bf00      	nop

000d7ccc <__aeabi_f2d>:
   d7ccc:	0042      	lsls	r2, r0, #1
   d7cce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7cd2:	ea4f 0131 	mov.w	r1, r1, rrx
   d7cd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7cda:	bf1f      	itttt	ne
   d7cdc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7ce0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7ce4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7ce8:	4770      	bxne	lr
   d7cea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7cee:	bf08      	it	eq
   d7cf0:	4770      	bxeq	lr
   d7cf2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7cf6:	bf04      	itt	eq
   d7cf8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7cfc:	4770      	bxeq	lr
   d7cfe:	b530      	push	{r4, r5, lr}
   d7d00:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7d04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7d0c:	e71c      	b.n	d7b48 <__adddf3+0x138>
   d7d0e:	bf00      	nop

000d7d10 <__aeabi_ul2d>:
   d7d10:	ea50 0201 	orrs.w	r2, r0, r1
   d7d14:	bf08      	it	eq
   d7d16:	4770      	bxeq	lr
   d7d18:	b530      	push	{r4, r5, lr}
   d7d1a:	f04f 0500 	mov.w	r5, #0
   d7d1e:	e00a      	b.n	d7d36 <__aeabi_l2d+0x16>

000d7d20 <__aeabi_l2d>:
   d7d20:	ea50 0201 	orrs.w	r2, r0, r1
   d7d24:	bf08      	it	eq
   d7d26:	4770      	bxeq	lr
   d7d28:	b530      	push	{r4, r5, lr}
   d7d2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7d2e:	d502      	bpl.n	d7d36 <__aeabi_l2d+0x16>
   d7d30:	4240      	negs	r0, r0
   d7d32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d36:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7d42:	f43f aed8 	beq.w	d7af6 <__adddf3+0xe6>
   d7d46:	f04f 0203 	mov.w	r2, #3
   d7d4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7d4e:	bf18      	it	ne
   d7d50:	3203      	addne	r2, #3
   d7d52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7d56:	bf18      	it	ne
   d7d58:	3203      	addne	r2, #3
   d7d5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7d5e:	f1c2 0320 	rsb	r3, r2, #32
   d7d62:	fa00 fc03 	lsl.w	ip, r0, r3
   d7d66:	fa20 f002 	lsr.w	r0, r0, r2
   d7d6a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7d6e:	ea40 000e 	orr.w	r0, r0, lr
   d7d72:	fa21 f102 	lsr.w	r1, r1, r2
   d7d76:	4414      	add	r4, r2
   d7d78:	e6bd      	b.n	d7af6 <__adddf3+0xe6>
   d7d7a:	bf00      	nop

000d7d7c <__aeabi_dmul>:
   d7d7c:	b570      	push	{r4, r5, r6, lr}
   d7d7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7d82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7d86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7d8a:	bf1d      	ittte	ne
   d7d8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7d90:	ea94 0f0c 	teqne	r4, ip
   d7d94:	ea95 0f0c 	teqne	r5, ip
   d7d98:	f000 f8de 	bleq	d7f58 <__aeabi_dmul+0x1dc>
   d7d9c:	442c      	add	r4, r5
   d7d9e:	ea81 0603 	eor.w	r6, r1, r3
   d7da2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7da6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7daa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7dae:	bf18      	it	ne
   d7db0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7db4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7dbc:	d038      	beq.n	d7e30 <__aeabi_dmul+0xb4>
   d7dbe:	fba0 ce02 	umull	ip, lr, r0, r2
   d7dc2:	f04f 0500 	mov.w	r5, #0
   d7dc6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7dca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7dce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7dd2:	f04f 0600 	mov.w	r6, #0
   d7dd6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7dda:	f09c 0f00 	teq	ip, #0
   d7dde:	bf18      	it	ne
   d7de0:	f04e 0e01 	orrne.w	lr, lr, #1
   d7de4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7de8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7dec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7df0:	d204      	bcs.n	d7dfc <__aeabi_dmul+0x80>
   d7df2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7df6:	416d      	adcs	r5, r5
   d7df8:	eb46 0606 	adc.w	r6, r6, r6
   d7dfc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7e00:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7e04:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7e08:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7e0c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7e10:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7e14:	bf88      	it	hi
   d7e16:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7e1a:	d81e      	bhi.n	d7e5a <__aeabi_dmul+0xde>
   d7e1c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7e20:	bf08      	it	eq
   d7e22:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7e26:	f150 0000 	adcs.w	r0, r0, #0
   d7e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7e2e:	bd70      	pop	{r4, r5, r6, pc}
   d7e30:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7e34:	ea46 0101 	orr.w	r1, r6, r1
   d7e38:	ea40 0002 	orr.w	r0, r0, r2
   d7e3c:	ea81 0103 	eor.w	r1, r1, r3
   d7e40:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7e44:	bfc2      	ittt	gt
   d7e46:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7e4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7e4e:	bd70      	popgt	{r4, r5, r6, pc}
   d7e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e54:	f04f 0e00 	mov.w	lr, #0
   d7e58:	3c01      	subs	r4, #1
   d7e5a:	f300 80ab 	bgt.w	d7fb4 <__aeabi_dmul+0x238>
   d7e5e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7e62:	bfde      	ittt	le
   d7e64:	2000      	movle	r0, #0
   d7e66:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7e6a:	bd70      	pople	{r4, r5, r6, pc}
   d7e6c:	f1c4 0400 	rsb	r4, r4, #0
   d7e70:	3c20      	subs	r4, #32
   d7e72:	da35      	bge.n	d7ee0 <__aeabi_dmul+0x164>
   d7e74:	340c      	adds	r4, #12
   d7e76:	dc1b      	bgt.n	d7eb0 <__aeabi_dmul+0x134>
   d7e78:	f104 0414 	add.w	r4, r4, #20
   d7e7c:	f1c4 0520 	rsb	r5, r4, #32
   d7e80:	fa00 f305 	lsl.w	r3, r0, r5
   d7e84:	fa20 f004 	lsr.w	r0, r0, r4
   d7e88:	fa01 f205 	lsl.w	r2, r1, r5
   d7e8c:	ea40 0002 	orr.w	r0, r0, r2
   d7e90:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e9c:	fa21 f604 	lsr.w	r6, r1, r4
   d7ea0:	eb42 0106 	adc.w	r1, r2, r6
   d7ea4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ea8:	bf08      	it	eq
   d7eaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7eae:	bd70      	pop	{r4, r5, r6, pc}
   d7eb0:	f1c4 040c 	rsb	r4, r4, #12
   d7eb4:	f1c4 0520 	rsb	r5, r4, #32
   d7eb8:	fa00 f304 	lsl.w	r3, r0, r4
   d7ebc:	fa20 f005 	lsr.w	r0, r0, r5
   d7ec0:	fa01 f204 	lsl.w	r2, r1, r4
   d7ec4:	ea40 0002 	orr.w	r0, r0, r2
   d7ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ecc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7ed0:	f141 0100 	adc.w	r1, r1, #0
   d7ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ed8:	bf08      	it	eq
   d7eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ede:	bd70      	pop	{r4, r5, r6, pc}
   d7ee0:	f1c4 0520 	rsb	r5, r4, #32
   d7ee4:	fa00 f205 	lsl.w	r2, r0, r5
   d7ee8:	ea4e 0e02 	orr.w	lr, lr, r2
   d7eec:	fa20 f304 	lsr.w	r3, r0, r4
   d7ef0:	fa01 f205 	lsl.w	r2, r1, r5
   d7ef4:	ea43 0302 	orr.w	r3, r3, r2
   d7ef8:	fa21 f004 	lsr.w	r0, r1, r4
   d7efc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f00:	fa21 f204 	lsr.w	r2, r1, r4
   d7f04:	ea20 0002 	bic.w	r0, r0, r2
   d7f08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7f10:	bf08      	it	eq
   d7f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7f16:	bd70      	pop	{r4, r5, r6, pc}
   d7f18:	f094 0f00 	teq	r4, #0
   d7f1c:	d10f      	bne.n	d7f3e <__aeabi_dmul+0x1c2>
   d7f1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7f22:	0040      	lsls	r0, r0, #1
   d7f24:	eb41 0101 	adc.w	r1, r1, r1
   d7f28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7f2c:	bf08      	it	eq
   d7f2e:	3c01      	subeq	r4, #1
   d7f30:	d0f7      	beq.n	d7f22 <__aeabi_dmul+0x1a6>
   d7f32:	ea41 0106 	orr.w	r1, r1, r6
   d7f36:	f095 0f00 	teq	r5, #0
   d7f3a:	bf18      	it	ne
   d7f3c:	4770      	bxne	lr
   d7f3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7f42:	0052      	lsls	r2, r2, #1
   d7f44:	eb43 0303 	adc.w	r3, r3, r3
   d7f48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7f4c:	bf08      	it	eq
   d7f4e:	3d01      	subeq	r5, #1
   d7f50:	d0f7      	beq.n	d7f42 <__aeabi_dmul+0x1c6>
   d7f52:	ea43 0306 	orr.w	r3, r3, r6
   d7f56:	4770      	bx	lr
   d7f58:	ea94 0f0c 	teq	r4, ip
   d7f5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7f60:	bf18      	it	ne
   d7f62:	ea95 0f0c 	teqne	r5, ip
   d7f66:	d00c      	beq.n	d7f82 <__aeabi_dmul+0x206>
   d7f68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f6c:	bf18      	it	ne
   d7f6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f72:	d1d1      	bne.n	d7f18 <__aeabi_dmul+0x19c>
   d7f74:	ea81 0103 	eor.w	r1, r1, r3
   d7f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f7c:	f04f 0000 	mov.w	r0, #0
   d7f80:	bd70      	pop	{r4, r5, r6, pc}
   d7f82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f86:	bf06      	itte	eq
   d7f88:	4610      	moveq	r0, r2
   d7f8a:	4619      	moveq	r1, r3
   d7f8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f90:	d019      	beq.n	d7fc6 <__aeabi_dmul+0x24a>
   d7f92:	ea94 0f0c 	teq	r4, ip
   d7f96:	d102      	bne.n	d7f9e <__aeabi_dmul+0x222>
   d7f98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f9c:	d113      	bne.n	d7fc6 <__aeabi_dmul+0x24a>
   d7f9e:	ea95 0f0c 	teq	r5, ip
   d7fa2:	d105      	bne.n	d7fb0 <__aeabi_dmul+0x234>
   d7fa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7fa8:	bf1c      	itt	ne
   d7faa:	4610      	movne	r0, r2
   d7fac:	4619      	movne	r1, r3
   d7fae:	d10a      	bne.n	d7fc6 <__aeabi_dmul+0x24a>
   d7fb0:	ea81 0103 	eor.w	r1, r1, r3
   d7fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7fb8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7fbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7fc0:	f04f 0000 	mov.w	r0, #0
   d7fc4:	bd70      	pop	{r4, r5, r6, pc}
   d7fc6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7fca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7fce:	bd70      	pop	{r4, r5, r6, pc}

000d7fd0 <__aeabi_ddiv>:
   d7fd0:	b570      	push	{r4, r5, r6, lr}
   d7fd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7fd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7fda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7fde:	bf1d      	ittte	ne
   d7fe0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7fe4:	ea94 0f0c 	teqne	r4, ip
   d7fe8:	ea95 0f0c 	teqne	r5, ip
   d7fec:	f000 f8a7 	bleq	d813e <__aeabi_ddiv+0x16e>
   d7ff0:	eba4 0405 	sub.w	r4, r4, r5
   d7ff4:	ea81 0e03 	eor.w	lr, r1, r3
   d7ff8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7ffc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8000:	f000 8088 	beq.w	d8114 <__aeabi_ddiv+0x144>
   d8004:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8008:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d800c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8010:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8014:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8018:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d801c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8020:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8024:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8028:	429d      	cmp	r5, r3
   d802a:	bf08      	it	eq
   d802c:	4296      	cmpeq	r6, r2
   d802e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8032:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8036:	d202      	bcs.n	d803e <__aeabi_ddiv+0x6e>
   d8038:	085b      	lsrs	r3, r3, #1
   d803a:	ea4f 0232 	mov.w	r2, r2, rrx
   d803e:	1ab6      	subs	r6, r6, r2
   d8040:	eb65 0503 	sbc.w	r5, r5, r3
   d8044:	085b      	lsrs	r3, r3, #1
   d8046:	ea4f 0232 	mov.w	r2, r2, rrx
   d804a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d804e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8052:	ebb6 0e02 	subs.w	lr, r6, r2
   d8056:	eb75 0e03 	sbcs.w	lr, r5, r3
   d805a:	bf22      	ittt	cs
   d805c:	1ab6      	subcs	r6, r6, r2
   d805e:	4675      	movcs	r5, lr
   d8060:	ea40 000c 	orrcs.w	r0, r0, ip
   d8064:	085b      	lsrs	r3, r3, #1
   d8066:	ea4f 0232 	mov.w	r2, r2, rrx
   d806a:	ebb6 0e02 	subs.w	lr, r6, r2
   d806e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8072:	bf22      	ittt	cs
   d8074:	1ab6      	subcs	r6, r6, r2
   d8076:	4675      	movcs	r5, lr
   d8078:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d807c:	085b      	lsrs	r3, r3, #1
   d807e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8082:	ebb6 0e02 	subs.w	lr, r6, r2
   d8086:	eb75 0e03 	sbcs.w	lr, r5, r3
   d808a:	bf22      	ittt	cs
   d808c:	1ab6      	subcs	r6, r6, r2
   d808e:	4675      	movcs	r5, lr
   d8090:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8094:	085b      	lsrs	r3, r3, #1
   d8096:	ea4f 0232 	mov.w	r2, r2, rrx
   d809a:	ebb6 0e02 	subs.w	lr, r6, r2
   d809e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d80a2:	bf22      	ittt	cs
   d80a4:	1ab6      	subcs	r6, r6, r2
   d80a6:	4675      	movcs	r5, lr
   d80a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d80ac:	ea55 0e06 	orrs.w	lr, r5, r6
   d80b0:	d018      	beq.n	d80e4 <__aeabi_ddiv+0x114>
   d80b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d80b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d80ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d80be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d80c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d80c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d80ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d80ce:	d1c0      	bne.n	d8052 <__aeabi_ddiv+0x82>
   d80d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80d4:	d10b      	bne.n	d80ee <__aeabi_ddiv+0x11e>
   d80d6:	ea41 0100 	orr.w	r1, r1, r0
   d80da:	f04f 0000 	mov.w	r0, #0
   d80de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d80e2:	e7b6      	b.n	d8052 <__aeabi_ddiv+0x82>
   d80e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80e8:	bf04      	itt	eq
   d80ea:	4301      	orreq	r1, r0
   d80ec:	2000      	moveq	r0, #0
   d80ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d80f2:	bf88      	it	hi
   d80f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d80f8:	f63f aeaf 	bhi.w	d7e5a <__aeabi_dmul+0xde>
   d80fc:	ebb5 0c03 	subs.w	ip, r5, r3
   d8100:	bf04      	itt	eq
   d8102:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8106:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d810a:	f150 0000 	adcs.w	r0, r0, #0
   d810e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8112:	bd70      	pop	{r4, r5, r6, pc}
   d8114:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8118:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d811c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8120:	bfc2      	ittt	gt
   d8122:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8126:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d812a:	bd70      	popgt	{r4, r5, r6, pc}
   d812c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8130:	f04f 0e00 	mov.w	lr, #0
   d8134:	3c01      	subs	r4, #1
   d8136:	e690      	b.n	d7e5a <__aeabi_dmul+0xde>
   d8138:	ea45 0e06 	orr.w	lr, r5, r6
   d813c:	e68d      	b.n	d7e5a <__aeabi_dmul+0xde>
   d813e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8142:	ea94 0f0c 	teq	r4, ip
   d8146:	bf08      	it	eq
   d8148:	ea95 0f0c 	teqeq	r5, ip
   d814c:	f43f af3b 	beq.w	d7fc6 <__aeabi_dmul+0x24a>
   d8150:	ea94 0f0c 	teq	r4, ip
   d8154:	d10a      	bne.n	d816c <__aeabi_ddiv+0x19c>
   d8156:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d815a:	f47f af34 	bne.w	d7fc6 <__aeabi_dmul+0x24a>
   d815e:	ea95 0f0c 	teq	r5, ip
   d8162:	f47f af25 	bne.w	d7fb0 <__aeabi_dmul+0x234>
   d8166:	4610      	mov	r0, r2
   d8168:	4619      	mov	r1, r3
   d816a:	e72c      	b.n	d7fc6 <__aeabi_dmul+0x24a>
   d816c:	ea95 0f0c 	teq	r5, ip
   d8170:	d106      	bne.n	d8180 <__aeabi_ddiv+0x1b0>
   d8172:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8176:	f43f aefd 	beq.w	d7f74 <__aeabi_dmul+0x1f8>
   d817a:	4610      	mov	r0, r2
   d817c:	4619      	mov	r1, r3
   d817e:	e722      	b.n	d7fc6 <__aeabi_dmul+0x24a>
   d8180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8184:	bf18      	it	ne
   d8186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d818a:	f47f aec5 	bne.w	d7f18 <__aeabi_dmul+0x19c>
   d818e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8192:	f47f af0d 	bne.w	d7fb0 <__aeabi_dmul+0x234>
   d8196:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d819a:	f47f aeeb 	bne.w	d7f74 <__aeabi_dmul+0x1f8>
   d819e:	e712      	b.n	d7fc6 <__aeabi_dmul+0x24a>

000d81a0 <__gedf2>:
   d81a0:	f04f 3cff 	mov.w	ip, #4294967295
   d81a4:	e006      	b.n	d81b4 <__cmpdf2+0x4>
   d81a6:	bf00      	nop

000d81a8 <__ledf2>:
   d81a8:	f04f 0c01 	mov.w	ip, #1
   d81ac:	e002      	b.n	d81b4 <__cmpdf2+0x4>
   d81ae:	bf00      	nop

000d81b0 <__cmpdf2>:
   d81b0:	f04f 0c01 	mov.w	ip, #1
   d81b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d81b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d81bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d81c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d81c4:	bf18      	it	ne
   d81c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d81ca:	d01b      	beq.n	d8204 <__cmpdf2+0x54>
   d81cc:	b001      	add	sp, #4
   d81ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d81d2:	bf0c      	ite	eq
   d81d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d81d8:	ea91 0f03 	teqne	r1, r3
   d81dc:	bf02      	ittt	eq
   d81de:	ea90 0f02 	teqeq	r0, r2
   d81e2:	2000      	moveq	r0, #0
   d81e4:	4770      	bxeq	lr
   d81e6:	f110 0f00 	cmn.w	r0, #0
   d81ea:	ea91 0f03 	teq	r1, r3
   d81ee:	bf58      	it	pl
   d81f0:	4299      	cmppl	r1, r3
   d81f2:	bf08      	it	eq
   d81f4:	4290      	cmpeq	r0, r2
   d81f6:	bf2c      	ite	cs
   d81f8:	17d8      	asrcs	r0, r3, #31
   d81fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d81fe:	f040 0001 	orr.w	r0, r0, #1
   d8202:	4770      	bx	lr
   d8204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d820c:	d102      	bne.n	d8214 <__cmpdf2+0x64>
   d820e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8212:	d107      	bne.n	d8224 <__cmpdf2+0x74>
   d8214:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d821c:	d1d6      	bne.n	d81cc <__cmpdf2+0x1c>
   d821e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8222:	d0d3      	beq.n	d81cc <__cmpdf2+0x1c>
   d8224:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8228:	4770      	bx	lr
   d822a:	bf00      	nop

000d822c <__aeabi_cdrcmple>:
   d822c:	4684      	mov	ip, r0
   d822e:	4610      	mov	r0, r2
   d8230:	4662      	mov	r2, ip
   d8232:	468c      	mov	ip, r1
   d8234:	4619      	mov	r1, r3
   d8236:	4663      	mov	r3, ip
   d8238:	e000      	b.n	d823c <__aeabi_cdcmpeq>
   d823a:	bf00      	nop

000d823c <__aeabi_cdcmpeq>:
   d823c:	b501      	push	{r0, lr}
   d823e:	f7ff ffb7 	bl	d81b0 <__cmpdf2>
   d8242:	2800      	cmp	r0, #0
   d8244:	bf48      	it	mi
   d8246:	f110 0f00 	cmnmi.w	r0, #0
   d824a:	bd01      	pop	{r0, pc}

000d824c <__aeabi_dcmpeq>:
   d824c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8250:	f7ff fff4 	bl	d823c <__aeabi_cdcmpeq>
   d8254:	bf0c      	ite	eq
   d8256:	2001      	moveq	r0, #1
   d8258:	2000      	movne	r0, #0
   d825a:	f85d fb08 	ldr.w	pc, [sp], #8
   d825e:	bf00      	nop

000d8260 <__aeabi_dcmplt>:
   d8260:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8264:	f7ff ffea 	bl	d823c <__aeabi_cdcmpeq>
   d8268:	bf34      	ite	cc
   d826a:	2001      	movcc	r0, #1
   d826c:	2000      	movcs	r0, #0
   d826e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8272:	bf00      	nop

000d8274 <__aeabi_dcmple>:
   d8274:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8278:	f7ff ffe0 	bl	d823c <__aeabi_cdcmpeq>
   d827c:	bf94      	ite	ls
   d827e:	2001      	movls	r0, #1
   d8280:	2000      	movhi	r0, #0
   d8282:	f85d fb08 	ldr.w	pc, [sp], #8
   d8286:	bf00      	nop

000d8288 <__aeabi_dcmpge>:
   d8288:	f84d ed08 	str.w	lr, [sp, #-8]!
   d828c:	f7ff ffce 	bl	d822c <__aeabi_cdrcmple>
   d8290:	bf94      	ite	ls
   d8292:	2001      	movls	r0, #1
   d8294:	2000      	movhi	r0, #0
   d8296:	f85d fb08 	ldr.w	pc, [sp], #8
   d829a:	bf00      	nop

000d829c <__aeabi_dcmpgt>:
   d829c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d82a0:	f7ff ffc4 	bl	d822c <__aeabi_cdrcmple>
   d82a4:	bf34      	ite	cc
   d82a6:	2001      	movcc	r0, #1
   d82a8:	2000      	movcs	r0, #0
   d82aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d82ae:	bf00      	nop

000d82b0 <__aeabi_dcmpun>:
   d82b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d82b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82b8:	d102      	bne.n	d82c0 <__aeabi_dcmpun+0x10>
   d82ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d82be:	d10a      	bne.n	d82d6 <__aeabi_dcmpun+0x26>
   d82c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d82c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82c8:	d102      	bne.n	d82d0 <__aeabi_dcmpun+0x20>
   d82ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d82ce:	d102      	bne.n	d82d6 <__aeabi_dcmpun+0x26>
   d82d0:	f04f 0000 	mov.w	r0, #0
   d82d4:	4770      	bx	lr
   d82d6:	f04f 0001 	mov.w	r0, #1
   d82da:	4770      	bx	lr

000d82dc <__aeabi_d2iz>:
   d82dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d82e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d82e4:	d215      	bcs.n	d8312 <__aeabi_d2iz+0x36>
   d82e6:	d511      	bpl.n	d830c <__aeabi_d2iz+0x30>
   d82e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d82ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d82f0:	d912      	bls.n	d8318 <__aeabi_d2iz+0x3c>
   d82f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d82f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d82fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d82fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8302:	fa23 f002 	lsr.w	r0, r3, r2
   d8306:	bf18      	it	ne
   d8308:	4240      	negne	r0, r0
   d830a:	4770      	bx	lr
   d830c:	f04f 0000 	mov.w	r0, #0
   d8310:	4770      	bx	lr
   d8312:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8316:	d105      	bne.n	d8324 <__aeabi_d2iz+0x48>
   d8318:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d831c:	bf08      	it	eq
   d831e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8322:	4770      	bx	lr
   d8324:	f04f 0000 	mov.w	r0, #0
   d8328:	4770      	bx	lr
   d832a:	bf00      	nop

000d832c <__aeabi_d2uiz>:
   d832c:	004a      	lsls	r2, r1, #1
   d832e:	d211      	bcs.n	d8354 <__aeabi_d2uiz+0x28>
   d8330:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8334:	d211      	bcs.n	d835a <__aeabi_d2uiz+0x2e>
   d8336:	d50d      	bpl.n	d8354 <__aeabi_d2uiz+0x28>
   d8338:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d833c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8340:	d40e      	bmi.n	d8360 <__aeabi_d2uiz+0x34>
   d8342:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d834a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d834e:	fa23 f002 	lsr.w	r0, r3, r2
   d8352:	4770      	bx	lr
   d8354:	f04f 0000 	mov.w	r0, #0
   d8358:	4770      	bx	lr
   d835a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d835e:	d102      	bne.n	d8366 <__aeabi_d2uiz+0x3a>
   d8360:	f04f 30ff 	mov.w	r0, #4294967295
   d8364:	4770      	bx	lr
   d8366:	f04f 0000 	mov.w	r0, #0
   d836a:	4770      	bx	lr

000d836c <__aeabi_d2f>:
   d836c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8370:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8374:	bf24      	itt	cs
   d8376:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d837a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d837e:	d90d      	bls.n	d839c <__aeabi_d2f+0x30>
   d8380:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8384:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8388:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d838c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8390:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8394:	bf08      	it	eq
   d8396:	f020 0001 	biceq.w	r0, r0, #1
   d839a:	4770      	bx	lr
   d839c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d83a0:	d121      	bne.n	d83e6 <__aeabi_d2f+0x7a>
   d83a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d83a6:	bfbc      	itt	lt
   d83a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d83ac:	4770      	bxlt	lr
   d83ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d83b6:	f1c2 0218 	rsb	r2, r2, #24
   d83ba:	f1c2 0c20 	rsb	ip, r2, #32
   d83be:	fa10 f30c 	lsls.w	r3, r0, ip
   d83c2:	fa20 f002 	lsr.w	r0, r0, r2
   d83c6:	bf18      	it	ne
   d83c8:	f040 0001 	orrne.w	r0, r0, #1
   d83cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d83d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d83d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d83d8:	ea40 000c 	orr.w	r0, r0, ip
   d83dc:	fa23 f302 	lsr.w	r3, r3, r2
   d83e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d83e4:	e7cc      	b.n	d8380 <__aeabi_d2f+0x14>
   d83e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d83ea:	d107      	bne.n	d83fc <__aeabi_d2f+0x90>
   d83ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d83f0:	bf1e      	ittt	ne
   d83f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d83f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d83fa:	4770      	bxne	lr
   d83fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8400:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8408:	4770      	bx	lr
   d840a:	bf00      	nop

000d840c <__aeabi_uldivmod>:
   d840c:	b953      	cbnz	r3, d8424 <__aeabi_uldivmod+0x18>
   d840e:	b94a      	cbnz	r2, d8424 <__aeabi_uldivmod+0x18>
   d8410:	2900      	cmp	r1, #0
   d8412:	bf08      	it	eq
   d8414:	2800      	cmpeq	r0, #0
   d8416:	bf1c      	itt	ne
   d8418:	f04f 31ff 	movne.w	r1, #4294967295
   d841c:	f04f 30ff 	movne.w	r0, #4294967295
   d8420:	f000 b98c 	b.w	d873c <__aeabi_idiv0>
   d8424:	f1ad 0c08 	sub.w	ip, sp, #8
   d8428:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d842c:	f000 f824 	bl	d8478 <__udivmoddi4>
   d8430:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8438:	b004      	add	sp, #16
   d843a:	4770      	bx	lr

000d843c <__aeabi_d2ulz>:
   d843c:	b5d0      	push	{r4, r6, r7, lr}
   d843e:	4b0c      	ldr	r3, [pc, #48]	; (d8470 <__aeabi_d2ulz+0x34>)
   d8440:	2200      	movs	r2, #0
   d8442:	4606      	mov	r6, r0
   d8444:	460f      	mov	r7, r1
   d8446:	f7ff fc99 	bl	d7d7c <__aeabi_dmul>
   d844a:	f7ff ff6f 	bl	d832c <__aeabi_d2uiz>
   d844e:	4604      	mov	r4, r0
   d8450:	f7ff fc1a 	bl	d7c88 <__aeabi_ui2d>
   d8454:	4b07      	ldr	r3, [pc, #28]	; (d8474 <__aeabi_d2ulz+0x38>)
   d8456:	2200      	movs	r2, #0
   d8458:	f7ff fc90 	bl	d7d7c <__aeabi_dmul>
   d845c:	4602      	mov	r2, r0
   d845e:	460b      	mov	r3, r1
   d8460:	4630      	mov	r0, r6
   d8462:	4639      	mov	r1, r7
   d8464:	f7ff fad2 	bl	d7a0c <__aeabi_dsub>
   d8468:	f7ff ff60 	bl	d832c <__aeabi_d2uiz>
   d846c:	4621      	mov	r1, r4
   d846e:	bdd0      	pop	{r4, r6, r7, pc}
   d8470:	3df00000 	.word	0x3df00000
   d8474:	41f00000 	.word	0x41f00000

000d8478 <__udivmoddi4>:
   d8478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d847c:	9d08      	ldr	r5, [sp, #32]
   d847e:	4604      	mov	r4, r0
   d8480:	468c      	mov	ip, r1
   d8482:	2b00      	cmp	r3, #0
   d8484:	f040 8083 	bne.w	d858e <__udivmoddi4+0x116>
   d8488:	428a      	cmp	r2, r1
   d848a:	4617      	mov	r7, r2
   d848c:	d947      	bls.n	d851e <__udivmoddi4+0xa6>
   d848e:	fab2 f282 	clz	r2, r2
   d8492:	b142      	cbz	r2, d84a6 <__udivmoddi4+0x2e>
   d8494:	f1c2 0020 	rsb	r0, r2, #32
   d8498:	fa24 f000 	lsr.w	r0, r4, r0
   d849c:	4091      	lsls	r1, r2
   d849e:	4097      	lsls	r7, r2
   d84a0:	ea40 0c01 	orr.w	ip, r0, r1
   d84a4:	4094      	lsls	r4, r2
   d84a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d84aa:	0c23      	lsrs	r3, r4, #16
   d84ac:	fbbc f6f8 	udiv	r6, ip, r8
   d84b0:	fa1f fe87 	uxth.w	lr, r7
   d84b4:	fb08 c116 	mls	r1, r8, r6, ip
   d84b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d84bc:	fb06 f10e 	mul.w	r1, r6, lr
   d84c0:	4299      	cmp	r1, r3
   d84c2:	d909      	bls.n	d84d8 <__udivmoddi4+0x60>
   d84c4:	18fb      	adds	r3, r7, r3
   d84c6:	f106 30ff 	add.w	r0, r6, #4294967295
   d84ca:	f080 8119 	bcs.w	d8700 <__udivmoddi4+0x288>
   d84ce:	4299      	cmp	r1, r3
   d84d0:	f240 8116 	bls.w	d8700 <__udivmoddi4+0x288>
   d84d4:	3e02      	subs	r6, #2
   d84d6:	443b      	add	r3, r7
   d84d8:	1a5b      	subs	r3, r3, r1
   d84da:	b2a4      	uxth	r4, r4
   d84dc:	fbb3 f0f8 	udiv	r0, r3, r8
   d84e0:	fb08 3310 	mls	r3, r8, r0, r3
   d84e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d84e8:	fb00 fe0e 	mul.w	lr, r0, lr
   d84ec:	45a6      	cmp	lr, r4
   d84ee:	d909      	bls.n	d8504 <__udivmoddi4+0x8c>
   d84f0:	193c      	adds	r4, r7, r4
   d84f2:	f100 33ff 	add.w	r3, r0, #4294967295
   d84f6:	f080 8105 	bcs.w	d8704 <__udivmoddi4+0x28c>
   d84fa:	45a6      	cmp	lr, r4
   d84fc:	f240 8102 	bls.w	d8704 <__udivmoddi4+0x28c>
   d8500:	3802      	subs	r0, #2
   d8502:	443c      	add	r4, r7
   d8504:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8508:	eba4 040e 	sub.w	r4, r4, lr
   d850c:	2600      	movs	r6, #0
   d850e:	b11d      	cbz	r5, d8518 <__udivmoddi4+0xa0>
   d8510:	40d4      	lsrs	r4, r2
   d8512:	2300      	movs	r3, #0
   d8514:	e9c5 4300 	strd	r4, r3, [r5]
   d8518:	4631      	mov	r1, r6
   d851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d851e:	b902      	cbnz	r2, d8522 <__udivmoddi4+0xaa>
   d8520:	deff      	udf	#255	; 0xff
   d8522:	fab2 f282 	clz	r2, r2
   d8526:	2a00      	cmp	r2, #0
   d8528:	d150      	bne.n	d85cc <__udivmoddi4+0x154>
   d852a:	1bcb      	subs	r3, r1, r7
   d852c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8530:	fa1f f887 	uxth.w	r8, r7
   d8534:	2601      	movs	r6, #1
   d8536:	fbb3 fcfe 	udiv	ip, r3, lr
   d853a:	0c21      	lsrs	r1, r4, #16
   d853c:	fb0e 331c 	mls	r3, lr, ip, r3
   d8540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8544:	fb08 f30c 	mul.w	r3, r8, ip
   d8548:	428b      	cmp	r3, r1
   d854a:	d907      	bls.n	d855c <__udivmoddi4+0xe4>
   d854c:	1879      	adds	r1, r7, r1
   d854e:	f10c 30ff 	add.w	r0, ip, #4294967295
   d8552:	d202      	bcs.n	d855a <__udivmoddi4+0xe2>
   d8554:	428b      	cmp	r3, r1
   d8556:	f200 80e9 	bhi.w	d872c <__udivmoddi4+0x2b4>
   d855a:	4684      	mov	ip, r0
   d855c:	1ac9      	subs	r1, r1, r3
   d855e:	b2a3      	uxth	r3, r4
   d8560:	fbb1 f0fe 	udiv	r0, r1, lr
   d8564:	fb0e 1110 	mls	r1, lr, r0, r1
   d8568:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d856c:	fb08 f800 	mul.w	r8, r8, r0
   d8570:	45a0      	cmp	r8, r4
   d8572:	d907      	bls.n	d8584 <__udivmoddi4+0x10c>
   d8574:	193c      	adds	r4, r7, r4
   d8576:	f100 33ff 	add.w	r3, r0, #4294967295
   d857a:	d202      	bcs.n	d8582 <__udivmoddi4+0x10a>
   d857c:	45a0      	cmp	r8, r4
   d857e:	f200 80d9 	bhi.w	d8734 <__udivmoddi4+0x2bc>
   d8582:	4618      	mov	r0, r3
   d8584:	eba4 0408 	sub.w	r4, r4, r8
   d8588:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d858c:	e7bf      	b.n	d850e <__udivmoddi4+0x96>
   d858e:	428b      	cmp	r3, r1
   d8590:	d909      	bls.n	d85a6 <__udivmoddi4+0x12e>
   d8592:	2d00      	cmp	r5, #0
   d8594:	f000 80b1 	beq.w	d86fa <__udivmoddi4+0x282>
   d8598:	2600      	movs	r6, #0
   d859a:	e9c5 0100 	strd	r0, r1, [r5]
   d859e:	4630      	mov	r0, r6
   d85a0:	4631      	mov	r1, r6
   d85a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85a6:	fab3 f683 	clz	r6, r3
   d85aa:	2e00      	cmp	r6, #0
   d85ac:	d14a      	bne.n	d8644 <__udivmoddi4+0x1cc>
   d85ae:	428b      	cmp	r3, r1
   d85b0:	d302      	bcc.n	d85b8 <__udivmoddi4+0x140>
   d85b2:	4282      	cmp	r2, r0
   d85b4:	f200 80b8 	bhi.w	d8728 <__udivmoddi4+0x2b0>
   d85b8:	1a84      	subs	r4, r0, r2
   d85ba:	eb61 0103 	sbc.w	r1, r1, r3
   d85be:	2001      	movs	r0, #1
   d85c0:	468c      	mov	ip, r1
   d85c2:	2d00      	cmp	r5, #0
   d85c4:	d0a8      	beq.n	d8518 <__udivmoddi4+0xa0>
   d85c6:	e9c5 4c00 	strd	r4, ip, [r5]
   d85ca:	e7a5      	b.n	d8518 <__udivmoddi4+0xa0>
   d85cc:	f1c2 0320 	rsb	r3, r2, #32
   d85d0:	fa20 f603 	lsr.w	r6, r0, r3
   d85d4:	4097      	lsls	r7, r2
   d85d6:	fa01 f002 	lsl.w	r0, r1, r2
   d85da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d85de:	40d9      	lsrs	r1, r3
   d85e0:	4330      	orrs	r0, r6
   d85e2:	0c03      	lsrs	r3, r0, #16
   d85e4:	fbb1 f6fe 	udiv	r6, r1, lr
   d85e8:	fa1f f887 	uxth.w	r8, r7
   d85ec:	fb0e 1116 	mls	r1, lr, r6, r1
   d85f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d85f4:	fb06 f108 	mul.w	r1, r6, r8
   d85f8:	4299      	cmp	r1, r3
   d85fa:	fa04 f402 	lsl.w	r4, r4, r2
   d85fe:	d909      	bls.n	d8614 <__udivmoddi4+0x19c>
   d8600:	18fb      	adds	r3, r7, r3
   d8602:	f106 3cff 	add.w	ip, r6, #4294967295
   d8606:	f080 808d 	bcs.w	d8724 <__udivmoddi4+0x2ac>
   d860a:	4299      	cmp	r1, r3
   d860c:	f240 808a 	bls.w	d8724 <__udivmoddi4+0x2ac>
   d8610:	3e02      	subs	r6, #2
   d8612:	443b      	add	r3, r7
   d8614:	1a5b      	subs	r3, r3, r1
   d8616:	b281      	uxth	r1, r0
   d8618:	fbb3 f0fe 	udiv	r0, r3, lr
   d861c:	fb0e 3310 	mls	r3, lr, r0, r3
   d8620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8624:	fb00 f308 	mul.w	r3, r0, r8
   d8628:	428b      	cmp	r3, r1
   d862a:	d907      	bls.n	d863c <__udivmoddi4+0x1c4>
   d862c:	1879      	adds	r1, r7, r1
   d862e:	f100 3cff 	add.w	ip, r0, #4294967295
   d8632:	d273      	bcs.n	d871c <__udivmoddi4+0x2a4>
   d8634:	428b      	cmp	r3, r1
   d8636:	d971      	bls.n	d871c <__udivmoddi4+0x2a4>
   d8638:	3802      	subs	r0, #2
   d863a:	4439      	add	r1, r7
   d863c:	1acb      	subs	r3, r1, r3
   d863e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8642:	e778      	b.n	d8536 <__udivmoddi4+0xbe>
   d8644:	f1c6 0c20 	rsb	ip, r6, #32
   d8648:	fa03 f406 	lsl.w	r4, r3, r6
   d864c:	fa22 f30c 	lsr.w	r3, r2, ip
   d8650:	431c      	orrs	r4, r3
   d8652:	fa20 f70c 	lsr.w	r7, r0, ip
   d8656:	fa01 f306 	lsl.w	r3, r1, r6
   d865a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d865e:	fa21 f10c 	lsr.w	r1, r1, ip
   d8662:	431f      	orrs	r7, r3
   d8664:	0c3b      	lsrs	r3, r7, #16
   d8666:	fbb1 f9fe 	udiv	r9, r1, lr
   d866a:	fa1f f884 	uxth.w	r8, r4
   d866e:	fb0e 1119 	mls	r1, lr, r9, r1
   d8672:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8676:	fb09 fa08 	mul.w	sl, r9, r8
   d867a:	458a      	cmp	sl, r1
   d867c:	fa02 f206 	lsl.w	r2, r2, r6
   d8680:	fa00 f306 	lsl.w	r3, r0, r6
   d8684:	d908      	bls.n	d8698 <__udivmoddi4+0x220>
   d8686:	1861      	adds	r1, r4, r1
   d8688:	f109 30ff 	add.w	r0, r9, #4294967295
   d868c:	d248      	bcs.n	d8720 <__udivmoddi4+0x2a8>
   d868e:	458a      	cmp	sl, r1
   d8690:	d946      	bls.n	d8720 <__udivmoddi4+0x2a8>
   d8692:	f1a9 0902 	sub.w	r9, r9, #2
   d8696:	4421      	add	r1, r4
   d8698:	eba1 010a 	sub.w	r1, r1, sl
   d869c:	b2bf      	uxth	r7, r7
   d869e:	fbb1 f0fe 	udiv	r0, r1, lr
   d86a2:	fb0e 1110 	mls	r1, lr, r0, r1
   d86a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d86aa:	fb00 f808 	mul.w	r8, r0, r8
   d86ae:	45b8      	cmp	r8, r7
   d86b0:	d907      	bls.n	d86c2 <__udivmoddi4+0x24a>
   d86b2:	19e7      	adds	r7, r4, r7
   d86b4:	f100 31ff 	add.w	r1, r0, #4294967295
   d86b8:	d22e      	bcs.n	d8718 <__udivmoddi4+0x2a0>
   d86ba:	45b8      	cmp	r8, r7
   d86bc:	d92c      	bls.n	d8718 <__udivmoddi4+0x2a0>
   d86be:	3802      	subs	r0, #2
   d86c0:	4427      	add	r7, r4
   d86c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d86c6:	eba7 0708 	sub.w	r7, r7, r8
   d86ca:	fba0 8902 	umull	r8, r9, r0, r2
   d86ce:	454f      	cmp	r7, r9
   d86d0:	46c6      	mov	lr, r8
   d86d2:	4649      	mov	r1, r9
   d86d4:	d31a      	bcc.n	d870c <__udivmoddi4+0x294>
   d86d6:	d017      	beq.n	d8708 <__udivmoddi4+0x290>
   d86d8:	b15d      	cbz	r5, d86f2 <__udivmoddi4+0x27a>
   d86da:	ebb3 020e 	subs.w	r2, r3, lr
   d86de:	eb67 0701 	sbc.w	r7, r7, r1
   d86e2:	fa07 fc0c 	lsl.w	ip, r7, ip
   d86e6:	40f2      	lsrs	r2, r6
   d86e8:	ea4c 0202 	orr.w	r2, ip, r2
   d86ec:	40f7      	lsrs	r7, r6
   d86ee:	e9c5 2700 	strd	r2, r7, [r5]
   d86f2:	2600      	movs	r6, #0
   d86f4:	4631      	mov	r1, r6
   d86f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d86fa:	462e      	mov	r6, r5
   d86fc:	4628      	mov	r0, r5
   d86fe:	e70b      	b.n	d8518 <__udivmoddi4+0xa0>
   d8700:	4606      	mov	r6, r0
   d8702:	e6e9      	b.n	d84d8 <__udivmoddi4+0x60>
   d8704:	4618      	mov	r0, r3
   d8706:	e6fd      	b.n	d8504 <__udivmoddi4+0x8c>
   d8708:	4543      	cmp	r3, r8
   d870a:	d2e5      	bcs.n	d86d8 <__udivmoddi4+0x260>
   d870c:	ebb8 0e02 	subs.w	lr, r8, r2
   d8710:	eb69 0104 	sbc.w	r1, r9, r4
   d8714:	3801      	subs	r0, #1
   d8716:	e7df      	b.n	d86d8 <__udivmoddi4+0x260>
   d8718:	4608      	mov	r0, r1
   d871a:	e7d2      	b.n	d86c2 <__udivmoddi4+0x24a>
   d871c:	4660      	mov	r0, ip
   d871e:	e78d      	b.n	d863c <__udivmoddi4+0x1c4>
   d8720:	4681      	mov	r9, r0
   d8722:	e7b9      	b.n	d8698 <__udivmoddi4+0x220>
   d8724:	4666      	mov	r6, ip
   d8726:	e775      	b.n	d8614 <__udivmoddi4+0x19c>
   d8728:	4630      	mov	r0, r6
   d872a:	e74a      	b.n	d85c2 <__udivmoddi4+0x14a>
   d872c:	f1ac 0c02 	sub.w	ip, ip, #2
   d8730:	4439      	add	r1, r7
   d8732:	e713      	b.n	d855c <__udivmoddi4+0xe4>
   d8734:	3802      	subs	r0, #2
   d8736:	443c      	add	r4, r7
   d8738:	e724      	b.n	d8584 <__udivmoddi4+0x10c>
   d873a:	bf00      	nop

000d873c <__aeabi_idiv0>:
   d873c:	4770      	bx	lr
   d873e:	bf00      	nop

000d8740 <__cxa_atexit>:
   d8740:	b510      	push	{r4, lr}
   d8742:	4c05      	ldr	r4, [pc, #20]	; (d8758 <__cxa_atexit+0x18>)
   d8744:	4613      	mov	r3, r2
   d8746:	b12c      	cbz	r4, d8754 <__cxa_atexit+0x14>
   d8748:	460a      	mov	r2, r1
   d874a:	4601      	mov	r1, r0
   d874c:	2002      	movs	r0, #2
   d874e:	f3af 8000 	nop.w
   d8752:	bd10      	pop	{r4, pc}
   d8754:	4620      	mov	r0, r4
   d8756:	e7fc      	b.n	d8752 <__cxa_atexit+0x12>
   d8758:	00000000 	.word	0x00000000

000d875c <memcpy>:
   d875c:	440a      	add	r2, r1
   d875e:	4291      	cmp	r1, r2
   d8760:	f100 33ff 	add.w	r3, r0, #4294967295
   d8764:	d100      	bne.n	d8768 <memcpy+0xc>
   d8766:	4770      	bx	lr
   d8768:	b510      	push	{r4, lr}
   d876a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d876e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8772:	4291      	cmp	r1, r2
   d8774:	d1f9      	bne.n	d876a <memcpy+0xe>
   d8776:	bd10      	pop	{r4, pc}

000d8778 <memset>:
   d8778:	4402      	add	r2, r0
   d877a:	4603      	mov	r3, r0
   d877c:	4293      	cmp	r3, r2
   d877e:	d100      	bne.n	d8782 <memset+0xa>
   d8780:	4770      	bx	lr
   d8782:	f803 1b01 	strb.w	r1, [r3], #1
   d8786:	e7f9      	b.n	d877c <memset+0x4>

000d8788 <srand>:
   d8788:	b538      	push	{r3, r4, r5, lr}
   d878a:	4b0d      	ldr	r3, [pc, #52]	; (d87c0 <srand+0x38>)
   d878c:	681d      	ldr	r5, [r3, #0]
   d878e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8790:	4604      	mov	r4, r0
   d8792:	b97b      	cbnz	r3, d87b4 <srand+0x2c>
   d8794:	2018      	movs	r0, #24
   d8796:	f7fd fbf7 	bl	d5f88 <malloc>
   d879a:	4a0a      	ldr	r2, [pc, #40]	; (d87c4 <srand+0x3c>)
   d879c:	4b0a      	ldr	r3, [pc, #40]	; (d87c8 <srand+0x40>)
   d879e:	63a8      	str	r0, [r5, #56]	; 0x38
   d87a0:	e9c0 2300 	strd	r2, r3, [r0]
   d87a4:	4b09      	ldr	r3, [pc, #36]	; (d87cc <srand+0x44>)
   d87a6:	6083      	str	r3, [r0, #8]
   d87a8:	230b      	movs	r3, #11
   d87aa:	8183      	strh	r3, [r0, #12]
   d87ac:	2201      	movs	r2, #1
   d87ae:	2300      	movs	r3, #0
   d87b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d87b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d87b6:	2200      	movs	r2, #0
   d87b8:	611c      	str	r4, [r3, #16]
   d87ba:	615a      	str	r2, [r3, #20]
   d87bc:	bd38      	pop	{r3, r4, r5, pc}
   d87be:	bf00      	nop
   d87c0:	2003de44 	.word	0x2003de44
   d87c4:	abcd330e 	.word	0xabcd330e
   d87c8:	e66d1234 	.word	0xe66d1234
   d87cc:	0005deec 	.word	0x0005deec

000d87d0 <strcmp>:
   d87d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d87d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d87d8:	2a01      	cmp	r2, #1
   d87da:	bf28      	it	cs
   d87dc:	429a      	cmpcs	r2, r3
   d87de:	d0f7      	beq.n	d87d0 <strcmp>
   d87e0:	1ad0      	subs	r0, r2, r3
   d87e2:	4770      	bx	lr

000d87e4 <strcpy>:
   d87e4:	4603      	mov	r3, r0
   d87e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d87ea:	f803 2b01 	strb.w	r2, [r3], #1
   d87ee:	2a00      	cmp	r2, #0
   d87f0:	d1f9      	bne.n	d87e6 <strcpy+0x2>
   d87f2:	4770      	bx	lr

000d87f4 <strlen>:
   d87f4:	4603      	mov	r3, r0
   d87f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d87fa:	2a00      	cmp	r2, #0
   d87fc:	d1fb      	bne.n	d87f6 <strlen+0x2>
   d87fe:	1a18      	subs	r0, r3, r0
   d8800:	3801      	subs	r0, #1
   d8802:	4770      	bx	lr

000d8804 <strncpy>:
   d8804:	b510      	push	{r4, lr}
   d8806:	3901      	subs	r1, #1
   d8808:	4603      	mov	r3, r0
   d880a:	b132      	cbz	r2, d881a <strncpy+0x16>
   d880c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8810:	f803 4b01 	strb.w	r4, [r3], #1
   d8814:	3a01      	subs	r2, #1
   d8816:	2c00      	cmp	r4, #0
   d8818:	d1f7      	bne.n	d880a <strncpy+0x6>
   d881a:	441a      	add	r2, r3
   d881c:	2100      	movs	r1, #0
   d881e:	4293      	cmp	r3, r2
   d8820:	d100      	bne.n	d8824 <strncpy+0x20>
   d8822:	bd10      	pop	{r4, pc}
   d8824:	f803 1b01 	strb.w	r1, [r3], #1
   d8828:	e7f9      	b.n	d881e <strncpy+0x1a>

000d882a <link_code_end>:
	...

000d882c <dynalib_user>:
   d882c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d883c:	0000 0000 4544 4f4d 4f00 4646 4d00 444f     ....DEMO.OFF.MOD
   d884c:	2045 004c 4f4d 4544 5420 4d00 444f 2045     E L.MODE T.MODE 
   d885c:	0055 2020 6300 6168 676e 4d65 5451 0054     U.  .changeMQTT.
   d886c:	6863 6e61 6567 654e 7774 726f 006b 754c     changeNetwork.Lu
   d887c:	696d 616e 6972 7361 4300 6e6f 6365 6174     minarias.Conecta
   d888c:	646e 206f 6f63 206e 6573 7672 7265 4d20     ndo con server M
   d889c:	5451 0054 3931 2e32 3836 312e 3538 322e     QTT.192.68.185.2
   d88ac:	0037 6e61 7479 6968 676e 6100 6772 6e6f     7.anything.argon
   d88bc:	6c43 6569 746e 6300 6168 676e 4d65 646f     Client.changeMod
   d88cc:	0065 002f 754c 696d 616e 6972 0061 6f43     e./.Luminaria.Co
   d88dc:	656e 7463 6e61 6f64 6320 6e6f 7320 7265     nectando con ser
   d88ec:	6576 2072 514d 5454 4320 6e6f 6966 0067     ver MQTT Config.
   d88fc:	6f43 6e6e 7865 6f69 206e 514d 5454 4320     Connexion MQTT C
   d890c:	4e4f 4946 2047 7865 7469 736f 0061 6f43     ONFIG exitosa.Co
   d891c:	6e6e 7865 6f69 206e 514d 5454 6520 6978     nnexion MQTT exi
   d892c:	6f74 6173 4300 6e6f 6365 6174 646e 206f     tosa.Conectando 
   d893c:	6f63 206e 6573 736e 726f 7365 4920 414e     con sensores INA
   d894c:	3132 2e39 2e2e 0021 694d 6964 6e65 6f64     219...!.Midiendo
   d895c:	5620 4c4f 4154 454a 7920 4320 524f 4952      VOLTAJE y CORRI
   d896c:	4e45 4554 6320 6e6f 4920 414e 3132 2039     ENTE con INA219 
   d897c:	2e2e 002e 656e 4477 7461 0061 5352 4953     ....newData.RSSI
   d898c:	203a 3200 3930 312e 3238 322e 3831 312e     : .209.182.218.1
   d899c:	3537 3100 3239 312e 3836 312e 362e 0000     75.192.168.1.6..
   d89ac:	4d04 5451 0454 0600 514d 7349 7064 4d03     .MQTT...MQIsdp.M
   d89bc:	444f 2045 004d 007b 6922 2264 003a 6522     ODE M.{."id":."e
   d89cc:	3030 6366 3665 6438 3561 6466 6335 3064     00fce68da5fd5cd0
   d89dc:	6439 3238 3730 2238 2c00 2200 616e 656d     9d82078".,."name
   d89ec:	3a22 2200 754c 696d 616e 6972 3161 0022     ":."Luminaria1".
   d89fc:	6d22 646f 2265 003a 6422 7461 2261 003a     "mode":."data":.
   d8a0c:	6c22 6465 3a22 2200 6f76 746c 6761 2265     "led":."voltage"
   d8a1c:	003a 6322 7275 6572 746e 3a22 7d00 2200     :."current":.}."
   d8a2c:	7670 3a22 2200 6162 7474 7265 2279 003a     pv":."battery":.
   d8a3c:	24b8 0000 1194 0000 0258 0000 06a4 0000     .$......X.......
   d8a4c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a5c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a6c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a7c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8a8c:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8a9c:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8aac:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d8abc:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d8acc:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8adc:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d8aec:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8afc:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8b0c:	0226 0000 06a4 0000 0258 0000 0226 0000     &.......X...&...
   d8b1c:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8b2c:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8b3c:	0258 0000 0672 0000 0258 0000 24ea 0000     X...r...X....$..
   d8b4c:	11c6 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8b5c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8b6c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8b7c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8b8c:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8b9c:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8bac:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8bbc:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8bcc:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8bdc:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8bec:	0672 0000 028a 0000 0226 0000 0226 0000     r.......&...&...
   d8bfc:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8c0c:	0226 0000 0226 0000 06a4 0000 0258 0000     &...&.......X...
   d8c1c:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8c2c:	0226 0000 0258 0000 06a4 0000 0226 0000     &...X.......&...
   d8c3c:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8c4c:	0672 0000 0258 0000 24ea 0000 1194 0000     r...X....$......
   d8c5c:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8c6c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c7c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c8c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8c9c:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8cac:	0226 0000 06a4 0000 0258 0000 06a4 0000     &.......X.......
   d8cbc:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8ccc:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8cdc:	0258 0000 0672 0000 028a 0000 0226 0000     X...r.......&...
   d8cec:	0226 0000 0258 0000 0226 0000 06a4 0000     &...X...&.......
   d8cfc:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8d0c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8d1c:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8d2c:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8d3c:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8d4c:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8d5c:	0258 0000 2580 0000 1194 0000 0258 0000     X....%......X...
   d8d6c:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8d7c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8d8c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8d9c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8dac:	0258 0000 0226 0000 06a4 0000 0258 0000     X...&.......X...
   d8dbc:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8dcc:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8ddc:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8dec:	0258 0000 0226 0000 0226 0000 028a 0000     X...&...&.......
   d8dfc:	0226 0000 0226 0000 0258 0000 0226 0000     &...&...X...&...
   d8e0c:	06a4 0000 0258 0000 0226 0000 0258 0000     ....X...&...X...
   d8e1c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8e2c:	06a4 0000 0258 0000 0672 0000 0258 0000     ....X...r...X...
   d8e3c:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8e4c:	0226 0000 0258 0000 06a4 0000 0258 0000     &...X.......X...
   d8e5c:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d8e6c:	24ea 0000 1194 0000 0258 0000 0672 0000     .$......X...r...
   d8e7c:	028a 0000 0226 0000 0226 0000 0258 0000     ....&...&...X...
   d8e8c:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8e9c:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8eac:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8ebc:	0258 0000 0672 0000 0258 0000 06a4 0000     X...r...X.......
   d8ecc:	0258 0000 06a4 0000 0226 0000 06a4 0000     X.......&.......
   d8edc:	0258 0000 06a4 0000 0258 0000 0672 0000     X.......X...r...
   d8eec:	0258 0000 06a4 0000 0226 0000 0258 0000     X.......&...X...
   d8efc:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8f0c:	0258 0000 0226 0000 0258 0000 06a4 0000     X...&...X.......
   d8f1c:	0258 0000 0226 0000 0258 0000 0226 0000     X...&...X...&...
   d8f2c:	0258 0000 0226 0000 0258 0000 0672 0000     X...&...X...r...
   d8f3c:	0258 0000 06a4 0000 0258 0000 0226 0000     X.......X...&...
   d8f4c:	0258 0000 0672 0000 0258 0000 0226 0000     X...r...X...&...
   d8f5c:	0258 0000 06a4 0000 0258 0000 06a4 0000     X.......X.......
   d8f6c:	0226 0000 06a4 0000 0258 0000 254e 0000     &.......X...N%..
   d8f7c:	1194 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8f8c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8f9c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8fac:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d8fbc:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d8fcc:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d8fdc:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d8fec:	0672 0000 0258 0000 06a4 0000 0258 0000     r...X.......X...
   d8ffc:	0672 0000 028a 0000 0672 0000 0258 0000     r.......r...X...
   d900c:	0226 0000 0258 0000 0226 0000 0258 0000     &...X...&...X...
   d901c:	0258 0000 0226 0000 0226 0000 0258 0000     X...&...&...X...
   d902c:	0226 0000 0258 0000 0258 0000 0226 0000     &...X...X...&...
   d903c:	0226 0000 028a 0000 0226 0000 0226 0000     &.......&...&...
   d904c:	06a4 0000 0258 0000 06a4 0000 0258 0000     ....X.......X...
   d905c:	06a4 0000 0226 0000 06a4 0000 0258 0000     ....&.......X...
   d906c:	06a4 0000 0258 0000 06a4 0000 0226 0000     ....X.......&...
   d907c:	06a4 0000 0258 0000                         ....X...

000d9084 <_ZTVN5spark13EthernetClassE>:
	...
   d908c:	6037 000d 602d 000d 6023 000d 6019 000d     7`..-`..#`...`..
   d909c:	600d 000d 6001 000d 5ff5 000d 5fed 000d     .`...`..._..._..
   d90ac:	5fe3 000d 5fd9 000d 74dd 000d               ._..._...t..

000d90b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d90c0:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
   d90d0:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d90e0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d90ec <_ZTV9IPAddress>:
	...
   d90f4:	68b1 000d 68a1 000d 68a3 000d               .h...h...h..

000d9100 <_ZTV9USBSerial>:
	...
   d9108:	69c9 000d 6a31 000d 6a07 000d 648d 000d     .i..1j...j...d..
   d9118:	69f9 000d 69cb 000d 69db 000d 6a2b 000d     .i...i...i..+j..
   d9128:	69eb 000d 69c5 000d                         .i...i..

000d9130 <_ZTV11USARTSerial>:
	...
   d9138:	6ad5 000d 6b41 000d 6b19 000d 648d 000d     .j..Ak...k...d..
   d9148:	6ae9 000d 6b05 000d 6af7 000d 6b13 000d     .j...k...j...k..
   d9158:	6ad7 000d 6adb 000d                         .j...j..

000d9160 <_ZTV7TwoWire>:
	...
   d9168:	6bd1 000d 6c1b 000d 6bf3 000d 6bd3 000d     .k...l...k...k..
   d9178:	6bfb 000d 6c03 000d 6c0b 000d 6c13 000d     .k...l...l...l..
   d9188:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   d9198:	2072 203d 6425 0000                         r = %d..

000d91a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d91a8:	6d49 000d 6d6d 000d 7287 000d 6d7b 000d     Im..mm...r..{m..
   d91b8:	6d4d 000d                                   Mm..

000d91bc <_ZTV9TCPClient>:
	...
   d91c4:	6df9 000d 6e2d 000d 6cc7 000d 6ce1 000d     .m..-n...l...l..
   d91d4:	711d 000d 6e8f 000d 6e61 000d 6d0b 000d     .q...n..an...m..
   d91e4:	7025 000d 6f19 000d 6ec3 000d 71d1 000d     %p...o...n...q..
   d91f4:	6d0d 000d 6d3f 000d 6cf3 000d 6d7f 000d     .m..?m...l...m..
   d9204:	6e41 000d                                   An..

000d9208 <_ZTVN5spark9WiFiClassE>:
	...
   d9210:	72e9 000d 72df 000d 72d5 000d 418d 000d     .r...r...r...A..
   d9220:	4197 000d 72c9 000d 72bd 000d 72b5 000d     .A...r...r...r..
   d9230:	72ab 000d 72a1 000d 74dd 000d               .r...r...t..

000d923c <_ZTV10WiFiSignal>:
	...
   d9244:	728d 000d 7293 000d 728f 000d 72f5 000d     .r...r...r...r..
   d9254:	7329 000d 7355 000d 7389 000d               )s..Us...s..

000d9260 <_ZTVN5spark12NetworkClassE>:
	...
   d9268:	7475 000d 747f 000d 7489 000d 7493 000d     ut...t...t...t..
   d9278:	749d 000d 74a9 000d 74b5 000d 74c1 000d     .t...t...t...t..
   d9288:	74c9 000d 74d3 000d 74dd 000d               .t...t...t..

000d9294 <_ZSt7nothrow>:
	...

000d9295 <_ZTSSt19_Sp_make_shared_tag>:
   d9295:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d92a5:	6572 5f64 6174 0067 0000                     red_tag....

000d92b0 <_ZTISt19_Sp_make_shared_tag>:
   d92b0:	92f0 000d 9295 000d                         ........

000d92b8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d92b8:	9350 000d 92c4 000d 9374 000d               P.......t...

000d92c4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d92c4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d92d4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d92e4:	0045 0000                                   E...

000d92e8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d92e8:	0000 0000 92b8 000d 782d 000d 7841 000d     ........-x..Ax..
   d92f8:	79d5 000d 79d5 000d 78ab 000d 77ed 000d     .y...y...x...w..
   d9308:	7893 000d 7855 000d 7821 000d               .x..Ux..!x..

000d9314 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9314:	9350 000d 9320 000d 92b8 000d               P... .......

000d9320 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9320:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d9330:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d9340:	666e 456f 0000 0000                         nfoE....

000d9348 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9348:	0000 0000 9314 000d 78d5 000d 78e9 000d     .........x...x..
   d9358:	79d5 000d 79d5 000d 78ab 000d 77ed 000d     .y...y...x...w..
   d9368:	79a9 000d 7935 000d 78fd 000d               .y..5y...x..

000d9374 <_ZTISt9type_info>:
   d9374:	92f0 000d 937c 000d                         ....|...

000d937c <_ZTSSt9type_info>:
   d937c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d9389 <link_const_variable_data_end>:
   d9389:	00          	.byte	0x00
	...

000d938c <link_constructors_location>:
   d938c:	000d475d 	.word	0x000d475d
   d9390:	000d5909 	.word	0x000d5909
   d9394:	000d6041 	.word	0x000d6041
   d9398:	000d6069 	.word	0x000d6069
   d939c:	000d6465 	.word	0x000d6465
   d93a0:	000d6719 	.word	0x000d6719
   d93a4:	000d6729 	.word	0x000d6729
   d93a8:	000d6761 	.word	0x000d6761
   d93ac:	000d7461 	.word	0x000d7461
   d93b0:	000d75b1 	.word	0x000d75b1

000d93b4 <link_constructors_end>:
	...
